{
	"info": {
		"_postman_id": "ff29eab8-de3b-4e93-88ef-f6ab66404d8b",
		"name": "Digital-Excellence-API",
		"description": "Testing Digital Excellence API",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Warmup",
			"item": [
				{
					"name": "Project-GetAllProjects-Guest",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b827a93b-2a6d-47e5-9c88-408c119101f8",
								"exec": [
									"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\") + 5000);",
									"",
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
									"});",
									"",
									"pm.test(\"Response must be valid and have a json body\", function () {",
									"    pm.response.to.be.ok;",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{apiUrl}}/api/Project",
							"host": [
								"{{apiUrl}}"
							],
							"path": [
								"api",
								"Project"
							]
						}
					},
					"response": []
				},
				{
					"name": "User-CreateUser-Administrator",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "17613765-0415-4e11-8ebc-373f96e7b631",
								"exec": [
									"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
									"",
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Response must be valid and have a json body\", function () {",
									"     pm.response.to.be.success;",
									"     pm.response.to.be.withBody;",
									"     pm.response.to.be.json;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "IdentityId",
								"type": "text",
								"value": "{{administratorUserIdentityId}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"identityId\": \"999\",\n    \"name\": \"{{userName}}\",\n    \"email\": \"postmantest_email@example.com\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{apiUrl}}/api/User",
							"host": [
								"{{apiUrl}}"
							],
							"path": [
								"api",
								"User"
							]
						}
					},
					"response": []
				}
			],
			"description": "Warmup the API to ensure fast response times",
			"protocolProfileBehavior": {}
		},
		{
			"name": "ACL",
			"item": [
				{
					"name": "Administrator",
					"item": [
						{
							"name": "User",
							"item": [
								{
									"name": "Follow",
									"item": [
										{
											"name": "User-FollowUser-Administrator",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "dab19e4b-17d8-4c2e-8029-762be0ef2f7e",
														"exec": [
															"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
															"var userId = 25",
															"",
															"var jsonData = pm.response.json();",
															"",
															"pm.environment.set(\"createdUserId\", jsonData.id);",
															"pm.environment.set(\"createdUserIdentityId\", jsonData.identityId);",
															"",
															"pm.test(\"Status code is 201\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Response must be valid and have a json body\", function () {",
															"     pm.response.to.be.success;",
															"     pm.response.to.be.withBody;",
															"     pm.response.to.be.json;",
															"});",
															"",
															"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
															"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
															"});",
															"",
															"pm.test(\"Check if created Username matches: \" + userId, function () {",
															"    pm.expect(jsonData.id).to.eql(userId);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "IdentityId",
														"type": "text",
														"value": "{{administratorUserIdentityId}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{apiUrl}}/api/User/follow/{{userIdToFollow}}",
													"host": [
														"{{apiUrl}}"
													],
													"path": [
														"api",
														"User",
														"follow",
														"{{userIdToFollow}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "User-UnFollowUser-Administrator",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "e214fd50-1593-430d-854f-6ff42d4b2c25",
														"exec": [
															"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
															"",
															"pm.test(\"Status code is 201\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
															"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "IdentityId",
														"type": "text",
														"value": "{{administratorUserIdentityId}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{apiUrl}}/api/User/follow/{{userIdToFollow}}",
													"host": [
														"{{apiUrl}}"
													],
													"path": [
														"api",
														"User",
														"follow",
														"{{userIdToFollow}}"
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "User-CreateUser-Administrator",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3472dd38-3639-4000-85bf-327d76ff8bff",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"var userName = pm.environment.get(\"userName\");",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.environment.set(\"createdUserId\", jsonData.id);",
													"pm.environment.set(\"createdUserIdentityId\", jsonData.identityId);",
													"",
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.success;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});",
													"",
													"pm.test(\"Check if created Username matches: \" + userName, function () {",
													"    pm.expect(jsonData.name).to.eql(userName);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{administratorUserIdentityId}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"identityId\": \"999\",\n    \"name\": \"{{userName}}\",\n    \"email\": \"postmantest_email@example.com\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/User",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"User"
											]
										}
									},
									"response": []
								},
								{
									"name": "User-GetUser-Administrator",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "52aa0280-14a9-4195-a7f6-d232e199dbc6",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"var createdUserId = parseInt(pm.environment.get(\"createdUserId\"));",
													"var createdUserIdentityId = pm.environment.get(\"createdUserIdentityId\");",
													"var userName = pm.environment.get(\"userName\");",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Check if updated identity Id matches: \" + createdUserIdentityId, function () {",
													"    pm.expect(jsonData.identityId).to.eql(createdUserIdentityId);",
													"});",
													"",
													"pm.test(\"Check if updated Id matches: \" + createdUserId, function () {",
													"    pm.expect(jsonData.id).to.eql(createdUserId);",
													"});",
													"",
													"pm.test(\"Check previously created UserName with id \" + userName, function () {",
													"    pm.expect(jsonData.name).to.eql(userName);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{administratorUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/User/{{createdUserId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"User",
												"{{createdUserId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "User-UpdateUser-Administrator",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f23ab553-b3c9-4412-95f4-10036357bcd1",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"var userName = pm.environment.get(\"userNameUpdated\");",
													"pm.environment.set(\"userName\", userName);",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.ok;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Check if updated username matches: \" + userName, function () {",
													"    pm.expect(jsonData.name).to.eql(userName);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{administratorUserIdentityId}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"name\": \"{{userNameUpdated}}\",\r\n  \"email\": \"postmantest_email\",\r\n  \"identityId\": \"{{createdUserIdentityId}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/User/{{createdUserId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"User",
												"{{createdUserId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "User-GetUpdatedUser-Administrator",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "fb897acc-7440-4cd3-9719-44fec1b5dc96",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"var createdUserId = parseInt(pm.environment.get(\"createdUserId\"));",
													"var createdUserIdentityId = pm.environment.get(\"createdUserIdentityId\");",
													"var userName = pm.environment.get(\"userName\")",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Check if updated identity Id matches: \" + createdUserIdentityId, function () {",
													"    pm.expect(jsonData.identityId).to.eql(createdUserIdentityId);",
													"});",
													"",
													"pm.test(\"Check if updated Id matches: \" + createdUserId, function () {",
													"    pm.expect(jsonData.id).to.eql(createdUserId);",
													"});",
													"",
													"pm.test(\"Check if updated username matches: \" + userName, function () {",
													"    pm.expect(jsonData.name).to.eql(userName);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{administratorUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/User/{{createdUserId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"User",
												"{{createdUserId}}"
											],
											"query": [
												{
													"key": "",
													"value": "",
													"disabled": true
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "User-GetUser-Self-Administrator",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "7a39f69f-9301-4e3a-8244-58ccaf92456b",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"var administratorUserIdentityId = parseInt(pm.environment.get(\"administratorUserIdentityId\"));",
													"",
													"var jsonData = pm.response.json();",
													"pm.environment.set(\"administratorUserId\", jsonData.id);",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.ok;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});",
													"",
													"pm.test(\"Identity ID is correct and matching: \" + administratorUserIdentityId, function () {",
													"    pm.expect(parseInt(jsonData.identityId)).to.eql(administratorUserIdentityId);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{administratorUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/User",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"User"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Project",
							"item": [
								{
									"name": "Follow",
									"item": [
										{
											"name": "Project-FollowProject-Administrator",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "9fd04b7b-60e7-44ae-be53-f202ce1cfd89",
														"exec": [
															"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
															"var projectName = 3",
															"",
															"var jsonData = pm.response.json();",
															"",
															"pm.environment.set(\"createdUserId\", jsonData.id);",
															"pm.environment.set(\"createdUserIdentityId\", jsonData.identityId);",
															"",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Response must be valid and have a json body\", function () {",
															"     pm.response.to.be.success;",
															"     pm.response.to.be.withBody;",
															"     pm.response.to.be.json;",
															"});",
															"",
															"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
															"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
															"});",
															"",
															"pm.test(\"Check if created Username matches: \" + projectName, function () {",
															"    pm.expect(jsonData.id).to.eql(projectName);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "IdentityId",
														"type": "text",
														"value": "{{administratorUserIdentityId}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{apiUrl}}/api/project/follow/{{projectIdToFollow}}",
													"host": [
														"{{apiUrl}}"
													],
													"path": [
														"api",
														"project",
														"follow",
														"{{projectIdToFollow}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Project-UnFollowProject-Administrator",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "3f426063-1c8b-4d32-9777-bea283d13747",
														"exec": [
															"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
															"",
															"pm.test(\"Status code is 201\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
															"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "IdentityId",
														"type": "text",
														"value": "{{administratorUserIdentityId}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{apiUrl}}/api/project/follow/{{projectIdToFollow}}",
													"host": [
														"{{apiUrl}}"
													],
													"path": [
														"api",
														"project",
														"follow",
														"{{projectIdToFollow}}"
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "Project-CreateProject-Administrator",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "db4582ed-ccd9-4fad-9bc5-9eb796ab82b2",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"var administratorUserId = parseInt(pm.environment.get(\"administratorUserId\"));",
													"var projectName = pm.environment.get(\"projectName\");",
													"var adminUserName = pm.environment.get(\"adminUserName\");",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.environment.set(\"projectId\", jsonData.id);",
													"",
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.success;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});",
													"",
													"pm.test(\"Project Name is set correctly and matching: \" + projectName, function () {",
													"    pm.expect(jsonData.name).to.eql(projectName);",
													"});",
													"",
													"pm.test(\"User Name is correct and matching: \" + adminUserName, function () {",
													"    pm.expect(jsonData.user.name).to.eql(adminUserName);",
													"});",
													"",
													"pm.test(\"Identity ID is correct and matching: \" + administratorUserId, function () {",
													"    pm.expect(parseInt(jsonData.user.id)).to.eql(administratorUserId);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{administratorUserIdentityId}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"name\": \"{{projectName}}\",\r\n  \"description\": \"postmantest_description\",\r\n  \"shortDescription\": \"postmantest_shortdesc\",\r\n  \"uri\": \"postmantest_uri\",\r\n  \"collaborators\": [\r\n    {\r\n      \"fullName\": \"postmantest_collfullname\",\r\n      \"role\": \"postmantest_collrole\"\r\n    }\r\n  ],\r\n  \"created\": \"2020-04-20T08:24:26.693Z\",\r\n  \"updated\": \"2020-04-20T08:24:26.693Z\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/Project",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Project"
											]
										}
									},
									"response": []
								},
								{
									"name": "Project-GetAllProjects-Administrator",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b7dc3c89-e99d-481a-9349-5a99cb721acb",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"var projectName = pm.environment.get(\"projectName\");",
													"",
													"var jsonData = pm.response.json();",
													"",
													"var foundAt;",
													"",
													"function findProject(jsonData, name) {",
													"    for (var i = 0; i < jsonData.results.length; i++) {",
													"        if (jsonData.results[i].name == name) {",
													"            return i;",
													"        }",
													"    }",
													"    return -1;",
													"}",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Project: \" + projectName + \" is in list\", function () {",
													"    foundAt = findProject(jsonData, projectName);",
													"    pm.expect(foundAt).to.not.eql(-1);",
													"});",
													"",
													"pm.test(\"Project Name is set correctly and matching: \" + projectName, function () {",
													"    pm.expect(jsonData.results[foundAt].name).to.eql(projectName);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{administratorUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Project",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Project"
											]
										}
									},
									"response": []
								},
								{
									"name": "Project-GetProject-Administrator",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "580ea907-b7bb-404c-be99-db89133abc92",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"var projectId = parseInt(pm.environment.get(\"projectId\"));",
													"var projectName = pm.environment.get(\"projectName\");",
													"var administratorUserId = parseInt(pm.environment.get(\"administratorUserId\"));",
													"var adminUserName = pm.environment.get(\"adminUserName\");",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"ProjectName is set correctly and matching: \" + projectName, function () {",
													"    pm.expect(jsonData.name).to.eql(projectName);",
													"});",
													"",
													"pm.test(\"User Name is correct and matching: \" + adminUserName, function () {",
													"    pm.expect(jsonData.user.name).to.eql(adminUserName);",
													"});",
													"",
													"pm.test(\"Identity ID is correct and matching: \" + administratorUserId, function () {",
													"    pm.expect(parseInt(jsonData.user.id)).to.eql(administratorUserId);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{administratorUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Project/{{projectId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Project",
												"{{projectId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Project-UpdateProject-Administrator",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4429b1cd-f857-4557-b003-6fce43fb2944",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"var projectName = pm.environment.get(\"projectNameUpdated\");",
													"pm.environment.set(\"projectName\", projectName);",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.ok;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Project Name is set correctly and matching: \" + projectName, function () {",
													"    pm.expect(jsonData.name).to.eql(projectName);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{administratorUserIdentityId}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"name\": \"{{projectNameUpdated}}\",\r\n  \"description\": \"postmantest_description\",\r\n  \"shortDescription\": \"postmantest_shortdesc\",\r\n  \"uri\": \"postmantest_uri\",\r\n  \"collaborators\": [\r\n    {\r\n      \"fullName\": \"postmantest_collfullname\",\r\n      \"role\": \"postmantest_collrole\"\r\n    }\r\n  ],\r\n  \"created\": \"2020-04-20T08:24:26.693Z\",\r\n  \"updated\": \"2020-04-20T08:24:26.693Z\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/Project/{{projectId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Project",
												"{{projectId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Project-GetUpdatedProject-Administrator",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4e1093dc-1ba7-434b-b60f-71399f9fdb5f",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"var administratorUserId = parseInt(pm.environment.get(\"administratorUserId\"));",
													"var projectName = pm.environment.get(\"projectName\");",
													"var adminUserName = pm.environment.get(\"adminUserName\");",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"ProjectName is set correctly and matching: \" + projectName, function () {",
													"    pm.expect(jsonData.name).to.eql(projectName);",
													"});",
													"",
													"pm.test(\"User Name is correct and matching: \" + adminUserName, function () {",
													"    pm.expect(jsonData.user.name).to.eql(adminUserName);",
													"});",
													"",
													"pm.test(\"Identity ID is correct and matching: \" + administratorUserId, function () {",
													"    pm.expect(parseInt(jsonData.user.id)).to.eql(administratorUserId);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{administratorUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Project/{{projectId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Project",
												"{{projectId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Project-GetProject-NonExisting-Administrator",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "9ca4b874-8ae5-4ba8-b2d7-1e6f8670d9fa",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 404\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"    pm.response.to.be.notFound;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{administratorUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Project/98989",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Project",
												"98989"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Highlight",
							"item": [
								{
									"name": "Highlight-CreateHighlight-Administrator",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "35a3168e-d144-43f4-8f06-4e213df479d0",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"var identityId = parseInt(pm.environment.get(\"identityId\"));",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.environment.set(\"highlightId\", jsonData.id);",
													"",
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.success;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "05bcfb21-723e-4269-bec5-ea28fa381201",
												"exec": [
													"var current_timestamp = new Date();\r",
													"postman.setEnvironmentVariable(\"current_timestamp\", current_timestamp.toISOString());\r",
													"\r",
													"var future_timestamp = new Date(Date.now() +(2 * 86400000));\r",
													"postman.setEnvironmentVariable(\"future_timestamp\", future_timestamp.toISOString());\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{administratorUserIdentityId}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"projectId\": {{projectId}},\r\n  \"startDate\": \"{{current_timestamp}}\",\r\n  \"endDate\": \"{{future_timestamp}}\",\r\n  \"description\" : \"Lorem Ipsum\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/Highlight",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Highlight"
											]
										}
									},
									"response": []
								},
								{
									"name": "Highlight-GetAllActiveHighlights-Administrator",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "313c98ec-33aa-4e88-97ad-591ae71a7f2e",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"var projectId = pm.environment.get(\"projectId\");",
													"",
													"var jsonData = pm.response.json();",
													"",
													"var foundAt;",
													"",
													"function findItem(jsonData, item) {",
													"    for (var i = 0; i < jsonData.length; i++) {",
													"        if (jsonData[i].projectId == item) {",
													"            return i;",
													"        }",
													"    }",
													"    return -1;",
													"}",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Highlight is in list and matching: \" + projectId, function () {",
													"    foundAt = findItem(jsonData, projectId);",
													"    pm.expect(foundAt).to.not.eql(-1);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"value": "{{administratorUserIdentityId}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Highlight",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Highlight"
											]
										}
									},
									"response": []
								},
								{
									"name": "Highlight-GetHighlight-Administrator",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "eed3be18-11d8-4f23-8ced-71ebad388e53",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"var identityId = parseInt(pm.environment.get(\"identityId\"));",
													"var highlightId = parseInt(pm.environment.get(\"highlightId\"));",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.environment.set(\"highlightStartDate\", jsonData.startDate);",
													"pm.environment.set(\"highlightEndDate\", jsonData.endDate);",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Highlight Id matches: \" + highlightId, function () {",
													"    pm.expect(jsonData.id).to.eql(highlightId);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"value": "{{administratorUserIdentityId}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Highlight/{{highlightId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Highlight",
												"{{highlightId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Highlight-GetHighlight-ByProject-Administrator",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5fefd285-9c8e-4fa0-acc9-5cba93154363",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"var identityId = parseInt(pm.environment.get(\"identityId\"));",
													"var projectId = parseInt(pm.environment.get(\"projectId\"));",
													"var highlightId = parseInt(pm.environment.get(\"highlightId\"));",
													"",
													"var jsonData = pm.response.json();",
													"",
													"var foundAt;",
													"",
													"function findHighlightId(jsonData, item) {",
													"    for (var i = 0; i < jsonData.length; i++) {",
													"        if (jsonData[i].id == item) {",
													"            return i;",
													"        }",
													"    }",
													"    return -1;",
													"}",
													"",
													"function findProjectId(jsonData, item) {",
													"    for (var i = 0; i < jsonData.length; i++) {",
													"        if (jsonData[i].projectId == item) {",
													"            return i;",
													"        }",
													"    }",
													"    return -1;",
													"}",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Project is in list and matching: \" + projectId, function () {",
													"    foundAt = findProjectId(jsonData, projectId);",
													"    pm.expect(foundAt).to.not.eql(-1);",
													"});",
													"",
													"pm.test(\"Highlight is in list and matching:\" + highlightId, function () {",
													"    foundAt = findHighlightId(jsonData, highlightId);",
													"    pm.expect(foundAt).to.not.eql(-1);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{administratorUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Highlight/Project/{{projectId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Highlight",
												"Project",
												"{{projectId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Highlight-UpdateHighlight-Administrator",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "33330cd9-7f81-4523-a8ae-8d450611fc95",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"var highlightStartDate = pm.environment.get(\"highlightStartDate\");",
													"var highlightId = parseInt(pm.environment.get(\"highlightId\"));",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.ok;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Highlight Id matches: \" + highlightId, function () {",
													"    pm.expect(jsonData.id).to.eql(highlightId);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "b42fd126-77fe-4567-aa47-2189736defed",
												"exec": [
													"var current_timestamp = new Date();\r",
													"postman.setEnvironmentVariable(\"current_timestamp\", current_timestamp.toISOString());"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{administratorUserIdentityId}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"projectId\": \"{{projectId}}\",\r\n  \"startDate\": \"{{current_timestamp}}\",\r\n  \"endDate\": \"{{future_timestamp}}\",\r\n  \"description\" : \"Lorem Ipsum\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/Highlight/{{highlightId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Highlight",
												"{{highlightId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Highlight-GetUpdatedHighlight-Administrator",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "15a4479c-2351-4837-8951-b7d3bb9b8436",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"var highlightUpdateTimestamp = pm.environment.get(\"current_timestamp\");",
													"var highlightEndDate = pm.environment.get(\"highlightEndDate\");",
													"var highlightId = pm.environment.get(\"highlightId\");",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Highlight Id matches: \" + highlightId, function () {",
													"    pm.expect(jsonData.id).to.eql(highlightId);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"value": "{{administratorUserIdentityId}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Highlight/{{highlightId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Highlight",
												"{{highlightId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Highlight-GetHighlight-NonExisting-Administrator",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b82ef281-95dc-4291-ad9b-fbb0e0d96197",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 404\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"    pm.response.to.be.notFound;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json;",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{administratorUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Highlight/98989",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Highlight",
												"98989"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Embed",
							"item": [
								{
									"name": "Embed-CreateEmbed-Administrator",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "bcc14b8e-3fa0-402f-9549-4a068c822f24",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.environment.set(\"embedGuid\", jsonData.guid);",
													"pm.environment.set(\"embeddedProjectId\", jsonData.project.id);",
													"",
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.success;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{administratorUserIdentityId}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"projectId\": {{projectId}}\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/Embed",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Embed"
											]
										}
									},
									"response": []
								},
								{
									"name": "Embed-GetAllEmbeds-Administrator",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f56c0169-0f3b-433e-b208-7140288f7bea",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"var embedGuid = pm.environment.get(\"embedGuid\");",
													"",
													"var jsonData = pm.response.json();",
													"",
													"var foundAt;",
													"",
													"function findItem(jsonData, item) {",
													"    for (var i = 0; i < jsonData.length; i++) {",
													"        if (jsonData[i].guid == item) {",
													"            return i;",
													"        }",
													"    }",
													"    return -1;",
													"}",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Embed is in list and matches: \" + embedGuid, function () {",
													"    foundAt = findItem(jsonData, embedGuid);",
													"    pm.expect(foundAt).to.not.eql(-1);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{administratorUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Embed",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Embed"
											]
										}
									},
									"response": []
								},
								{
									"name": "Embed-GetEmbed-Administrator",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "537d6005-f6f6-4b6c-aad0-5d2ef6fa8fcf",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"var embeddedProjectId = parseInt(pm.environment.get(\"embeddedProjectId\"))",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Embed matches: \" + embeddedProjectId, function () {",
													"    pm.expect(jsonData.id).to.eql(embeddedProjectId);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{administratorUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Embed/{{embedGuid}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Embed",
												"{{embedGuid}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Embed-GetEmbed-NonExisting-Administrator",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "dcd0fc71-f927-4d22-87f4-56cd768ddbb7",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 404\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"    pm.response.to.be.notFound;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json;",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{administratorUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Embed/cdaadc49-b4b9-4c11-8937-e602174cba30",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Embed",
												"cdaadc49-b4b9-4c11-8937-e602174cba30"
											]
										}
									},
									"response": []
								},
								{
									"name": "Embed-GetEmbed-NonExisting-NoGUID-Administrator",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c834c84a-7e0e-4bd6-976e-f212271af58d",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 404\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"    pm.response.to.be.notFound;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json;",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{administratorUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Embed/98989",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Embed",
												"98989"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Role",
							"item": [
								{
									"name": "Role-CreateRole-Administrator",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "8dd40497-eab0-4e6d-b814-d24fe9a60768",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"var scopeName = pm.environment.get(\"scopeName\");",
													"var roleName = pm.environment.get(\"roleName\");",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.environment.set(\"roleId\", jsonData.id);",
													"",
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.success;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});",
													"",
													"pm.test(\"Role Name is set correctly and matching: \" + roleName, function () {",
													"    pm.expect(jsonData.name).to.eql(roleName);",
													"});",
													"",
													"pm.test(\"Scope is correct and matching: \" + scopeName, function () {",
													"    pm.expect(jsonData.scopes.scope).to.eql(scopeName);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{administratorUserIdentityId}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"name\": \"{{roleName}}\",\r\n  \"scopes\": [\r\n    {\r\n      \"scope\": \"EmbedWrite\"\r\n    }\r\n  ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/Role",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Role"
											]
										}
									},
									"response": []
								},
								{
									"name": "Role-GetAllRoles-Administrator",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e629d9dc-4815-4b72-b8dc-d3ce6099c6e8",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"var roleName = pm.environment.get(\"roleName\");",
													"",
													"var jsonData = pm.response.json();",
													"",
													"var foundAt;",
													"",
													"function findProject(jsonData, name) {",
													"    for (var i = 0; i < jsonData.length; i++) {",
													"        if (jsonData[i].name == name) {",
													"            return i;",
													"        }",
													"    }",
													"    return -1;",
													"}",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Role: \" + roleName + \" is in list\", function () {",
													"    foundAt = findProject(jsonData, roleName);",
													"    pm.expect(foundAt).to.not.eql(-1);",
													"});",
													"",
													"pm.test(\"Role Name is set correctly with matching: \" + roleName, function () {",
													"    pm.expect(jsonData[foundAt].name).to.eql(roleName);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{administratorUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Role",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Role"
											]
										}
									},
									"response": []
								},
								{
									"name": "Scope-GetAllScopes-Administrator",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c70013ba-7ba6-4b9a-8f66-5404ba2db7a2",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"var identityId = parseInt(pm.environment.get(\"identityId\"));",
													"var projectName = pm.environment.get(\"projectName\");",
													"",
													"var jsonData = pm.response.json();",
													"",
													"var foundAt;",
													"",
													"function findProject(jsonData, name) {",
													"    for (var i = 0; i < jsonData.length; i++) {",
													"        if (jsonData[i].name == name) {",
													"            return i;",
													"        }",
													"    }",
													"    return -1;",
													"}",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{administratorUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Role/Scopes",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Role",
												"Scopes"
											]
										}
									},
									"response": []
								},
								{
									"name": "Role-GetRole-Administrator",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2072f24b-8dfa-42ca-85f8-e1ba9b8130c8",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"var roleId = parseInt(pm.environment.get(\"roleId\"));",
													"var roleName = pm.environment.get(\"roleName\");",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Role Name is set correctly\", function () {",
													"    pm.expect(jsonData.name).to.eql(roleName);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{administratorUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Role/{{roleId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Role",
												"{{roleId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Role-UpdateRole-Administrator",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "18bfab81-d57b-420d-8ba9-d6f9d3e1d5ee",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"var updatedRoleName = pm.environment.get(\"updatedRoleName\");",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.ok;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Role Name is set correctly\", function () {",
													"    pm.expect(jsonData.name).to.eql(updatedRoleName);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{administratorUserIdentityId}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"name\": \"{{updatedRoleName}}\",\r\n  \"scopes\": [\r\n    {\r\n      \"scope\": \"EmbedWrite\"\r\n    }\r\n  ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/Role/{{roleId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Role",
												"{{roleId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Role-GetUpdatedRole-Administrator",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "38f386d2-8004-4f82-83bb-97396404817a",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"var updatedRoleName = pm.environment.get(\"updatedRoleName\");",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Role Name is set correctly and matches: \" + updatedRoleName, function () {",
													"    pm.expect(jsonData.name).to.eql(updatedRoleName);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{administratorUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Role/{{roleId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Role",
												"{{roleId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Role-SetRole-Administrator",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e8523c11-db8c-413b-9baa-cfc6726efddb",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"var roleId = parseInt(pm.environment.get(\"roleId\"));",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.ok;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Role is set correctly and matches: \" + roleId, function () {",
													"    pm.expect(jsonData.role.id).to.eql(roleId);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{administratorUserIdentityId}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"createdUserId\": {{createdUserId}},\r\n  \"name\": \"{{projectNameUpdated}}\",\r\n  \"description\": \"postmantest_description\",\r\n  \"shortDescription\": \"postmantest_shortdesc\",\r\n  \"uri\": \"postmantest_uri\",\r\n  \"collaborators\": [\r\n    {\r\n      \"fullName\": \"postmantest_collfullname\",\r\n      \"role\": \"postmantest_collrole\"\r\n    }\r\n  ],\r\n  \"created\": \"2020-04-20T08:24:26.693Z\",\r\n  \"updated\": \"2020-04-20T08:24:26.693Z\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/Role/setRole?userId={{createdUserId}}&roleId={{roleId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Role",
												"setRole"
											],
											"query": [
												{
													"key": "userId",
													"value": "{{createdUserId}}",
													"description": "Id of the user that we want to update"
												},
												{
													"key": "roleId",
													"value": "{{roleId}}",
													"description": "Id of the role that you want to update the user with"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "User-GetRole-Administrator",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c8ff9189-d69d-4ee8-ac71-6c4dd90f1b7d",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"var roleId = parseInt(pm.environment.get(\"roleId\"));",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Check if user has role that matches: \" + roleId, function () {",
													"    pm.expect(jsonData.role.id).to.eql(roleId);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{administratorUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/User/{{createdUserId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"User",
												"{{createdUserId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Role-GetRole-NonExisting-Administrator",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6525c4c0-7e5a-4abf-ba98-e8838f7bc9b7",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 404\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"    pm.response.to.be.notFound;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json;",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{administratorUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Role/98989",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Role",
												"98989"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Search",
							"item": [
								{
									"name": "Search-SearchInternal-Administrator",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "12c1b164-3095-4c82-b334-d95a5b34dd22",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"var projectName = pm.environment.get(\"projectName\");",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.ok;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Project Name is set correctly and matching: \" + projectName, function () {",
													"    pm.expect(jsonData.results[0].name).to.eql(projectName);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{administratorUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Search/internal/{{projectId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Search",
												"internal",
												"{{projectId}}"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Wizard",
							"item": [
								{
									"name": "Wizard-GetWizard-Administrator",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b1389398-ceaa-4fe9-8492-111582f0ea11",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\")) + 1000;",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{administratorUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Wizard?sourceURI={{wizardSourceUri}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Wizard"
											],
											"query": [
												{
													"key": "sourceURI",
													"value": "{{wizardSourceUri}}",
													"description": "This is the URI that the wizard will use to fetch the source."
												}
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Cleanup",
							"item": [
								{
									"name": "Embed-DeleteEmbed-Administrator",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "af8a646b-d41e-4bea-902d-441605339831",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{administratorUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Embed/{{embedGuid}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Embed",
												"{{embedGuid}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Highlight-DeleteHighlight-Administrator",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "92b2144a-64b5-47aa-8de0-9e6b63b70fcb",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{administratorUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Highlight/{{highlightId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Highlight",
												"{{highlightId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Project-DeleteProject-Administrator",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6b8fa039-601b-4c4f-b82a-d123073ee70e",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{administratorUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Project/{{projectId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Project",
												"{{projectId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Role-DeleteRole-WithUsers-Administrator",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c20a5d1e-0882-4ff0-89b2-0fa4916c75da",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"",
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{administratorUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Role/{{roleId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Role",
												"{{roleId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "User-DeleteUser-Administrator",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "395595a7-30a2-47d4-b6b3-f7d22bbcbec3",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{administratorUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/User/{{createdUserId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"User",
												"{{createdUserId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Role-DeleteRole-Administrator",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a561d994-fadb-486d-b4e7-3d21bed8af8e",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{administratorUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Role/{{roleId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Role",
												"{{roleId}}"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Checkup-on-Cleanup",
							"item": [
								{
									"name": "Project-Get-Deleted-Project-Administrator",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "bd260b5c-5ae2-4f1a-8da3-2bfb2bbbce67",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"",
													"pm.test(\"Status code is 404\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"    pm.response.to.be.notFound;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{administratorUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Project/{{projectId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Project",
												"{{projectId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "User-Get-Deleted-User-Administrator",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "af9ecf6f-b733-4359-92d9-9326448a2a84",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"",
													"pm.test(\"Status code is 404\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"    pm.response.to.be.notFound;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{administratorUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/User/{{createdUserId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"User",
												"{{createdUserId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Role-Get-Deleted-Role-Administrator",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2eeebc99-fcea-4719-9aa4-4a6ecf90d442",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"",
													"pm.test(\"Status code is 404\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"    pm.response.to.be.notFound;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{administratorUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Role/{{roleId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Role",
												"{{roleId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Embed-Get-Deleted-Embed-Administrator",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a2ad9aa4-38ac-4ab6-8558-63365272be84",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"",
													"pm.test(\"Status code is 404\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"    pm.response.to.be.notFound;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{administratorUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Embed/{{embedGuid}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Embed",
												"{{embedGuid}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Highlight-Get-Deleted-Highlight-Administrator",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "52ee3c8d-d39e-45a2-9a4d-bba0d652cd30",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"",
													"pm.test(\"Status code is 404\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"    pm.response.to.be.notFound;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{administratorUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Highlight/{{highlightId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Highlight",
												"{{highlightId}}"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Guest",
					"item": [
						{
							"name": "Preparation",
							"item": [
								{
									"name": "Project-CreateProject",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5865a8d0-29bf-48fd-b922-8f6e47379e6e",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"var administratorUserId = parseInt(pm.environment.get(\"administratorUserId\"));",
													"var projectName = pm.environment.get(\"projectName\");",
													"var adminUserName = pm.environment.get(\"adminUserName\");",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.environment.set(\"projectId\", jsonData.id);",
													"",
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.success;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});",
													"",
													"pm.test(\"Project Name is set correctly and matching: \" + projectName, function () {",
													"    pm.expect(jsonData.name).to.eql(projectName);",
													"});",
													"",
													"pm.test(\"User Name is correct and matching: \" + adminUserName, function () {",
													"    pm.expect(jsonData.user.name).to.eql(adminUserName);",
													"});",
													"",
													"pm.test(\"Identity ID is correct and matching: \" + administratorUserId, function () {",
													"    pm.expect(parseInt(jsonData.user.id)).to.eql(administratorUserId);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{administratorUserIdentityId}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"name\": \"{{projectName}}\",\r\n  \"description\": \"postmantest_description\",\r\n  \"shortDescription\": \"postmantest_shortdesc\",\r\n  \"uri\": \"postmantest_uri\",\r\n  \"collaborators\": [\r\n    {\r\n      \"fullName\": \"postmantest_collfullname\",\r\n      \"role\": \"postmantest_collrole\"\r\n    }\r\n  ],\r\n  \"created\": \"2020-04-20T08:24:26.693Z\",\r\n  \"updated\": \"2020-04-20T08:24:26.693Z\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/Project",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Project"
											]
										}
									},
									"response": []
								},
								{
									"name": "Highlight-CreateHighlight",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "803becd8-ac1b-4258-a45b-1e57b10ce9ec",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"var identityId = parseInt(pm.environment.get(\"identityId\"));",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.environment.set(\"highlightId\", jsonData.id);",
													"",
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.success;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "09739f37-dc6b-4725-83e1-c744e1c2d241",
												"exec": [
													"var current_timestamp = new Date();\r",
													"postman.setEnvironmentVariable(\"current_timestamp\", current_timestamp.toISOString());\r",
													"\r",
													"var future_timestamp = new Date(Date.now() +(2 * 86400000));\r",
													"postman.setEnvironmentVariable(\"future_timestamp\", future_timestamp.toISOString());\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{administratorUserIdentityId}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"projectId\": {{projectId}},\r\n  \"startDate\": \"{{current_timestamp}}\",\r\n  \"endDate\": \"{{future_timestamp}}\",\r\n  \"description\" : \"Lorem Ipsum\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/Highlight",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Highlight"
											]
										}
									},
									"response": []
								},
								{
									"name": "Embed-CreateEmbed",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "687b3ec9-992e-4f87-a3d7-c5e0a15a2078",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.environment.set(\"embedGuid\", jsonData.guid);",
													"pm.environment.set(\"embeddedProjectId\", jsonData.project.id);",
													"",
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.success;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{administratorUserIdentityId}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"projectId\": {{projectId}}\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/Embed",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Embed"
											]
										}
									},
									"response": []
								}
							],
							"description": "For some requests, we need to have data available. The variables need to be filled so the request can succeed. We put these preparation requests in this folder. We will clean them up in the cleanup folder.",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "590a39b4-f6f8-4ad7-9b7d-6a80b54d560b",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "6a5ee161-8976-4900-92b5-4cf1399f1fe2",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "User",
							"item": [
								{
									"name": "Follow",
									"item": [
										{
											"name": "User-FollowUser-Guest",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "742d4fdb-4d8f-4f3d-b247-16fa9d27f05d",
														"exec": [
															"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
															"",
															"var jsonData = pm.response.json();",
															"",
															"pm.environment.set(\"createdUserId\", jsonData.id);",
															"pm.environment.set(\"createdUserIdentityId\", jsonData.identityId);",
															"",
															"pm.test(\"Status code is 401\", function () {",
															"    pm.response.to.have.status(401);",
															"});",
															"",
															"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
															"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "IdentityId",
														"type": "text",
														"value": "{{administratorUserIdentityId}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{apiUrl}}/api/User/follow/{{userIdToFollow}}",
													"host": [
														"{{apiUrl}}"
													],
													"path": [
														"api",
														"User",
														"follow",
														"{{userIdToFollow}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "User-UnFollowUser-Guest",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "59aadf05-d21e-4582-aad7-5a117d726be2",
														"exec": [
															"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
															"",
															"pm.test(\"Status code is 401\", function () {",
															"    pm.response.to.have.status(401);",
															"});",
															"",
															"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
															"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "IdentityId",
														"type": "text",
														"value": "{{administratorUserIdentityId}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{apiUrl}}/api/User/follow/{{userIdToFollow}}",
													"host": [
														"{{apiUrl}}"
													],
													"path": [
														"api",
														"User",
														"follow",
														"{{userIdToFollow}}"
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "User-CreateUser-Guest",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3373f452-fc4a-4111-be3a-91e60f8ad5f3",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 401\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.unauthorized;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"identityId\": \"98764342123\",\n    \"name\": \"mycooltestusername\",\n    \"email\": \"postmantest_email@example.com\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/User",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"User"
											]
										}
									},
									"response": []
								},
								{
									"name": "User-FollowUser-Guest",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "eb90ea5e-7646-4cf0-9ac7-2fc1e9e9d438",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 401\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.unauthorized;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"identityId\": \"98764342123\",\n    \"name\": \"mycooltestusername\",\n    \"email\": \"postmantest_email@example.com\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/User",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"User"
											]
										}
									},
									"response": []
								},
								{
									"name": "User-FollowProject-Guest",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "169cdff7-a82c-45fc-b83a-d953588f1119",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 401\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.unauthorized;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"identityId\": \"98764342123\",\n    \"name\": \"mycooltestusername\",\n    \"email\": \"postmantest_email@example.com\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/User",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"User"
											]
										}
									},
									"response": []
								},
								{
									"name": "User-GetUser-Guest",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b36559aa-f7c2-4ea1-af84-e34e0c57f244",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 401\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.unauthorized;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{apiUrl}}/api/User/1",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"User",
												"1"
											]
										}
									},
									"response": []
								},
								{
									"name": "User-UpdateUser-Guest",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2aaa4a0e-4979-4f8b-a3ba-fb0c953ff8be",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 401\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.unauthorized;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"name\": \"bobz\",\r\n  \"email\": \"BobSmith@email.com\",\r\n  \"identityId\": {{administratorUserIdentityId}}\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/User/1",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"User",
												"1"
											]
										}
									},
									"response": []
								},
								{
									"name": "User-DeleteUser-Guest",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "dff749b2-8de7-40ad-af4c-e7c85e8a03bb",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 401\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.unauthorized;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{apiUrl}}/api/User/1",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"User",
												"1"
											]
										}
									},
									"response": []
								}
							],
							"auth": {
								"type": "noauth"
							},
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "7f52857e-7070-4799-92fe-4367a0e8ee89",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "da51ae44-57da-4198-bbe2-dd8a0e779e78",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Project",
							"item": [
								{
									"name": "Follow",
									"item": [
										{
											"name": "Project-FollowProject-Administrator",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "ce1cbb6b-5415-4e3a-8777-aba4c977aa96",
														"exec": [
															"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
															"var projectName = \"Generic Metal Ball\"",
															"",
															"var jsonData = pm.response.json();",
															"",
															"pm.environment.set(\"createdUserId\", jsonData.id);",
															"pm.environment.set(\"createdUserIdentityId\", jsonData.identityId);",
															"",
															"pm.test(\"Status code is 401\", function () {",
															"    pm.response.to.have.status(401);",
															"});",
															"",
															"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
															"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "IdentityId",
														"type": "text",
														"value": "{{administratorUserIdentityId}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{apiUrl}}/api/project/follow/{{projectIdToFollow}}",
													"host": [
														"{{apiUrl}}"
													],
													"path": [
														"api",
														"project",
														"follow",
														"{{projectIdToFollow}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Project-UnFollowProject-Administrator",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "0aef8ac3-b0d1-49bf-a244-e5574e5849a1",
														"exec": [
															"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
															"",
															"pm.test(\"Status code is 201\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
															"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "IdentityId",
														"type": "text",
														"value": "{{administratorUserIdentityId}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{apiUrl}}/api/project/follow/{{projectIdToFollow}}",
													"host": [
														"{{apiUrl}}"
													],
													"path": [
														"api",
														"project",
														"follow",
														"{{projectIdToFollow}}"
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "Project-CreateProject-Guest",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "38028375-2c71-4851-848b-2996514dc408",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 401\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"    pm.response.to.be.unauthorized;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json;",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"name\": \"{{projectName}}\",\r\n  \"description\": \"postmantest_description\",\r\n  \"shortDescription\": \"postmantest_shortdesc\",\r\n  \"uri\": \"postmantest_uri\",\r\n  \"collaborators\": [\r\n    {\r\n      \"fullName\": \"postmantest_collfullname\",\r\n      \"role\": \"postmantest_collrole\"\r\n    }\r\n  ],\r\n  \"created\": \"2020-04-20T08:24:26.693Z\",\r\n  \"updated\": \"2020-04-20T08:24:26.693Z\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/Project",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Project"
											]
										}
									},
									"response": []
								},
								{
									"name": "Project-GetAllProjects-Guest",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "02432018-39c4-44a4-bde5-1bf559af3927",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"var projectName = pm.environment.get(\"projectName\");",
													"",
													"var jsonData = pm.response.json();",
													"",
													"var foundAt;",
													"",
													"function findProject(jsonData, name) {",
													"    for (var i = 0; i < jsonData.results.length; i++) {",
													"        if (jsonData.results[i].name == name) {",
													"            return i;",
													"        }",
													"    }",
													"    return -1;",
													"}",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Project: \" + projectName + \" is in list\", function () {",
													"    foundAt = findProject(jsonData, projectName);",
													"    pm.expect(foundAt).to.not.eql(-1);",
													"});",
													"",
													"pm.test(\"Project name is set correctly and matching: \" + projectName, function () {",
													"    pm.expect(jsonData.results[foundAt].name).to.eql(projectName);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{apiUrl}}/api/Project",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Project"
											]
										}
									},
									"response": []
								},
								{
									"name": "Project-GetProject-Guest",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "7e1dc145-9d14-4e43-979d-b55dc9f716ad",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"var projectName = pm.environment.get(\"projectName\");",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Project name is set correctly and matches: \" + projectName, function () {",
													"    pm.expect(jsonData.name).to.eql(projectName);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{apiUrl}}/api/Project/{{projectId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Project",
												"{{projectId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Project-UpdateProject-Guest",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "482a9f22-10c9-4cce-9c1d-49c0dbaeee4b",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"",
													"pm.test(\"Status code is 401\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"    pm.response.to.be.unauthorized;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"name\": \"{{projectNameUpdated}}\",\r\n  \"description\": \"postmantest_description\",\r\n  \"shortDescription\": \"postmantest_shortdesc\",\r\n  \"uri\": \"postmantest_uri\",\r\n  \"collaborators\": [\r\n    {\r\n      \"fullName\": \"postmantest_collfullname\",\r\n      \"role\": \"postmantest_collrole\"\r\n    }\r\n  ],\r\n  \"created\": \"2020-04-20T08:24:26.693Z\",\r\n  \"updated\": \"2020-04-20T08:24:26.693Z\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/Project/1",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Project",
												"1"
											]
										}
									},
									"response": []
								},
								{
									"name": "Project-DeleteProject-Guest",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "47b2e7fe-4550-4e08-8825-075cd03191f4",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 401\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.unauthorized;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{apiUrl}}/api/Project/1",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Project",
												"1"
											]
										}
									},
									"response": []
								}
							],
							"auth": {
								"type": "noauth"
							},
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "7a8992b6-9cc8-4704-b573-a54f54c6a77a",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "e840a81d-f500-4fa4-b995-396f25f9eb58",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Highlight",
							"item": [
								{
									"name": "Highlight-CreateHighlight-Guest",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "429d06f0-dbbf-4ceb-bf2e-b62c2271677c",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 401\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"    pm.response.to.be.unauthorized;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json;",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "8f885ecd-9e60-4378-8e97-66994d852372",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"projectId\": {{projectId}},\r\n  \"startDate\": \"{{current_timestamp}}\",\r\n  \"endDate\": \"{{future_timestamp}}\",\r\n  \"description\" : \"Lorem Ipsum\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/Highlight",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Highlight"
											]
										}
									},
									"response": []
								},
								{
									"name": "Highlight-GetAllActiveHighlights-Guest",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "edd3e007-31fb-42e9-a8be-d0ccba9a0f37",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{apiUrl}}/api/Highlight",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Highlight"
											]
										}
									},
									"response": []
								},
								{
									"name": "Highlight-GetHighlight-Guest",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "14771859-2a73-4509-9d31-cfc031b63c6f",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"var highlightId = parseInt(pm.environment.get(\"highlightId\"));",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.environment.set(\"highlightStartDate\", jsonData.startDate);",
													"pm.environment.set(\"highlightEndDate\", jsonData.endDate);",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Highlight Id matches: \" + highlightId, function () {",
													"    pm.expect(jsonData.id).to.eql(highlightId);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{apiUrl}}/api/Highlight/{{highlightId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Highlight",
												"{{highlightId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Highlight-GetHighlight-ByProject-Guest",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c8985640-31cd-4e43-a258-fe3737f0ebf0",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 401\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"    pm.response.to.be.unauthorized;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json;",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{apiUrl}}/api/Highlight/Project/{{projectId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Highlight",
												"Project",
												"{{projectId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Highlight-UpdateHighlight-Guest",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ca58145d-4c4c-485b-9cba-4dda9a9473cc",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 401\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"    pm.response.to.be.unauthorized;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json;",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "429d96de-1074-424c-bafd-b92f920ef008",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"projectId\": \"{{projectId}}\",\r\n  \"startDate\": \"{{current_timestamp}}\",\r\n  \"endDate\": \"{{highlightEndDate}}\",\r\n  \"description\" : \"Lorem Ipsum\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/Highlight/{{highlightId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Highlight",
												"{{highlightId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Highlight-DeleteHighlight-Guest",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "83eb198d-e1b3-498a-9d94-a67dc53ff2a6",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 401\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.unauthorized;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{apiUrl}}/api/Highlight/{{highlightId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Highlight",
												"{{highlightId}}"
											]
										}
									},
									"response": []
								}
							],
							"auth": {
								"type": "noauth"
							},
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "5c28bc07-b68d-4a8e-966a-97b9cc00b925",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "a415c3f3-897c-4b44-a0db-d449582cabd0",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Embed",
							"item": [
								{
									"name": "Embed-CreateEmbed-Guest",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "00b89cb8-4655-4cfe-bfef-99c71075384c",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 401\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.unauthorized;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"projectId\": {{projectId}}\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/Embed",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Embed"
											]
										}
									},
									"response": []
								},
								{
									"name": "Embed-GetAllEmbeds-Guest",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "72161f42-8fda-481a-818d-202b0dfca488",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 401\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.unauthorized;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{apiUrl}}/api/Embed",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Embed"
											]
										}
									},
									"response": []
								},
								{
									"name": "Embed-GetEmbed-Guest",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e7181385-3925-4b3f-9ed4-9c3e7bd79378",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.ok;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{apiUrl}}/api/Embed/{{embedGuid}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Embed",
												"{{embedGuid}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Embed-DeleteEmbed-Guest",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b2d72f1f-0908-4a03-8784-a64093c34d5b",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 401\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.unauthorized;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{apiUrl}}/api/Embed/{{embedGuid}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Embed",
												"{{embedGuid}}"
											]
										}
									},
									"response": []
								}
							],
							"auth": {
								"type": "noauth"
							},
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "53dbee05-b741-4d8b-bcef-e600802e2410",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "9ad98cb4-7b19-49fe-84b7-18ff4951f402",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Role",
							"item": [
								{
									"name": "Role-CreateRole-Guest",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "52a8e434-7893-4773-b2e8-d08f09009880",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 401\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"    pm.response.to.be.unauthorized;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json;",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"name\": \"{{roleName}}\",\r\n  \"scopes\": [\r\n    {\r\n      \"scope\": \"EmbedWrite\"\r\n    }\r\n  ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/Role",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Role"
											]
										}
									},
									"response": []
								},
								{
									"name": "Role-GetAllRoles-Guest",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "197c334a-1027-40bf-9d6c-d87aba60c897",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 401\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"    pm.response.to.be.unauthorized;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json;",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{apiUrl}}/api/Role",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Role"
											]
										}
									},
									"response": []
								},
								{
									"name": "Scope-GetAllScopes-Guest",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f58cadd9-e1d4-4688-bf4c-1edc1ad5cc14",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 401\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"    pm.response.to.be.unauthorized;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json;",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{apiUrl}}/api/Role/Scopes",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Role",
												"Scopes"
											]
										}
									},
									"response": []
								},
								{
									"name": "Role-GetRole-Guest",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5cde50b7-c620-4711-ad89-17483c974f5e",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 401\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"    pm.response.to.be.unauthorized;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json;",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{apiUrl}}/api/Role/1",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Role",
												"1"
											]
										}
									},
									"response": []
								},
								{
									"name": "Role-UpdateRole-Guest",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e9cfb930-370c-41a2-ade6-06a8744ce2ca",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 401\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"    pm.response.to.be.unauthorized;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json;",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"name\": \"{{updatedRoleName}}\",\r\n  \"scopes\": [\r\n    {\r\n      \"scope\": \"EmbedWrite\"\r\n    }\r\n  ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/Role/1",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Role",
												"1"
											]
										}
									},
									"response": []
								},
								{
									"name": "Role-SetRole-Guest",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a8c725b1-ec1e-4ab6-ad7c-95e43d0bf816",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 401\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"    pm.response.to.be.unauthorized;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json;",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"createdUserId\": {{createdUserId}},\r\n  \"name\": \"{{projectNameUpdated}}\",\r\n  \"description\": \"postmantest_description\",\r\n  \"shortDescription\": \"postmantest_shortdesc\",\r\n  \"uri\": \"postmantest_uri\",\r\n  \"collaborators\": [\r\n    {\r\n      \"fullName\": \"postmantest_collfullname\",\r\n      \"role\": \"postmantest_collrole\"\r\n    }\r\n  ],\r\n  \"created\": \"2020-04-20T08:24:26.693Z\",\r\n  \"updated\": \"2020-04-20T08:24:26.693Z\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/Role/setRole?createdUserId={{createdUserId}}&roleId=1",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Role",
												"setRole"
											],
											"query": [
												{
													"key": "createdUserId",
													"value": "{{createdUserId}}",
													"description": "Id of the user that we want to update"
												},
												{
													"key": "roleId",
													"value": "1",
													"description": "Id of the role that you want to update the user with"
												}
											]
										}
									},
									"response": []
								}
							],
							"auth": {
								"type": "noauth"
							},
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "d4dc0f6a-9e81-473b-a6d2-4d182236fda2",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "3b5d73cb-3c05-49e9-a8eb-a807af0cfbd1",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Search",
							"item": [
								{
									"name": "Search-SearchInternal-Guest",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "70bffee9-98ac-4bfc-be9b-77e7644ff635",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.ok;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{apiUrl}}/api/Search/internal/1",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Search",
												"internal",
												"1"
											]
										}
									},
									"response": []
								}
							],
							"auth": {
								"type": "noauth"
							},
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "d0d4b573-2d72-4a2d-9380-d3a5d3d9734c",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "d1ca2211-e512-4890-900d-4e0a620ef322",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Wizard",
							"item": [
								{
									"name": "Wizard-GetWizard-Guest",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2b50fd0a-2b1f-49f8-a466-14a866f9be33",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 401\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"    pm.response.to.be.unauthorized;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json;",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{apiUrl}}/api/Wizard?sourceURI={{wizardSourceUri}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Wizard"
											],
											"query": [
												{
													"key": "sourceURI",
													"value": "{{wizardSourceUri}}",
													"description": "This is the URI that the wizard will use to fetch the source."
												}
											]
										}
									},
									"response": []
								}
							],
							"auth": {
								"type": "noauth"
							},
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "199676e9-7ea5-4644-af7a-6399476a51c2",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "7037d025-d6b0-4b54-af59-e789dae637eb",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "ba686cb3-fc8e-4b07-b65f-397ee8d6cae3",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "d2be4adb-c820-4ce9-a0ef-8e0c3c9b6fd8",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Registered",
					"item": [
						{
							"name": "Preparation",
							"item": [
								{
									"name": "User-CreateUser",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "db8920d2-e557-4ee8-a709-a8b3eb886618",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"var userName = pm.environment.get(\"userName\");",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.environment.set(\"createdUserId\", jsonData.id);",
													"pm.environment.set(\"identityId\", jsonData.id);",
													"",
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.success;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});",
													"",
													"pm.test(\"Check if created Username matches: \" + userName, function () {",
													"    pm.expect(jsonData.name).to.eql(userName);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{administratorUserIdentityId}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"identityId\": \"9996\",\n    \"name\": \"{{userName}}\",\n    \"email\": \"postmantest_email@example.com\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/User",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"User"
											]
										}
									},
									"response": []
								},
								{
									"name": "Project-CreateProject",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d1cc5ca3-b0d1-4e10-b934-831d60fcc422",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"var administratorUserId = parseInt(pm.environment.get(\"administratorUserId\"));",
													"var projectName = pm.environment.get(\"projectName\");",
													"var adminUserName = pm.environment.get(\"adminUserName\");",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.environment.set(\"projectId\", jsonData.id);",
													"pm.environment.set(\"adminProjectId\", jsonData.id);",
													"",
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.success;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});",
													"",
													"pm.test(\"Project Name is set correctly and matching: \" + projectName, function () {",
													"    pm.expect(jsonData.name).to.eql(projectName);",
													"});",
													"",
													"pm.test(\"User Name is correct and matching: \" + adminUserName, function () {",
													"    pm.expect(jsonData.user.name).to.eql(adminUserName);",
													"});",
													"",
													"pm.test(\"Identity ID is correct and matching: \" + administratorUserId, function () {",
													"    pm.expect(parseInt(jsonData.user.id)).to.eql(administratorUserId);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{administratorUserIdentityId}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"name\": \"{{projectName}}\",\r\n  \"description\": \"postmantest_description\",\r\n  \"shortDescription\": \"postmantest_shortdesc\",\r\n  \"uri\": \"postmantest_uri\",\r\n  \"collaborators\": [\r\n    {\r\n      \"fullName\": \"postmantest_collfullname\",\r\n      \"role\": \"postmantest_collrole\"\r\n    }\r\n  ],\r\n  \"created\": \"2020-04-20T08:24:26.693Z\",\r\n  \"updated\": \"2020-04-20T08:24:26.693Z\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/Project",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Project"
											]
										}
									},
									"response": []
								},
								{
									"name": "Highlight-CreateHighlight",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "64ecbf57-2189-4ff9-92a1-2abeb6c252d9",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"var identityId = parseInt(pm.environment.get(\"identityId\"));",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.environment.set(\"highlightId\", jsonData.id);",
													"",
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.success;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "f03e3714-6b31-4dbe-8be4-68b7770dfe7a",
												"exec": [
													"var current_timestamp = new Date();\r",
													"postman.setEnvironmentVariable(\"current_timestamp\", current_timestamp.toISOString());\r",
													"\r",
													"var future_timestamp = new Date(Date.now() +(2 * 86400000));\r",
													"postman.setEnvironmentVariable(\"future_timestamp\", future_timestamp.toISOString());\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{administratorUserIdentityId}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"projectId\": {{projectId}},\r\n  \"startDate\": \"{{current_timestamp}}\",\r\n  \"endDate\": \"{{future_timestamp}}\",\r\n  \"description\" : \"Lorem Ipsum\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/Highlight",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Highlight"
											]
										}
									},
									"response": []
								},
								{
									"name": "Embed-CreateEmbed",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e931ecd1-7d4d-4fe2-b8d2-9f3fc9e5f4b3",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.environment.set(\"embedGuid\", jsonData.guid);",
													"pm.environment.set(\"adminEmbedGuid\", jsonData.guid);",
													"pm.environment.set(\"embeddedProjectId\", jsonData.project.id);",
													"",
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.success;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{administratorUserIdentityId}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"projectId\": {{projectId}}\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/Embed",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Embed"
											]
										}
									},
									"response": []
								},
								{
									"name": "Role-CreateRole",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2a454f15-069f-46aa-9e24-0046f3aa8842",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"var scopeName = pm.environment.get(\"scopeName\");",
													"var roleName = pm.environment.get(\"roleName\");",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.environment.set(\"roleId\", jsonData.id);",
													"",
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.success;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});",
													"",
													"pm.test(\"Role Name is set correctly and matching: \" + roleName, function () {",
													"    pm.expect(jsonData.name).to.eql(roleName);",
													"});",
													"",
													"pm.test(\"Scope is correct and matching: \" + scopeName, function () {",
													"    pm.expect(jsonData.scopes.scope).to.eql(scopeName);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{administratorUserIdentityId}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"name\": \"{{roleName}}\",\r\n  \"scopes\": [\r\n    {\r\n      \"scope\": \"EmbedWrite\"\r\n    }\r\n  ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/Role",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Role"
											]
										}
									},
									"response": []
								}
							],
							"description": "For some requests, we need to have data available. The variables need to be filled so the request can succeed. We put these preparation requests in this folder. We will clean them up in the cleanup folder.",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "d5a985fd-8009-4ced-a2e1-9f37a6c87c39",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "d0d24d95-5d68-4270-be27-657eddadd685",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "User",
							"item": [
								{
									"name": "Follow",
									"item": [
										{
											"name": "User-FollowUser-Registered",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "ab0be218-be02-40fe-8845-ed0d3a932de7",
														"exec": [
															"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
															"var userId = 25",
															"",
															"var jsonData = pm.response.json();",
															"",
															"pm.environment.set(\"createdUserId\", jsonData.id);",
															"pm.environment.set(\"createdUserIdentityId\", jsonData.identityId);",
															"",
															"pm.test(\"Status code is 201\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Response must be valid and have a json body\", function () {",
															"     pm.response.to.be.success;",
															"     pm.response.to.be.withBody;",
															"     pm.response.to.be.json;",
															"});",
															"",
															"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
															"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
															"});",
															"",
															"pm.test(\"Check if created Username matches: \" + userId, function () {",
															"    pm.expect(jsonData.id).to.eql(userId);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "IdentityId",
														"type": "text",
														"value": "{{administratorUserIdentityId}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{apiUrl}}/api/User/follow/{{userIdToFollow}}",
													"host": [
														"{{apiUrl}}"
													],
													"path": [
														"api",
														"User",
														"follow",
														"{{userIdToFollow}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "User-UnFollowUser-Registered",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "15ed1ba0-acbf-4048-b358-06ad38987428",
														"exec": [
															"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
															"",
															"pm.test(\"Status code is 201\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
															"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "IdentityId",
														"type": "text",
														"value": "{{administratorUserIdentityId}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{apiUrl}}/api/User/follow/{{userIdToFollow}}",
													"host": [
														"{{apiUrl}}"
													],
													"path": [
														"api",
														"User",
														"follow",
														"{{userIdToFollow}}"
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "User-CreateUser-Registered",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "01024392-f907-4c82-9735-846dbbde0579",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 403\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.forbidden;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{registeredUserIdentityId}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"identityId\": \"{{createdUserId}}\",\n    \"name\": \"{{userName}}\",\n    \"email\": \"postmantest_email@example.com\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/User",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"User"
											]
										}
									},
									"response": []
								},
								{
									"name": "User-FollowUser-Registered",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "406c789b-d0ed-4830-b3c5-46078bf1be33",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.forbidden;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{registeredUserIdentityId}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"identityId\": \"{{createdUserId}}\",\n    \"name\": \"{{userName}}\",\n    \"email\": \"postmantest_email@example.com\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/User/follow/user/1",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"User",
												"follow",
												"user",
												"1"
											]
										}
									},
									"response": []
								},
								{
									"name": "User-UnFollowUser-Registered",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "7574a3ab-ce99-4450-b403-eb56351a3068",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.forbidden;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{registeredUserIdentityId}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"identityId\": \"{{createdUserId}}\",\n    \"name\": \"{{userName}}\",\n    \"email\": \"postmantest_email@example.com\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/User/follow/user/1",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"User",
												"follow",
												"user",
												"1"
											]
										}
									},
									"response": []
								},
								{
									"name": "User-FollowProject-Registered",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e6ce4254-72ec-4fff-8eac-88c467be2bfc",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{registeredUserIdentityId}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"identityId\": \"{{createdUserId}}\",\n    \"name\": \"{{userName}}\",\n    \"email\": \"postmantest_email@example.com\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/User/follow/project/1",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"User",
												"follow",
												"project",
												"1"
											]
										}
									},
									"response": []
								},
								{
									"name": "User-GetUser-Other-Registered",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4f457db6-b4d4-456b-8145-b1a1230e35bf",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 403\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.forbidden;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{registeredUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/User/{{createdUserId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"User",
												"{{createdUserId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "User-GetUser-Self-Registered",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d18ed922-1c29-4a9e-8416-f83bc22a974c",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"var aliceIdentityId = parseInt(pm.environment.get(\"registeredUserIdentityId\"));",
													"",
													"var jsonData = pm.response.json();",
													"pm.environment.set(\"registeredUserId\", jsonData.id);",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.ok;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});",
													"",
													"pm.test(\"Identity ID is correct and matching: \" + aliceIdentityId, function () {",
													"    pm.expect(parseInt(jsonData.identityId)).to.eql(aliceIdentityId);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{registeredUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/User",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"User"
											]
										}
									},
									"response": []
								},
								{
									"name": "User-UpdateUser-Self-Registered",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5e8c5cec-4806-4c2e-9525-da46af199d07",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"var updatedAliceEmail = pm.environment.get(\"updatedAliceEmail\");",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.ok;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Check if email update matches: \" + updatedAliceEmail, function () {",
													"    pm.expect(jsonData.email).to.eql(updatedAliceEmail);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{registeredUserIdentityId}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"name\": \"alicez\",\r\n  \"email\": \"{{updatedAliceEmail}}\",\r\n  \"identityId\": \"{{registeredUserIdentityId}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/User/{{registeredUserId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"User",
												"{{registeredUserId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "User-UpdateUser-Other-Registered",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "99dbabe3-4d8f-41cb-8bce-1c944ad96a29",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 401\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.unauthorized;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{registeredUserIdentityId}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"name\": \"bobz\",\r\n  \"email\": \"BobSmith@email.com\",\r\n  \"identityId\": {{administratorUserIdentityId}}\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/User/{{createdUserId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"User",
												"{{createdUserId}}"
											]
										}
									},
									"response": []
								}
							],
							"description": "Requests executed as the Alice user with the registered role.",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "582ea3c3-5a17-451b-b5be-b1e734fef8eb",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "278af5fc-7c82-4bcf-a361-cf9d6745f6bd",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Project",
							"item": [
								{
									"name": "Follow",
									"item": [
										{
											"name": "Project-FollowProject-Registered",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "22970b7f-2de6-41a2-8f26-3848803bae89",
														"exec": [
															"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
															"var projectId = 3",
															"",
															"var jsonData = pm.response.json();",
															"",
															"pm.environment.set(\"createdUserId\", jsonData.id);",
															"pm.environment.set(\"createdUserIdentityId\", jsonData.identityId);",
															"",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Response must be valid and have a json body\", function () {",
															"     pm.response.to.be.success;",
															"     pm.response.to.be.withBody;",
															"     pm.response.to.be.json;",
															"});",
															"",
															"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
															"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
															"});",
															"",
															"pm.test(\"Check if created Username matches: \" + projectId, function () {",
															"    pm.expect(jsonData.id).to.eql(projectId);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "IdentityId",
														"type": "text",
														"value": "{{administratorUserIdentityId}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{apiUrl}}/api/project/follow/{{projectIdToFollow}}",
													"host": [
														"{{apiUrl}}"
													],
													"path": [
														"api",
														"project",
														"follow",
														"{{projectIdToFollow}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Project-UnFollowProject-Registered",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "67efdc2b-2f9a-48a1-95d7-e593637c202c",
														"exec": [
															"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
															"",
															"pm.test(\"Status code is 201\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
															"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "IdentityId",
														"type": "text",
														"value": "{{administratorUserIdentityId}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{apiUrl}}/api/project/follow/{{projectIdToFollow}}",
													"host": [
														"{{apiUrl}}"
													],
													"path": [
														"api",
														"project",
														"follow",
														"{{projectIdToFollow}}"
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "Project-CreateProject-Registered",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3b9fc86d-9853-4594-a1ec-137bacc84275",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"var registeredUserId = pm.environment.get(\"registeredUserId\");",
													"var projectName = pm.environment.get(\"projectName\");",
													"",
													"var jsonData = pm.response.json();",
													"pm.environment.set(\"projectId\", jsonData.id);",
													"",
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});",
													"",
													"pm.test(\"Project Name is set correctly and matches: \" + projectName, function () {",
													"    pm.expect(jsonData.name).to.eql(projectName);",
													"});",
													"",
													"pm.test(\"Identity Id is set correctly and matches: \" + registeredUserId, function () {",
													"    pm.expect(jsonData.user.id).to.eql(registeredUserId);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{registeredUserIdentityId}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"name\": \"{{projectName}}\",\r\n  \"description\": \"postmantest_description\",\r\n  \"shortDescription\": \"postmantest_shortdesc\",\r\n  \"uri\": \"postmantest_uri\",\r\n  \"collaborators\": [\r\n    {\r\n      \"fullName\": \"postmantest_collfullname\",\r\n      \"role\": \"postmantest_collrole\"\r\n    }\r\n  ],\r\n  \"created\": \"2020-04-20T08:24:26.693Z\",\r\n  \"updated\": \"2020-04-20T08:24:26.693Z\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/Project",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Project"
											]
										}
									},
									"response": []
								},
								{
									"name": "Project-GetAllProjects-Registered",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "59515132-4a17-4233-9ac3-758bdecfceae",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"var projectName = pm.environment.get(\"projectName\");",
													"",
													"var jsonData = pm.response.json();",
													"",
													"var foundAt;",
													"",
													"function findProject(jsonData, name) {",
													"    for (var i = 0; i < jsonData.results.length; i++) {",
													"        if (jsonData.results[i].name == name) {",
													"            return i;",
													"        }",
													"    }",
													"    return -1;",
													"}",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Project: \" + projectName + \" is in list\", function () {",
													"    foundAt = findProject(jsonData, projectName);",
													"    pm.expect(foundAt).to.not.eql(-1);",
													"});",
													"",
													"pm.test(\"Project Name is set correctly and matching: \" + projectName, function () {",
													"    pm.expect(jsonData.results[foundAt].name).to.eql(projectName);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{registeredUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Project",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Project"
											]
										}
									},
									"response": []
								},
								{
									"name": "Project-GetProject-Self-Registered",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "8216b6be-a07b-4496-9a9d-2dd8873245f0",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"var projectName = pm.environment.get(\"projectName\");",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Project Name is set correctly and matches: \" + projectName, function () {",
													"    pm.expect(jsonData.name).to.eql(projectName);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{registeredUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Project/{{projectId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Project",
												"{{projectId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Project-GetProject-Other-Registered",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f481301c-4f17-4ecc-8136-be43fd0607ec",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{registeredUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Project/{{adminProjectId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Project",
												"{{adminProjectId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Project-UpdateProject-Self-Registered",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "547c4a5c-6a3f-4117-ad34-8a368531d556",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"var projectName = pm.environment.get(\"projectNameUpdated\");",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.ok;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Project Name is set correctly and matches: \" + projectName, function () {",
													"    pm.expect(jsonData.name).to.eql(projectName);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{registeredUserIdentityId}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"name\": \"{{projectNameUpdated}}\",\r\n  \"description\": \"postmantest_description\",\r\n  \"shortDescription\": \"postmantest_shortdesc\",\r\n  \"uri\": \"postmantest_uri\",\r\n  \"collaborators\": [\r\n    {\r\n      \"fullName\": \"postmantest_collfullname\",\r\n      \"role\": \"postmantest_collrole\"\r\n    }\r\n  ],\r\n  \"created\": \"2020-04-20T08:24:26.693Z\",\r\n  \"updated\": \"2020-04-20T08:24:26.693Z\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/Project/{{projectId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Project",
												"{{projectId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Project-UpdateProject-Other-Registered",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e3f6d06e-c777-4b0a-8d49-85640c2d3202",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"",
													"pm.test(\"Status code is 401\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"    pm.response.to.be.unauthorized;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{registeredUserIdentityId}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"name\": \"{{projectNameUpdated}}\",\r\n  \"description\": \"postmantest_description\",\r\n  \"shortDescription\": \"postmantest_shortdesc\",\r\n  \"uri\": \"postmantest_uri\",\r\n  \"collaborators\": [\r\n    {\r\n      \"fullName\": \"postmantest_collfullname\",\r\n      \"role\": \"postmantest_collrole\"\r\n    }\r\n  ],\r\n  \"created\": \"2020-04-20T08:24:26.693Z\",\r\n  \"updated\": \"2020-04-20T08:24:26.693Z\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/Project/{{adminProjectId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Project",
												"{{adminProjectId}}"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Embed",
							"item": [
								{
									"name": "Embed-CreateEmbed-Self-Registered",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "43f20175-6465-4796-9774-a7d8c46b13f7",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.environment.set(\"embedGuid\", jsonData.guid);",
													"pm.environment.set(\"embeddedProjectId\", jsonData.project.id);",
													"",
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.success;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{registeredUserIdentityId}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"projectId\": {{projectId}}\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/Embed",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Embed"
											]
										}
									},
									"response": []
								},
								{
									"name": "Embed-CreateEmbed-Other-Registered",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6db9b959-e218-47b1-b2a3-317faef4797e",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 401\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.unauthorized;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{registeredUserIdentityId}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"projectId\": {{adminProjectId}}\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/Embed",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Embed"
											]
										}
									},
									"response": []
								},
								{
									"name": "Embed-GetAllEmbeds-Registered",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "08292766-5d01-4f64-9046-315a3b711974",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 403\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.forbidden;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{registeredUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Embed",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Embed"
											]
										}
									},
									"response": []
								},
								{
									"name": "Embed-GetEmbed-Registered",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e6d9018c-b68b-4a02-8322-91622ed92517",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"var embeddedProjectId = parseInt(pm.environment.get(\"embeddedProjectId\"))",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Embed matches: \" + embeddedProjectId, function () {",
													"    pm.expect(jsonData.id).to.eql(embeddedProjectId);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{registeredUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Embed/{{embedGuid}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Embed",
												"{{embedGuid}}"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Highlight",
							"item": [
								{
									"name": "Highlight-CreateHighlight-Registered",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "15860a63-ec78-44f4-84b6-99a5d7ac493a",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 403\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.forbidden;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "7af04590-c7d8-4f65-a24c-97162b36b7f8",
												"exec": [
													"var current_timestamp = new Date();\r",
													"postman.setEnvironmentVariable(\"current_timestamp\", current_timestamp.toISOString());\r",
													"\r",
													"var future_timestamp = new Date(Date.now() +(2 * 86400000));\r",
													"postman.setEnvironmentVariable(\"future_timestamp\", future_timestamp.toISOString());\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{registeredUserIdentityId}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"projectId\": {{projectId}},\r\n  \"startDate\": \"{{current_timestamp}}\",\r\n  \"endDate\": \"{{future_timestamp}}\",\r\n  \"description\" : \"Lorem Ipsum\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/Highlight",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Highlight"
											]
										}
									},
									"response": []
								},
								{
									"name": "Highlight-GetAllActiveHighlights-Registered",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "156df0e0-bd6c-4011-8ead-e8dc22791271",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"var projectId = pm.environment.get(\"adminProjectId\");",
													"",
													"var jsonData = pm.response.json();",
													"",
													"var foundAt;",
													"",
													"function findItem(jsonData, item) {",
													"    for (var i = 0; i < jsonData.length; i++) {",
													"        if (jsonData[i].projectId == item) {",
													"            return i;",
													"        }",
													"    }",
													"    return -1;",
													"}",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Highlight is in list and matching: \" + projectId, function () {",
													"    foundAt = findItem(jsonData, projectId);",
													"    pm.expect(foundAt).to.not.eql(-1);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{registeredUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Highlight",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Highlight"
											]
										}
									},
									"response": []
								},
								{
									"name": "Highlight-GetHighlight-Registered",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "79c3e397-d4c3-4aec-a1e5-8bd0213b1053",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"var identityId = parseInt(pm.environment.get(\"identityId\"));",
													"var highlightId = parseInt(pm.environment.get(\"highlightId\"));",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.environment.set(\"highlightStartDate\", jsonData.startDate);",
													"pm.environment.set(\"highlightEndDate\", jsonData.endDate);",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Highlight Id matches: \" + highlightId, function () {",
													"    pm.expect(jsonData.id).to.eql(highlightId);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{registeredUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Highlight/{{highlightId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Highlight",
												"{{highlightId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Highlight-GetHighlight-ByProject-Registered",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "99faab17-d5f8-4891-80fb-269141c7143d",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 403\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"    pm.response.to.be.forbidden;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json;",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{registeredUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Highlight/Project/{{projectId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Highlight",
												"Project",
												"{{projectId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Highlight-UpdateHighlight-Registered",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a6f6d147-1f70-470a-9e2e-89ba6de5e81a",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 403\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.forbidden;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "IdentityId",
												"value": "{{registeredUserIdentityId}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"projectId\": \"{{projectId}}\",\r\n  \"startDate\": \"{{current_timestamp}}\",\r\n  \"endDate\": \"{{highlightEndDate}}\",\r\n  \"description\" : \"Lorem Ipsum\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/Highlight/{{highlightId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Highlight",
												"{{highlightId}}"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Role",
							"item": [
								{
									"name": "Role-CreateRole-Registered",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "36180131-3f19-4be3-9263-392399ad025c",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 403\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.forbidden;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{registeredUserIdentityId}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"name\": \"{{roleName}}\",\r\n  \"scopes\": [\r\n    {\r\n      \"scope\": \"EmbedWrite\"\r\n    }\r\n  ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/Role",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Role"
											]
										}
									},
									"response": []
								},
								{
									"name": "Role-GetAllRoles-Registered",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "43c11a89-656b-469c-8cb0-bacdf6575798",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 403\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.forbidden;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{registeredUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Role",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Role"
											]
										}
									},
									"response": []
								},
								{
									"name": "Scope-GetAllScopes-Registered",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ae43fd3d-cfd8-4bdf-9729-075d257daca2",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 403\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.forbidden;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{registeredUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Role/Scopes",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Role",
												"Scopes"
											]
										}
									},
									"response": []
								},
								{
									"name": "Role-GetRole-Registered",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "803b1054-777f-4b36-b8ae-fd15bca56bf4",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 403\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.forbidden;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{registeredUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Role/{{roleId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Role",
												"{{roleId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Role-UpdateRole-Registered",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f833467b-9316-4252-98fd-b0266a7ddd96",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 403\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.forbidden;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{registeredUserIdentityId}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"name\": \"{{updatedRoleName}}\",\r\n  \"scopes\": [\r\n    {\r\n      \"scope\": \"EmbedWrite\"\r\n    }\r\n  ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/Role/{{roleId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Role",
												"{{roleId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Role-SetRole-Registered",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b28a0f11-948b-4e1a-ab5d-43e5505f72e1",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 403\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.forbidden;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{registeredUserIdentityId}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"createdUserId\": {{createdUserId}},\r\n  \"name\": \"{{projectNameUpdated}}\",\r\n  \"description\": \"postmantest_description\",\r\n  \"shortDescription\": \"postmantest_shortdesc\",\r\n  \"uri\": \"postmantest_uri\",\r\n  \"collaborators\": [\r\n    {\r\n      \"fullName\": \"postmantest_collfullname\",\r\n      \"role\": \"postmantest_collrole\"\r\n    }\r\n  ],\r\n  \"created\": \"2020-04-20T08:24:26.693Z\",\r\n  \"updated\": \"2020-04-20T08:24:26.693Z\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/Role/setRole?createdUserId={{createdUserId}}&roleId={{roleId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Role",
												"setRole"
											],
											"query": [
												{
													"key": "createdUserId",
													"value": "{{createdUserId}}",
													"description": "Id of the user that we want to update"
												},
												{
													"key": "roleId",
													"value": "{{roleId}}",
													"description": "Id of the role that you want to update the user with"
												}
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Search",
							"item": [
								{
									"name": "Search-SearchInternal-Registered",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4e238c07-790f-4932-97f6-a5c250d59547",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.ok;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{administratorUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Search/internal/{{projectName}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Search",
												"internal",
												"{{projectName}}"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Wizard",
							"item": [
								{
									"name": "Wizard-GetWizard-Registered",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "56e9b270-b3d3-4055-9c2d-a182042df9a5",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\")) + 1000;",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{registeredUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Wizard?sourceURI={{wizardSourceUri}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Wizard"
											],
											"query": [
												{
													"key": "sourceURI",
													"value": "{{wizardSourceUri}}",
													"description": "This is the URI that the wizard will use to fetch the source."
												}
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Cleanup",
							"item": [
								{
									"name": "Embed-DeleteEmbed-Self-Registered",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "06a7f923-cf89-4029-9640-a391dbc40465",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.ok;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{registeredUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Embed/{{embedGuid}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Embed",
												"{{embedGuid}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Embed-DeleteEmbed-Other-Registered",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b582a147-3c96-4ae0-aba0-3242856c7d61",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"",
													"pm.test(\"Status code is 401\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.unauthorized;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{registeredUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Embed/{{adminEmbedGuid}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Embed",
												"{{adminEmbedGuid}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Highlight-DeleteHighlight-Other-Registered",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "cc83fc60-a31a-4242-bcf1-e6d8a074bf38",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"",
													"pm.test(\"Status code is 403\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.forbidden;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{registeredUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Highlight/{{highlightId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Highlight",
												"{{highlightId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Project-DeleteProject-Self-Registered",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "0202e0ad-2287-4f53-bfa8-9d47c51ae0db",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{registeredUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Project/{{projectId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Project",
												"{{projectId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Project-DeleteProject-Other-Registered",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "eef0f020-d6cf-4914-a9c0-35bea8e04245",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"",
													"pm.test(\"Status code is 401\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.unauthorized;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{registeredUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Project/1",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Project",
												"1"
											]
										}
									},
									"response": []
								},
								{
									"name": "Role-DeleteRole-Registered",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3a80339f-2305-4ecb-99ad-144499de5711",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"",
													"pm.test(\"Status code is 403\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.forbidden;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{registeredUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Role/{{roleId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Role",
												"{{roleId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "User-DeleteUser-Other-Registered",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "047b16e2-fda2-4592-a6fe-a7a41018ac96",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"",
													"pm.test(\"Status code is 401\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.unauthorized;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{registeredUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/User/{{createdUserId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"User",
												"{{createdUserId}}"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "PR",
					"item": [
						{
							"name": "Preparation",
							"item": [
								{
									"name": "User-CreateUser",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "96444922-e42d-4a75-845e-34c3a884255e",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"var userName = pm.environment.get(\"userName\");",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.environment.set(\"createdUserId\", jsonData.id);",
													"pm.environment.set(\"identityId\", jsonData.id);",
													"",
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.success;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});",
													"",
													"pm.test(\"Check if created Username matches: \" + userName, function () {",
													"    pm.expect(jsonData.name).to.eql(userName);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{administratorUserIdentityId}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"identityId\": \"9996\",\n    \"name\": \"{{userName}}\",\n    \"email\": \"postmantest_email@example.com\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/User",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"User"
											]
										}
									},
									"response": []
								},
								{
									"name": "Project-CreateProject",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "9ba6e788-0364-4f5e-a316-ddfe997c5948",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"var administratorUserId = parseInt(pm.environment.get(\"administratorUserId\"));",
													"var projectName = pm.environment.get(\"projectName\");",
													"var adminUserName = pm.environment.get(\"adminUserName\");",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.environment.set(\"projectId\", jsonData.id);",
													"pm.environment.set(\"adminProjectId\", jsonData.id);",
													"",
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.success;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});",
													"",
													"pm.test(\"Project Name is set correctly and matching: \" + projectName, function () {",
													"    pm.expect(jsonData.name).to.eql(projectName);",
													"});",
													"",
													"pm.test(\"User Name is correct and matching: \" + adminUserName, function () {",
													"    pm.expect(jsonData.user.name).to.eql(adminUserName);",
													"});",
													"",
													"pm.test(\"Identity ID is correct and matching: \" + administratorUserId, function () {",
													"    pm.expect(parseInt(jsonData.user.id)).to.eql(administratorUserId);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{administratorUserIdentityId}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"name\": \"{{projectName}}\",\r\n  \"description\": \"postmantest_description\",\r\n  \"shortDescription\": \"postmantest_shortdesc\",\r\n  \"uri\": \"postmantest_uri\",\r\n  \"collaborators\": [\r\n    {\r\n      \"fullName\": \"postmantest_collfullname\",\r\n      \"role\": \"postmantest_collrole\"\r\n    }\r\n  ],\r\n  \"created\": \"2020-04-20T08:24:26.693Z\",\r\n  \"updated\": \"2020-04-20T08:24:26.693Z\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/Project",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Project"
											]
										}
									},
									"response": []
								},
								{
									"name": "Highlight-CreateHighlight",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "02c1ba2d-2d5a-4402-b403-818f901129c4",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"var identityId = parseInt(pm.environment.get(\"identityId\"));",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.environment.set(\"highlightId\", jsonData.id);",
													"",
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.success;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "4f9fd25d-b62b-4c34-91b7-d6be61424072",
												"exec": [
													"var current_timestamp = new Date();\r",
													"postman.setEnvironmentVariable(\"current_timestamp\", current_timestamp.toISOString());\r",
													"\r",
													"var future_timestamp = new Date(Date.now() +(2 * 86400000));\r",
													"postman.setEnvironmentVariable(\"future_timestamp\", future_timestamp.toISOString());\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{administratorUserIdentityId}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"projectId\": {{projectId}},\r\n  \"startDate\": \"{{current_timestamp}}\",\r\n  \"endDate\": \"{{future_timestamp}}\",\r\n  \"description\" : \"Lorem Ipsum\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/Highlight",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Highlight"
											]
										}
									},
									"response": []
								},
								{
									"name": "Embed-CreateEmbed",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ac2b6251-c664-4f34-a5e8-3926ca6fc757",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.environment.set(\"embedGuid\", jsonData.guid);",
													"pm.environment.set(\"embeddedProjectId\", jsonData.project.id);",
													"",
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.success;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{administratorUserIdentityId}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"projectId\": {{projectId}}\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/Embed",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Embed"
											]
										}
									},
									"response": []
								},
								{
									"name": "Role-CreateRole",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e9688d3f-a405-4144-9e1f-8cd9daf1684f",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"var scopeName = pm.environment.get(\"scopeName\");",
													"var roleName = pm.environment.get(\"roleName\");",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.environment.set(\"roleId\", jsonData.id);",
													"",
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.success;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});",
													"",
													"pm.test(\"Role Name is set correctly and matching: \" + roleName, function () {",
													"    pm.expect(jsonData.name).to.eql(roleName);",
													"});",
													"",
													"pm.test(\"Scope is correct and matching: \" + scopeName, function () {",
													"    pm.expect(jsonData.scopes.scope).to.eql(scopeName);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{administratorUserIdentityId}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"name\": \"{{roleName}}\",\r\n  \"scopes\": [\r\n    {\r\n      \"scope\": \"EmbedWrite\"\r\n    }\r\n  ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/Role",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Role"
											]
										}
									},
									"response": []
								}
							],
							"description": "For some requests, we need to have data available. The variables need to be filled so the request can succeed. We put these preparation requests in this folder. We will clean them up in the cleanup folder.",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "c7d754cb-9f76-46b3-8ca0-a5bb7bba6d8c",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "585a1f57-bf11-42eb-87e8-3903f4289b42",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "User",
							"item": [
								{
									"name": "Follow",
									"item": [
										{
											"name": "User-FollowUser-PR",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "e033e234-2d1a-449f-8149-025fb6900cfe",
														"exec": [
															"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
															"var userId = 25",
															"",
															"var jsonData = pm.response.json();",
															"",
															"pm.environment.set(\"createdUserId\", jsonData.id);",
															"pm.environment.set(\"createdUserIdentityId\", jsonData.identityId);",
															"",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Response must be valid and have a json body\", function () {",
															"     pm.response.to.be.success;",
															"     pm.response.to.be.withBody;",
															"     pm.response.to.be.json;",
															"});",
															"",
															"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
															"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
															"});",
															"",
															"pm.test(\"Check if created Username matches: \" + userId, function () {",
															"    pm.expect(jsonData.id).to.eql(userId);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "IdentityId",
														"type": "text",
														"value": "{{administratorUserIdentityId}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{apiUrl}}/api/User/follow/{{userIdToFollow}}",
													"host": [
														"{{apiUrl}}"
													],
													"path": [
														"api",
														"User",
														"follow",
														"{{userIdToFollow}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "User-UnFollowUser-PR",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "e9d15f60-51ee-45d5-84cb-0ffae4eefc8e",
														"exec": [
															"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
															"",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
															"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "IdentityId",
														"type": "text",
														"value": "{{administratorUserIdentityId}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{apiUrl}}/api/User/follow/{{userIdToFollow}}",
													"host": [
														"{{apiUrl}}"
													],
													"path": [
														"api",
														"User",
														"follow",
														"{{userIdToFollow}}"
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "User-CreateUser-PR",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "91e39857-10ee-41ba-ace1-5dc1b770c096",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 403\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.forbidden;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{prUserIdentityId}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"identityId\": \"{{createdUserId}}\",\n    \"name\": \"{{userName}}\",\n    \"email\": \"postmantest_email@example.com\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/User",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"User"
											]
										}
									},
									"response": []
								},
								{
									"name": "User-FollowUser-PR",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c216c5da-e108-4581-a7b5-45483c8f2201",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 403\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.forbidden;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{prUserIdentityId}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"identityId\": \"{{createdUserId}}\",\n    \"name\": \"{{userName}}\",\n    \"email\": \"postmantest_email@example.com\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/User",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"User"
											]
										}
									},
									"response": []
								},
								{
									"name": "User-GetUser-Other-PR",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6ad4f08f-a3b2-4586-b646-6d9e32923c83",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 403\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.forbidden;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{prUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/User/{{createdUserId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"User",
												"{{createdUserId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "User-GetUser-Self-PR",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "44220256-3a66-459f-9ac2-cb9f34c4dd83",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"var prUserIdentityId = parseInt(pm.environment.get(\"prUserIdentityId\"));",
													"",
													"var jsonData = pm.response.json();",
													"pm.environment.set(\"PrUserId\", jsonData.id);",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.ok;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});",
													"",
													"pm.test(\"Identity ID is correct and matching: \" + prUserIdentityId, function () {",
													"    pm.expect(parseInt(jsonData.identityId)).to.eql(prUserIdentityId);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{prUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/User",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"User"
											]
										}
									},
									"response": []
								},
								{
									"name": "User-UpdateUser-Self-PR",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "fd9c0740-02b3-4e4b-805f-d931a3c00d2f",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"var updatedPrUserEmail = pm.environment.get(\"updatedPrUserEmail\");",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.ok;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Check if email update matches: \" + updatedPrUserEmail, function () {",
													"    pm.expect(jsonData.email).to.eql(updatedPrUserEmail);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "IdentityId",
												"value": "{{prUserIdentityId}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"name\": \"Pr jerry\",\r\n  \"email\": \"{{updatedPrUserEmail}}\",\r\n  \"identityId\": \"{{prUserIdentityId}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/User/{{PrUserId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"User",
												"{{PrUserId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "User-UpdateUser-Other-PR",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "fecaf8bf-320e-437b-a403-b0190734c79e",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 401\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.unauthorized;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{prUserIdentityId}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"name\": \"bobz\",\r\n  \"email\": \"BobSmith@email.com\",\r\n  \"identityId\": {{administratorUserIdentityId}}\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/User/{{createdUserId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"User",
												"{{createdUserId}}"
											]
										}
									},
									"response": []
								}
							],
							"description": "Requests executed as the Alice user with the registered role.",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "b0d4d151-ee9d-49e6-b1d5-7ddbfa5ace61",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "2efd592c-826e-4d55-8a4c-4d630fa1f9b6",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Project",
							"item": [
								{
									"name": "Follow",
									"item": [
										{
											"name": "Project-FollowProject-PR",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "1d856d10-c630-4b60-840f-8039fa0f71c3",
														"exec": [
															"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
															"var projectName = 3",
															"",
															"var jsonData = pm.response.json();",
															"",
															"pm.environment.set(\"createdUserId\", jsonData.id);",
															"pm.environment.set(\"createdUserIdentityId\", jsonData.identityId);",
															"",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Response must be valid and have a json body\", function () {",
															"     pm.response.to.be.success;",
															"     pm.response.to.be.withBody;",
															"     pm.response.to.be.json;",
															"});",
															"",
															"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
															"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
															"});",
															"",
															"pm.test(\"Check if created Username matches: \" + projectName, function () {",
															"    pm.expect(jsonData.id).to.eql(projectName);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "IdentityId",
														"type": "text",
														"value": "{{administratorUserIdentityId}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{apiUrl}}/api/project/follow/{{projectIdToFollow}}",
													"host": [
														"{{apiUrl}}"
													],
													"path": [
														"api",
														"project",
														"follow",
														"{{projectIdToFollow}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Project-UnFollowProject-PR",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "7656fde1-7848-4cb5-87b8-2f68ffe90481",
														"exec": [
															"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
															"",
															"pm.test(\"Status code is 201\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
															"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "IdentityId",
														"type": "text",
														"value": "{{administratorUserIdentityId}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{apiUrl}}/api/project/follow/{{projectIdToFollow}}",
													"host": [
														"{{apiUrl}}"
													],
													"path": [
														"api",
														"project",
														"follow",
														"{{projectIdToFollow}}"
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "Project-CreateProject-PR",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "9ca0c0d2-9408-4f4b-a1f3-1e60711dacdb",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"var PrUserId = pm.environment.get(\"PrUserId\");",
													"var projectName = pm.environment.get(\"projectName\");",
													"",
													"var jsonData = pm.response.json();",
													"pm.environment.set(\"projectId\", jsonData.id);",
													"",
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});",
													"",
													"pm.test(\"Project Name is set correctly and matches: \" + projectName, function () {",
													"    pm.expect(jsonData.name).to.eql(projectName);",
													"});",
													"",
													"pm.test(\"User Id is set correctly and matches: \" + PrUserId, function () {",
													"    pm.expect(jsonData.user.id).to.eql(PrUserId);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "IdentityId",
												"value": "{{prUserIdentityId}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"name\": \"{{projectName}}\",\r\n  \"description\": \"postmantest_description\",\r\n  \"shortDescription\": \"postmantest_shortdesc\",\r\n  \"uri\": \"postmantest_uri\",\r\n  \"collaborators\": [\r\n    {\r\n      \"fullName\": \"postmantest_collfullname\",\r\n      \"role\": \"postmantest_collrole\"\r\n    }\r\n  ],\r\n  \"created\": \"2020-04-20T08:24:26.693Z\",\r\n  \"updated\": \"2020-04-20T08:24:26.693Z\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/Project",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Project"
											]
										}
									},
									"response": []
								},
								{
									"name": "Project-GetAllProjects-PR",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "27d3ab62-f7c3-4854-a6e7-141364f6eea5",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"var projectName = pm.environment.get(\"projectName\");",
													"",
													"var jsonData = pm.response.json();",
													"",
													"var foundAt;",
													"",
													"function findProject(jsonData, name) {",
													"    for (var i = 0; i < jsonData.results.length; i++) {",
													"        if (jsonData.results[i].name == name) {",
													"            return i;",
													"        }",
													"    }",
													"    return -1;",
													"}",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Project: \" + projectName + \" is in list\", function () {",
													"    foundAt = findProject(jsonData, projectName);",
													"    pm.expect(foundAt).to.not.eql(-1);",
													"});",
													"",
													"pm.test(\"Project Name is set correctly and matching: \" + projectName, function () {",
													"    pm.expect(jsonData.results[foundAt].name).to.eql(projectName);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{prUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Project",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Project"
											]
										}
									},
									"response": []
								},
								{
									"name": "Project-GetProject-Self-PR",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "8f6f2297-a515-4c7f-9f44-700017fc3e45",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"var projectName = pm.environment.get(\"projectName\");",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Project Name is set correctly and matches: \" + projectName, function () {",
													"    pm.expect(jsonData.name).to.eql(projectName);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{prUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Project/{{projectId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Project",
												"{{projectId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Project-GetProject-Other-PR",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2c44ff08-5189-4ce2-b0c7-1ac71f72bb51",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{prUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Project/{{adminProjectId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Project",
												"{{adminProjectId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Project-UpdateProject-Self-PR",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5d8846b2-6d2d-4fab-94cd-1765ff572f07",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"var projectName = pm.environment.get(\"projectNameUpdated\");",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.ok;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Project Name is set correctly and matches: \" + projectName, function () {",
													"    pm.expect(jsonData.name).to.eql(projectName);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{prUserIdentityId}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"name\": \"{{projectNameUpdated}}\",\r\n  \"description\": \"postmantest_description\",\r\n  \"shortDescription\": \"postmantest_shortdesc\",\r\n  \"uri\": \"postmantest_uri\",\r\n  \"collaborators\": [\r\n    {\r\n      \"fullName\": \"postmantest_collfullname\",\r\n      \"role\": \"postmantest_collrole\"\r\n    }\r\n  ],\r\n  \"created\": \"2020-04-20T08:24:26.693Z\",\r\n  \"updated\": \"2020-04-20T08:24:26.693Z\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/Project/{{projectId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Project",
												"{{projectId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Project-UpdateProject-Other-PR",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "aeb54c50-08b5-43cb-859b-4cc219378efa",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"",
													"pm.test(\"Status code is 401\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"    pm.response.to.be.unauthorized;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{prUserIdentityId}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"name\": \"{{projectNameUpdated}}\",\r\n  \"description\": \"postmantest_description\",\r\n  \"shortDescription\": \"postmantest_shortdesc\",\r\n  \"uri\": \"postmantest_uri\",\r\n  \"collaborators\": [\r\n    {\r\n      \"fullName\": \"postmantest_collfullname\",\r\n      \"role\": \"postmantest_collrole\"\r\n    }\r\n  ],\r\n  \"created\": \"2020-04-20T08:24:26.693Z\",\r\n  \"updated\": \"2020-04-20T08:24:26.693Z\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/Project/{{adminProjectId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Project",
												"{{adminProjectId}}"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Embed",
							"item": [
								{
									"name": "Embed-CreateEmbed-Self-PR",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5de0dbce-1c85-4fcc-956d-1f95113d08c7",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.environment.set(\"embedGuid\", jsonData.guid);",
													"pm.environment.set(\"embeddedProjectId\", jsonData.project.id);",
													"",
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.success;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "IdentityId",
												"value": "{{prUserIdentityId}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"projectId\": {{projectId}}\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/Embed",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Embed"
											]
										}
									},
									"response": []
								},
								{
									"name": "Embed-CreateEmbed-Other-PR",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4dac6757-e25c-40a8-a5b7-ced1d3f54c28",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.environment.set(\"otherEmbedGuid\", jsonData.guid);",
													"pm.environment.set(\"otherEmbeddedProjectId\", jsonData.project.id);",
													"",
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.success;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "IdentityId",
												"value": "{{prUserIdentityId}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"projectId\": {{adminProjectId}}\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/Embed",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Embed"
											]
										}
									},
									"response": []
								},
								{
									"name": "Embed-GetAllEmbeds-PR",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "9ae6ab51-6f8a-4125-bf07-87d62ba791dc",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.ok;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"value": "{{prUserIdentityId}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Embed",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Embed"
											]
										}
									},
									"response": []
								},
								{
									"name": "Embed-GetEmbed-Self-PR",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "fbfab176-2361-445b-8210-cbef4aca5ccf",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"var embeddedProjectId = parseInt(pm.environment.get(\"embeddedProjectId\"))",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Embed matches: \" + embeddedProjectId, function () {",
													"    pm.expect(jsonData.id).to.eql(embeddedProjectId);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{prUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Embed/{{embedGuid}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Embed",
												"{{embedGuid}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Embed-GetEmbed-Other-PR",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a215f69e-965f-4dd5-80c7-27c1eae7ca79",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"var otherEmbeddedProjectId = parseInt(pm.environment.get(\"otherEmbeddedProjectId\"))",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Embed matches: \" + otherEmbeddedProjectId, function () {",
													"    pm.expect(jsonData.id).to.eql(otherEmbeddedProjectId);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{prUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Embed/{{otherEmbedGuid}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Embed",
												"{{otherEmbedGuid}}"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Highlight",
							"item": [
								{
									"name": "Highlight-CreateHighlight-Self-PR",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3a92482a-eced-4ee9-a04b-b0a3a7401b82",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.environment.set(\"highlightId\", jsonData.id);",
													"",
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.success;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "6d2d6eea-f0f5-45af-9ae1-d4582b12a776",
												"exec": [
													"var current_timestamp = new Date();\r",
													"postman.setEnvironmentVariable(\"current_timestamp\", current_timestamp.toISOString());\r",
													"\r",
													"var future_timestamp = new Date(Date.now() +(2 * 86400000));\r",
													"postman.setEnvironmentVariable(\"future_timestamp\", future_timestamp.toISOString());\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{prUserIdentityId}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"projectId\": {{projectId}},\r\n  \"startDate\": \"{{current_timestamp}}\",\r\n  \"endDate\": \"{{future_timestamp}}\",\r\n  \"description\" : \"Lorem Ipsum\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/Highlight",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Highlight"
											]
										}
									},
									"response": []
								},
								{
									"name": "Highlight-GetHighlight-Self-PR",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "874b00a5-205d-4e72-a7b4-160f4d1f8791",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"var identityId = parseInt(pm.environment.get(\"identityId\"));",
													"var highlightId = parseInt(pm.environment.get(\"highlightId\"));",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.environment.set(\"highlightStartDate\", jsonData.startDate);",
													"pm.environment.set(\"highlightEndDate\", jsonData.endDate);",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Highlight Id matches: \" + highlightId, function () {",
													"    pm.expect(jsonData.id).to.eql(highlightId);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"value": "{{prUserIdentityId}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Highlight/{{highlightId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Highlight",
												"{{highlightId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Highlight-GetHighlight-ByProject-Self-PR",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "97535220-1176-494d-b4f4-a4a7e709e7b4",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"var identityId = parseInt(pm.environment.get(\"identityId\"));",
													"var projectId = parseInt(pm.environment.get(\"projectId\"));",
													"var highlightId = parseInt(pm.environment.get(\"highlightId\"));",
													"",
													"var jsonData = pm.response.json();",
													"",
													"var foundAt;",
													"",
													"function findHighlightId(jsonData, item) {",
													"    for (var i = 0; i < jsonData.length; i++) {",
													"        if (jsonData[i].id == item) {",
													"            return i;",
													"        }",
													"    }",
													"    return -1;",
													"}",
													"",
													"function findProjectId(jsonData, item) {",
													"    for (var i = 0; i < jsonData.length; i++) {",
													"        if (jsonData[i].projectId == item) {",
													"            return i;",
													"        }",
													"    }",
													"    return -1;",
													"}",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Project is in list and matching: \" + projectId, function () {",
													"    foundAt = findProjectId(jsonData, projectId);",
													"    pm.expect(foundAt).to.not.eql(-1);",
													"});",
													"",
													"pm.test(\"Highlight is in list and matching:\" + highlightId, function () {",
													"    foundAt = findHighlightId(jsonData, highlightId);",
													"    pm.expect(foundAt).to.not.eql(-1);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{prUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Highlight/Project/{{projectId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Highlight",
												"Project",
												"{{projectId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Highlight-UpdateHighlight-Self-PR",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "8248083b-87a6-495d-b1bd-c4f5b16a53bb",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.ok;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "27cedae2-47bb-4a16-81d3-44028c354993",
												"exec": [
													"var current_timestamp = new Date();\r",
													"postman.setEnvironmentVariable(\"current_timestamp\", current_timestamp.toISOString());"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "IdentityId",
												"value": "{{prUserIdentityId}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"projectId\": \"{{projectId}}\",\r\n  \"startDate\": \"{{current_timestamp}}\",\r\n  \"endDate\": \"{{future_timestamp}}\",\r\n  \"description\" : \"Lorem Ipsum\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/Highlight/{{highlightId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Highlight",
												"{{highlightId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Highlight-CreateHighlight-Other-PR",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "bb670b70-a39f-4cd4-adc9-d9c3481c6ead",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"",
													"var jsonData = pm.response.json();",
													"pm.environment.set(\"adminHighlightId\", jsonData.id);",
													"",
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.success;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "54a6efb9-2b62-41c8-b2f5-54e89c86c7ea",
												"exec": [
													"var current_timestamp = new Date();\r",
													"postman.setEnvironmentVariable(\"current_timestamp\", current_timestamp.toISOString());\r",
													"\r",
													"var future_timestamp = new Date(Date.now() +(2 * 86400000));\r",
													"postman.setEnvironmentVariable(\"future_timestamp\", future_timestamp.toISOString());\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{prUserIdentityId}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"projectId\": {{adminProjectId}},\r\n  \"startDate\": \"{{current_timestamp}}\",\r\n  \"endDate\": \"{{future_timestamp}}\",\r\n  \"description\" : \"Lorem Ipsum\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/Highlight",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Highlight"
											]
										}
									},
									"response": []
								},
								{
									"name": "Highlight-GetHighlight-Other-PR",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "58b30145-c908-441b-9e33-ccc204a28f3c",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"var identityId = parseInt(pm.environment.get(\"identityId\"));",
													"var adminHighlightId = parseInt(pm.environment.get(\"adminHighlightId\"));",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.environment.set(\"highlightStartDate\", jsonData.startDate);",
													"pm.environment.set(\"highlightEndDate\", jsonData.endDate);",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Highlight Id matches: \" + adminHighlightId, function () {",
													"    pm.expect(jsonData.id).to.eql(adminHighlightId);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{prUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Highlight/{{adminHighlightId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Highlight",
												"{{adminHighlightId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Highlight-GetHighlight-ByProject-Other-PR",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "57306014-34c8-40d6-9e17-df77e745535a",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"var identityId = parseInt(pm.environment.get(\"identityId\"));",
													"var adminProjectId = parseInt(pm.environment.get(\"adminProjectId\"));",
													"var adminHighlightId = parseInt(pm.environment.get(\"adminHighlightId\"));",
													"",
													"var jsonData = pm.response.json();",
													"",
													"var foundAt;",
													"",
													"function findHighlightId(jsonData, item) {",
													"    for (var i = 0; i < jsonData.length; i++) {",
													"        if (jsonData[i].id == item) {",
													"            return i;",
													"        }",
													"    }",
													"    return -1;",
													"}",
													"",
													"function findProjectId(jsonData, item) {",
													"    for (var i = 0; i < jsonData.length; i++) {",
													"        if (jsonData[i].projectId == item) {",
													"            return i;",
													"        }",
													"    }",
													"    return -1;",
													"}",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Project is in list and matching: \" + adminProjectId, function () {",
													"    foundAt = findProjectId(jsonData, adminProjectId);",
													"    pm.expect(foundAt).to.not.eql(-1);",
													"});",
													"",
													"pm.test(\"Highlight is in list and matching:\" + adminHighlightId, function () {",
													"    foundAt = findHighlightId(jsonData, adminHighlightId);",
													"    pm.expect(foundAt).to.not.eql(-1);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{prUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Highlight/Project/{{adminProjectId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Highlight",
												"Project",
												"{{adminProjectId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Highlight-UpdateHighlight-Other-PR",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e40405c2-ca3b-4361-a553-71fccc659884",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.ok;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "a2218cd0-ea9a-42c8-8b95-3bdfac11f956",
												"exec": [
													"var current_timestamp = new Date();\r",
													"postman.setEnvironmentVariable(\"current_timestamp\", current_timestamp.toISOString());"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{prUserIdentityId}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"projectId\": \"{{projectId}}\",\r\n  \"startDate\": \"{{current_timestamp}}\",\r\n  \"endDate\": \"{{future_timestamp}}\",\r\n  \"description\" : \"Lorem Ipsum\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/Highlight/{{adminHighlightId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Highlight",
												"{{adminHighlightId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Highlight-GetAllActiveHighlights-PR",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5ad8ee5c-5eac-4716-8a75-bc7750515f30",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"var projectId = pm.environment.get(\"adminProjectId\");",
													"",
													"var jsonData = pm.response.json();",
													"",
													"var foundAt;",
													"",
													"function findItem(jsonData, item) {",
													"    for (var i = 0; i < jsonData.length; i++) {",
													"        if (jsonData[i].projectId == item) {",
													"            return i;",
													"        }",
													"    }",
													"    return -1;",
													"}",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Highlight is in list and matching: \" + projectId, function () {",
													"    foundAt = findItem(jsonData, projectId);",
													"    pm.expect(foundAt).to.not.eql(-1);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{prUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Highlight",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Highlight"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Role",
							"item": [
								{
									"name": "Role-CreateRole-PR",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6118d144-de52-4ff4-879a-2b7d8a12d19b",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 403\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.forbidden;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{prUserIdentityId}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"name\": \"{{roleName}}\",\r\n  \"scopes\": [\r\n    {\r\n      \"scope\": \"EmbedWrite\"\r\n    }\r\n  ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/Role",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Role"
											]
										}
									},
									"response": []
								},
								{
									"name": "Role-GetAllRoles-PR",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "96498358-ff50-4f99-8353-55b7f9deec68",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 403\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.forbidden;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{prUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Role",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Role"
											]
										}
									},
									"response": []
								},
								{
									"name": "Scope-GetAllScopes-PR",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "25fd2cb2-01e7-4ce1-ba9b-07d4258669de",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 403\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.forbidden;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{prUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Role/Scopes",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Role",
												"Scopes"
											]
										}
									},
									"response": []
								},
								{
									"name": "Role-GetRole-PR",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c90137c5-1598-4b83-bddb-89f014d104a6",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 403\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.forbidden;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{prUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Role/{{roleId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Role",
												"{{roleId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Role-UpdateRole-PR",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "9b61635b-c683-4c8a-bc15-6b6c6fd7b865",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 403\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.forbidden;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{prUserIdentityId}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"name\": \"{{updatedRoleName}}\",\r\n  \"scopes\": [\r\n    {\r\n      \"scope\": \"EmbedWrite\"\r\n    }\r\n  ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/Role/{{roleId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Role",
												"{{roleId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Role-SetRole-PR",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4c7d50f7-edca-44fb-bead-c4e84f2bc81a",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 403\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.forbidden;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{prUserIdentityId}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"createdUserId\": {{createdUserId}},\r\n  \"name\": \"{{projectNameUpdated}}\",\r\n  \"description\": \"postmantest_description\",\r\n  \"shortDescription\": \"postmantest_shortdesc\",\r\n  \"uri\": \"postmantest_uri\",\r\n  \"collaborators\": [\r\n    {\r\n      \"fullName\": \"postmantest_collfullname\",\r\n      \"role\": \"postmantest_collrole\"\r\n    }\r\n  ],\r\n  \"created\": \"2020-04-20T08:24:26.693Z\",\r\n  \"updated\": \"2020-04-20T08:24:26.693Z\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/Role/setRole?createdUserId={{createdUserId}}&roleId={{roleId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Role",
												"setRole"
											],
											"query": [
												{
													"key": "createdUserId",
													"value": "{{createdUserId}}",
													"description": "Id of the user that we want to update"
												},
												{
													"key": "roleId",
													"value": "{{roleId}}",
													"description": "Id of the role that you want to update the user with"
												}
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Search",
							"item": [
								{
									"name": "Search-SearchInternal-PR",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "7e670af1-8086-4b65-b96e-df0175e7135d",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.ok;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{prUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Search/internal/{{projectName}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Search",
												"internal",
												"{{projectName}}"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Wizard",
							"item": [
								{
									"name": "Wizard-GetWizard-PR",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "1cd71ba7-bbca-4b13-80d5-5bbfe10c0662",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\")) + 1000;",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{registeredUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Wizard?sourceURI={{wizardSourceUri}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Wizard"
											],
											"query": [
												{
													"key": "sourceURI",
													"value": "{{wizardSourceUri}}",
													"description": "This is the URI that the wizard will use to fetch the source."
												}
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Cleanup",
							"item": [
								{
									"name": "Embed-DeleteEmbed-Self-PR",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "aed618d6-29e4-4bd7-928c-8170d41faa74",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.ok;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{prUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Embed/{{embedGuid}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Embed",
												"{{embedGuid}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Embed-DeleteEmbed-Other-PR",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "38fb700d-778d-4077-91b7-5b57baa850ae",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.ok;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{prUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Embed/{{otherEmbedGuid}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Embed",
												"{{otherEmbedGuid}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Highlight-DeleteHighlight-Self-PR",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "9cd807f1-fb83-48d3-bbde-e00c8d96ebf5",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{prUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Highlight/{{highlightId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Highlight",
												"{{highlightId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Highlight-DeleteHighlight-Other-PR",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4a2a41aa-621d-424c-8f2d-5c8ea241b8ec",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{prUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Highlight/{{adminHighlightId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Highlight",
												"{{adminHighlightId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Project-DeleteProject-Self-PR",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f0d625fc-937b-4004-96e1-9f4704283ea8",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{prUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Project/{{projectId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Project",
												"{{projectId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Project-DeleteProject-Other-PR",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "7b8663b4-b140-4187-972f-3d2205896d5d",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 401\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.unauthorized;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{prUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Project/{{adminProjectId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Project",
												"{{adminProjectId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Role-DeleteRole-PR",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "8bfa8b54-767b-4617-82d6-31920b9e440c",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 403\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.forbidden;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{prUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Role/{{roleId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Role",
												"{{roleId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "User-DeleteUser-Other-PR",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "14206cca-c9ce-4abc-bc62-a773ccf14747",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 401\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.unauthorized;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{prUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/User/{{createdUserId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"User",
												"{{createdUserId}}"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"protocolProfileBehavior": {}
		}
	],
	"auth": {
		"type": "oauth2",
		"oauth2": [
			{
				"key": "accessToken",
				"value": "{{accessToken}}",
				"type": "string"
			},
			{
				"key": "tokenType",
				"value": "Bearer",
				"type": "string"
			},
			{
				"key": "addTokenTo",
				"value": "header",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "27cd2b77-ecf3-44cd-b4ab-eb40f0fcdbf1",
				"type": "text/javascript",
				"exec": [
					"// Adapted from: https://gist.github.com/harryi3t/dd5c61451206047db70710ff6174c3c1",
					"",
					"let tokenUrl = pm.variables.get(\"tokenUrl\");",
					"let clientId = pm.variables.get(\"clientId\");",
					"let clientSecret = pm.variables.get(\"clientSecret\");",
					"let scope = pm.variables.get(\"scope\");",
					"",
					"let getTokenRequest = {",
					"    method: 'POST',",
					"    url: tokenUrl,",
					"    auth: {",
					"        type: \"basic\",",
					"        basic: [",
					"            { key: \"username\", value: clientId },",
					"            { key: \"password\", value: clientSecret }",
					"        ]",
					"    },",
					"    body: {",
					"        mode: 'formdata',",
					"        formdata: [",
					"            { key: 'grant_type', value: 'client_credentials' },",
					"            { key: 'scope', value: scope }",
					"        ]",
					"    }",
					"};",
					"",
					"pm.sendRequest(getTokenRequest, (err, response) => {",
					"    let jsonResponse = response.json(),",
					"        newAccessToken = jsonResponse.access_token;",
					"",
					"    console.log({ err, jsonResponse, newAccessToken })",
					"",
					"    pm.environment.set('accessToken', newAccessToken);",
					"    pm.variables.set('accessToken', newAccessToken);",
					"});"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "0a2e5a58-b3d9-4f1a-9d62-d3a31efa8d00",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"id": "f7e8fb98-dff6-4403-a75a-f17a701a2b53",
			"key": "userIdToFollow",
			"value": "25"
		}
	],
	"protocolProfileBehavior": {}
}