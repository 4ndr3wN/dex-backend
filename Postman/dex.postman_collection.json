{
	"info": {
		"_postman_id": "832b6d14-92bd-4633-aecc-76daa43b253d",
		"name": "DEV",
		"description": "Testing Digital Excellence API",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Warmup",
			"item": [
				{
					"name": "CreateUsers",
					"item": [
						{
							"name": "Registered",
							"item": [
								{
									"name": "Create-RegisteredUser",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a9134072-02ac-4e2a-8acf-8b5437d4bad6",
												"exec": [
													"var jsonData = pm.response.json();\r",
													"pm.environment.set(\"registeredUserId\", jsonData.id)"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "IdentityId",
												"value": "{{administratorUserIdentityId}}",
												"type": "text"
											},
											{
												"key": "Authorization",
												"value": "Bearer eyJhbGciOiJSUzI1NiIsImtpZCI6ImU4VW1OX2NmZlBoamVPQ3hCSkZpb2ciLCJ0eXAiOiJhdCtqd3QifQ.eyJuYmYiOjE2MDgyMDE4MTMsImV4cCI6MTYwODIwNTQxMywiaXNzIjoiaHR0cHM6Ly9sb2NhbGhvc3Q6NTAwNSIsImF1ZCI6ImRleC1hcGkiLCJjbGllbnRfaWQiOiJkZXgtYXBpLWNsaWVudCIsImNsaWVudF9yb2xlIjoiQmFja2VuZEFwcGxpY2F0aW9uIiwic2NvcGUiOlsiRW1iZWRSZWFkIiwiRW1iZWRXcml0ZSIsIkhpZ2hsaWdodFJlYWQiLCJIaWdobGlnaHRXcml0ZSIsIlByb2plY3RSZWFkIiwiUHJvamVjdFdyaXRlIiwiVXNlclJlYWQiLCJVc2VyV3JpdGUiXX0.jT1Edm1dzKAu47xBFWg4IEWXoIYKTS5lScCmE798FfNdzRutVXlPmMZtac_PcmEcHrbgMvKUqd97UhpnT1ywhToXTQOVcy2EeWfprOkSWKxvTYiP1O55a01iWnOvLcs20ucbjPBHxYeq1WL3FoEfs0ahVSB4nDrqX_MYYmkvX2XriUb97fm9Sdk5fCh44q2tVH7ywZYOWmd3ZwqDB_X4GwyGGpOL_WTIQe-NaBeeONXuKcfEbF5_GpUz751nBvtnuB2lBuAeijLakb4SmtUiaxE479yjMoMz5LA6rpiGxz44gq0k-2r9EZNZs92ziop0cKuvExrDXcScJNAI4QuToQ",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"identityId\": \"{{registeredUserIdentityId}}\",\r\n    \"name\": \"Registered Postman User\",\r\n    \"email\": \"registeredUser@postman.com\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/User",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"User"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "PR",
							"item": [
								{
									"name": "Create-PRUser",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2e3a098f-cb6e-4b38-9a1a-ba2d3a4ccb7c",
												"exec": [
													"var jsonData = pm.response.json();\r",
													"pm.environment.set(\"prUserId\", jsonData.id)"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{administratorUserIdentityId}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"identityId\": \"{{prUserIdentityId}}\",\r\n    \"name\": \"Public Relationship Postman User\",\r\n    \"email\": \"PRUser@postman.com\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/User",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"User"
											]
										}
									},
									"response": []
								},
								{
									"name": "Set-PRUser-Role",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "dbb8b985-5ab9-4b98-8f48-c3ad29925a10",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "IdentityId",
												"value": "{{administratorUserIdentityId}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Role/setRole?userId={{prUserId}}&roleId={{prRole}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Role",
												"setRole"
											],
											"query": [
												{
													"key": "userId",
													"value": "{{prUserId}}"
												},
												{
													"key": "roleId",
													"value": "{{prRole}}"
												}
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "DataOfficer",
							"item": [
								{
									"name": "Create-DataOfficerUser",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3d2cf319-410d-48fd-bc35-186b143381fc",
												"exec": [
													"var jsonData = pm.response.json();\r",
													"pm.environment.set(\"dataOfficerUserId\", jsonData.id)\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "IdentityId",
												"value": "{{administratorUserIdentityId}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"identityId\": \"{{dataOfficerUserIdentityId}}\",\r\n    \"name\": \"Data Officer Postman User\",\r\n    \"email\": \"dataOfficerUser@postman.com\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/User",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"User"
											]
										}
									},
									"response": []
								},
								{
									"name": "Set-DataOfficerUser-Role",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "0e541cc5-d9fa-4af3-842f-6d9f937482e2",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "IdentityId",
												"value": "{{administratorUserIdentityId}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Role/setRole?userId={{dataOfficerUserId}}&roleId={{dataOfficerRole}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Role",
												"setRole"
											],
											"query": [
												{
													"key": "userId",
													"value": "{{dataOfficerUserId}}"
												},
												{
													"key": "roleId",
													"value": "{{dataOfficerRole}}"
												}
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "7106aa03-464d-4910-a2a1-407bcbe44b1d",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "8fae3b9e-b35d-47cd-813b-7d2deb87963a",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Project-GetAllProjects-Guest",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c7873f7b-3d82-4898-ae91-f5cb02bb946c",
								"exec": [
									"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\") + 5000);",
									"",
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
									"});",
									"",
									"pm.test(\"Response must be valid and have a json body\", function () {",
									"    pm.response.to.be.ok;",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{apiUrl}}/api/Project",
							"host": [
								"{{apiUrl}}"
							],
							"path": [
								"api",
								"Project"
							]
						}
					},
					"response": []
				},
				{
					"name": "User-CreateUser-Administrator",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "7644c194-4f7e-4a24-a0ce-86313801a85f",
								"exec": [
									"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
									"",
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Response must be valid and have a json body\", function () {",
									"     pm.response.to.be.success;",
									"     pm.response.to.be.withBody;",
									"     pm.response.to.be.json;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "IdentityId",
								"type": "text",
								"value": "{{administratorUserIdentityId}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"identityId\": \"999\",\n    \"name\": \"{{userName}}\",\n    \"email\": \"postmantest_email@example.com\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{apiUrl}}/api/User",
							"host": [
								"{{apiUrl}}"
							],
							"path": [
								"api",
								"User"
							]
						}
					},
					"response": []
				},
				{
					"name": "Project-CreateProjectToFollow-Administrator",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5f5d246a-5bb1-4fc1-9ef6-f56aed5c0e3e",
								"exec": [
									"var administratorUserId = parseInt(pm.environment.get(\"administratorUserId\"));",
									"var projectName = pm.environment.get(\"projectName\");",
									"var adminUserName = pm.environment.get(\"adminUserName\");",
									"",
									"var jsonData = pm.response.json();",
									"",
									"pm.environment.set(\"projectIdToFollow\", jsonData.id);",
									"",
									"eval(pm.environment.get(\"commonTests\"))();",
									"",
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Response must be valid and have a json body\", function () {",
									"     pm.response.to.be.success;",
									"     pm.response.to.be.withBody;",
									"     pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"Project Name is set correctly and matching: \" + projectName, function () {",
									"    pm.expect(jsonData.name).to.eql(projectName);",
									"});",
									"",
									"pm.test(\"User Name is correct and matching: \" + adminUserName, function () {",
									"    pm.expect(jsonData.user.name).to.eql(adminUserName);",
									"});",
									"",
									"pm.test(\"Identity ID is correct and matching: \" + administratorUserId, function () {",
									"    pm.expect(parseInt(jsonData.user.id)).to.eql(administratorUserId);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "IdentityId",
								"type": "text",
								"value": "{{administratorUserIdentityId}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"{{projectName}}\",\r\n  \"description\": \"postmantest_description\",\r\n  \"shortDescription\": \"postmantest_shortdesc\",\r\n  \"uri\": \"postmantest_uri\",\r\n  \"collaborators\": [\r\n    {\r\n      \"fullName\": \"postmantest_collfullname\",\r\n      \"role\": \"postmantest_collrole\"\r\n    }\r\n  ],\r\n  \"created\": \"2020-04-20T08:24:26.693Z\",\r\n  \"updated\": \"2020-04-20T08:24:26.693Z\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{apiUrl}}/api/Project",
							"host": [
								"{{apiUrl}}"
							],
							"path": [
								"api",
								"Project"
							]
						}
					},
					"response": []
				},
				{
					"name": "User-CreateUserToFollow-Administrator",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "21e927fa-3a54-4971-ac26-b46cb411b48f",
								"exec": [
									"var userName = pm.environment.get(\"userName\");",
									"",
									"var jsonData = pm.response.json();",
									"pm.environment.set(\"userIdToFollow\", jsonData.id)",
									"",
									"eval(pm.environment.get(\"commonTests\"))();",
									"",
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Response must be valid and have a json body\", function () {",
									"     pm.response.to.be.success;",
									"     pm.response.to.be.withBody;",
									"     pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"Check if created Username matches: \" + userName, function () {",
									"    pm.expect(jsonData.name).to.eql(userName);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "IdentityId",
								"type": "text",
								"value": "{{administratorUserIdentityId}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"identityId\": \"999\",\n    \"name\": \"{{userName}}\",\n    \"email\": \"postmantest_email@example.com\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{apiUrl}}/api/User",
							"host": [
								"{{apiUrl}}"
							],
							"path": [
								"api",
								"User"
							]
						}
					},
					"response": []
				}
			],
			"description": "Warmup the API to ensure fast response times",
			"protocolProfileBehavior": {}
		},
		{
			"name": "ACL",
			"item": [
				{
					"name": "Administrator",
					"item": [
						{
							"name": "User",
							"item": [
								{
									"name": "User-CreateUser-Administrator",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ea5b0a39-b224-4b6b-a378-b1263de54a8e",
												"exec": [
													"var userName = pm.environment.get(\"userName\");",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.environment.set(\"createdUserId\", jsonData.id);",
													"pm.environment.set(\"createdUserIdentityId\", jsonData.identityId);",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Check if created Username matches: \" + userName, function () {",
													"    pm.expect(jsonData.name).to.eql(userName);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "a780ebf4-e950-47b7-ae88-4bb60e6d58c1",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{administratorUserIdentityId}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"identityId\": \"999\",\n    \"name\": \"{{userName}}\",\n    \"email\": \"postmantest_email@example.com\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/User",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"User"
											]
										}
									},
									"response": []
								},
								{
									"name": "User-GetUser-Administrator",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f1844734-c54c-4833-a618-578cdfddf863",
												"exec": [
													"var createdUserId = parseInt(pm.environment.get(\"createdUserId\"));",
													"var createdUserIdentityId = pm.environment.get(\"createdUserIdentityId\");",
													"var userName = pm.environment.get(\"userName\");",
													"",
													"var jsonData = pm.response.json();",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Check if updated identity Id matches: \" + createdUserIdentityId, function () {",
													"    pm.expect(jsonData.identityId).to.eql(createdUserIdentityId);",
													"});",
													"",
													"pm.test(\"Check if updated Id matches: \" + createdUserId, function () {",
													"    pm.expect(jsonData.id).to.eql(createdUserId);",
													"});",
													"",
													"pm.test(\"Check previously created UserName with id \" + userName, function () {",
													"    pm.expect(jsonData.name).to.eql(userName);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{administratorUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/User/{{createdUserId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"User",
												"{{createdUserId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "User-UpdateUser-Administrator",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "207ef1fa-b4c6-4be3-8a49-e6e47714e61e",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"var userName = pm.environment.get(\"userNameUpdated\");",
													"pm.environment.set(\"userName\", userName);",
													"",
													"var jsonData = pm.response.json();",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.ok;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Check if updated username matches: \" + userName, function () {",
													"    pm.expect(jsonData.name).to.eql(userName);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{administratorUserIdentityId}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"name\": \"{{userNameUpdated}}\",\r\n  \"email\": \"postmantest_email\",\r\n  \"identityId\": \"{{createdUserIdentityId}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/User/{{createdUserId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"User",
												"{{createdUserId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "User-GetUpdatedUser-Administrator",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a43f9b30-faa7-4725-97c4-96864758c6ae",
												"exec": [
													"var createdUserId = parseInt(pm.environment.get(\"createdUserId\"));",
													"var createdUserIdentityId = pm.environment.get(\"createdUserIdentityId\");",
													"var userName = pm.environment.get(\"userName\")",
													"",
													"var jsonData = pm.response.json();",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Check if updated identity Id matches: \" + createdUserIdentityId, function () {",
													"    pm.expect(jsonData.identityId).to.eql(createdUserIdentityId);",
													"});",
													"",
													"pm.test(\"Check if updated Id matches: \" + createdUserId, function () {",
													"    pm.expect(jsonData.id).to.eql(createdUserId);",
													"});",
													"",
													"pm.test(\"Check if updated username matches: \" + userName, function () {",
													"    pm.expect(jsonData.name).to.eql(userName);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{administratorUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/User/{{createdUserId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"User",
												"{{createdUserId}}"
											],
											"query": [
												{
													"key": "",
													"value": "",
													"disabled": true
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "User-GetUser-Self-Administrator",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a06503d1-9b2f-4f6b-ad13-04887c706f06",
												"exec": [
													"var administratorUserIdentityId = parseInt(pm.environment.get(\"administratorUserIdentityId\"));",
													"",
													"var jsonData = pm.response.json();",
													"pm.environment.set(\"administratorUserId\", jsonData.id);",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.ok;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Identity ID is correct and matching: \" + administratorUserIdentityId, function () {",
													"    pm.expect(parseInt(jsonData.identityId)).to.eql(administratorUserIdentityId);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{administratorUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/User",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"User"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "FollowUser",
							"item": [
								{
									"name": "User-FollowUser-Administrator",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e99743f7-21d0-4257-a1a0-ee6493aca7ac",
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"var userIdToFollow = pm.environment.get(\"userIdToFollow\");",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.success;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Check if created Username matches: \" + userIdToFollow, function () {",
													"    pm.expect(jsonData.id).to.eql(userIdToFollow);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{administratorUserIdentityId}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/User/follow/{{userIdToFollow}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"User",
												"follow",
												"{{userIdToFollow}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "User-UnFollowUser-Administrator",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "00502144-c029-414c-92e1-e612374b0d96",
												"exec": [
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{administratorUserIdentityId}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/User/follow/{{userIdToFollow}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"User",
												"follow",
												"{{userIdToFollow}}"
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "182be8dc-593a-4836-b6b8-0a4d25ec69ae",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "626120c0-680b-4074-b5a2-02691e58816b",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Project",
							"item": [
								{
									"name": "Project-CreateProject-Administrator",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c7cd486b-0a4b-4b9a-bc10-827a9f9ef47b",
												"exec": [
													"var administratorUserId = parseInt(pm.environment.get(\"administratorUserId\"));",
													"var projectName = pm.environment.get(\"projectName\");",
													"var adminUserName = pm.environment.get(\"adminUserName\");",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.environment.set(\"projectId\", jsonData.id);",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.success;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Project Name is set correctly and matching: \" + projectName, function () {",
													"    pm.expect(jsonData.name).to.eql(projectName);",
													"});",
													"",
													"pm.test(\"User Name is correct and matching: \" + adminUserName, function () {",
													"    pm.expect(jsonData.user.name).to.eql(adminUserName);",
													"});",
													"",
													"pm.test(\"Identity ID is correct and matching: \" + administratorUserId, function () {",
													"    pm.expect(parseInt(jsonData.user.id)).to.eql(administratorUserId);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{administratorUserIdentityId}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"name\": \"{{projectName}}\",\r\n  \"description\": \"postmantest_description\",\r\n  \"shortDescription\": \"postmantest_shortdesc\",\r\n  \"uri\": \"postmantest_uri\",\r\n  \"collaborators\": [\r\n    {\r\n      \"fullName\": \"postmantest_collfullname\",\r\n      \"role\": \"postmantest_collrole\"\r\n    }\r\n  ],\r\n  \"created\": \"2020-04-20T08:24:26.693Z\",\r\n  \"updated\": \"2020-04-20T08:24:26.693Z\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/Project",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Project"
											]
										}
									},
									"response": []
								},
								{
									"name": "Project-GetAllProjects-Administrator",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e3fa0210-f249-4d44-a4e8-3a63bfe82401",
												"exec": [
													"var projectName = pm.environment.get(\"projectName\");",
													"",
													"var jsonData = pm.response.json();",
													"",
													"var foundAt;",
													"",
													"function findProject(jsonData, name) {",
													"    for (var i = 0; i < jsonData.results.length; i++) {",
													"        if (jsonData.results[i].name == name) {",
													"            return i;",
													"        }",
													"    }",
													"    return -1;",
													"}",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Project: \" + projectName + \" is in list\", function () {",
													"    foundAt = findProject(jsonData, projectName);",
													"    pm.expect(foundAt).to.not.eql(-1);",
													"});",
													"",
													"pm.test(\"Project Name is set correctly and matching: \" + projectName, function () {",
													"    pm.expect(jsonData.results[foundAt].name).to.eql(projectName);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{administratorUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Project",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Project"
											]
										}
									},
									"response": []
								},
								{
									"name": "Project-GetProject-Administrator",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d55f9d93-72bc-46dd-a204-d38dcb0cc3ba",
												"exec": [
													"var projectId = parseInt(pm.environment.get(\"projectId\"));",
													"var projectName = pm.environment.get(\"projectName\");",
													"var administratorUserId = parseInt(pm.environment.get(\"administratorUserId\"));",
													"var adminUserName = pm.environment.get(\"adminUserName\");",
													"",
													"var jsonData = pm.response.json();",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"ProjectName is set correctly and matching: \" + projectName, function () {",
													"    pm.expect(jsonData.name).to.eql(projectName);",
													"});",
													"",
													"pm.test(\"User Name is correct and matching: \" + adminUserName, function () {",
													"    pm.expect(jsonData.user.name).to.eql(adminUserName);",
													"});",
													"",
													"pm.test(\"Identity ID is correct and matching: \" + administratorUserId, function () {",
													"    pm.expect(parseInt(jsonData.user.id)).to.eql(administratorUserId);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{administratorUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Project/{{projectId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Project",
												"{{projectId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Project-UpdateProject-Administrator",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "47f389d0-ad57-4b04-b7bb-9f17cb7c5d1c",
												"exec": [
													"var projectName = pm.environment.get(\"projectNameUpdated\");",
													"pm.environment.set(\"projectName\", projectName);",
													"",
													"var jsonData = pm.response.json();",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.ok;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Project Name is set correctly and matching: \" + projectName, function () {",
													"    pm.expect(jsonData.name).to.eql(projectName);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{administratorUserIdentityId}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"name\": \"{{projectNameUpdated}}\",\r\n  \"description\": \"postmantest_description\",\r\n  \"shortDescription\": \"postmantest_shortdesc\",\r\n  \"uri\": \"postmantest_uri\",\r\n  \"collaborators\": [\r\n    {\r\n      \"fullName\": \"postmantest_collfullname\",\r\n      \"role\": \"postmantest_collrole\"\r\n    }\r\n  ],\r\n  \"created\": \"2020-04-20T08:24:26.693Z\",\r\n  \"updated\": \"2020-04-20T08:24:26.693Z\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/Project/{{projectId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Project",
												"{{projectId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Project-GetUpdatedProject-Administrator",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b768cbe4-afe4-4b4e-8036-2044b84c9283",
												"exec": [
													"var administratorUserId = parseInt(pm.environment.get(\"administratorUserId\"));",
													"var projectName = pm.environment.get(\"projectName\");",
													"var adminUserName = pm.environment.get(\"adminUserName\");",
													"",
													"var jsonData = pm.response.json();",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"ProjectName is set correctly and matching: \" + projectName, function () {",
													"    pm.expect(jsonData.name).to.eql(projectName);",
													"});",
													"",
													"pm.test(\"User Name is correct and matching: \" + adminUserName, function () {",
													"    pm.expect(jsonData.user.name).to.eql(adminUserName);",
													"});",
													"",
													"pm.test(\"Identity ID is correct and matching: \" + administratorUserId, function () {",
													"    pm.expect(parseInt(jsonData.user.id)).to.eql(administratorUserId);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{administratorUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Project/{{projectId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Project",
												"{{projectId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Project-GetProject-NonExisting-Administrator",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "fb303c9f-73bb-4013-9edf-e0a3839e6f9e",
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 404\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"    pm.response.to.be.notFound;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{administratorUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Project/98989",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Project",
												"98989"
											]
										}
									},
									"response": []
								},
								{
									"name": "Project-LikeProject-Administrator",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "958a257e-ad1c-430b-b9c6-7efbaab524e8",
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"eval(pm.environment.get(\"commonTests\"))();\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Response must be valid and have a json body\", function () {\r",
													"     pm.response.to.be.ok;\r",
													"     pm.response.to.be.withBody;\r",
													"     pm.response.to.be.json;\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "IdentityId",
												"value": "{{administratorUserIdentityId}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Project/like/{{projectId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Project",
												"like",
												"{{projectId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Project-DeleteLikeProject-Administrator",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d2e82245-39b3-4024-9191-5f5597f1f3bb",
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"eval(pm.environment.get(\"commonTests\"))();\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Response must be valid and have a json body\", function () {\r",
													"     pm.response.to.be.ok;\r",
													"     pm.response.to.be.withBody;\r",
													"     pm.response.to.be.json;\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "IdentityId",
												"value": "{{administratorUserIdentityId}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Project/like/{{projectId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Project",
												"like",
												"{{projectId}}"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "FollowProject",
							"item": [
								{
									"name": "Project-FollowProject-Administrator",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3fd21471-0c7f-42b7-bd64-eae331644879",
												"exec": [
													"var jsonData = pm.response.json();",
													"var projectId = pm.environment.get(\"projectIdToFollow\");",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.success;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Check if created Username matches: \" + projectId, function () {",
													"    pm.expect(jsonData.id).to.eql(projectId);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{administratorUserIdentityId}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/project/follow/{{projectIdToFollow}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"project",
												"follow",
												"{{projectIdToFollow}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Project-UnFollowProject-Administrator",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "8493161b-c384-4287-8c45-3efda4ff37d1",
												"exec": [
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{administratorUserIdentityId}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/project/follow/{{projectIdToFollow}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"project",
												"follow",
												"{{projectIdToFollow}}"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Highlight",
							"item": [
								{
									"name": "Highlight-CreateHighlight-Administrator",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b5ba197b-5fb3-4331-b51e-ac70be5d58f6",
												"exec": [
													"var identityId = parseInt(pm.environment.get(\"identityId\"));",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.environment.set(\"highlightId\", jsonData.id);",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.success;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "e32e3b75-293b-412f-bef3-531524b335d7",
												"exec": [
													"var current_timestamp = new Date();\r",
													"postman.setEnvironmentVariable(\"current_timestamp\", current_timestamp.toISOString());\r",
													"\r",
													"var future_timestamp = new Date(Date.now() +(2 * 86400000));\r",
													"postman.setEnvironmentVariable(\"future_timestamp\", future_timestamp.toISOString());\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{administratorUserIdentityId}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"projectId\": {{projectId}},\r\n  \"startDate\": \"{{current_timestamp}}\",\r\n  \"endDate\": \"{{future_timestamp}}\",\r\n  \"description\" : \"Lorem Ipsum\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/Highlight",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Highlight"
											]
										}
									},
									"response": []
								},
								{
									"name": "Highlight-GetAllActiveHighlights-Administrator",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d26bfd80-3f81-49ac-a8d8-bbecab6a91b2",
												"exec": [
													"var projectId = pm.environment.get(\"projectId\");",
													"",
													"var jsonData = pm.response.json();",
													"",
													"var foundAt;",
													"",
													"function findItem(jsonData, item) {",
													"    for (var i = 0; i < jsonData.length; i++) {",
													"        if (jsonData[i].projectId == item) {",
													"            return i;",
													"        }",
													"    }",
													"    return -1;",
													"}",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Highlight is in list and matching: \" + projectId, function () {",
													"    foundAt = findItem(jsonData, projectId);",
													"    pm.expect(foundAt).to.not.eql(-1);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"value": "{{administratorUserIdentityId}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Highlight",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Highlight"
											]
										}
									},
									"response": []
								},
								{
									"name": "Highlight-GetHighlight-Administrator",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "41d06c1c-5d3d-4e7d-8b90-fe3966f732ae",
												"exec": [
													"var identityId = parseInt(pm.environment.get(\"identityId\"));",
													"var highlightId = parseInt(pm.environment.get(\"highlightId\"));",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.environment.set(\"highlightStartDate\", jsonData.startDate);",
													"pm.environment.set(\"highlightEndDate\", jsonData.endDate);",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Highlight Id matches: \" + highlightId, function () {",
													"    pm.expect(jsonData.id).to.eql(highlightId);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"value": "{{administratorUserIdentityId}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Highlight/{{highlightId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Highlight",
												"{{highlightId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Highlight-GetHighlight-ByProject-Administrator",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4284007c-0aaf-463c-a63c-74b193d57d43",
												"exec": [
													"var identityId = parseInt(pm.environment.get(\"identityId\"));",
													"var projectId = parseInt(pm.environment.get(\"projectId\"));",
													"var highlightId = parseInt(pm.environment.get(\"highlightId\"));",
													"",
													"var jsonData = pm.response.json();",
													"",
													"var foundAt;",
													"",
													"function findHighlightId(jsonData, item) {",
													"    for (var i = 0; i < jsonData.length; i++) {",
													"        if (jsonData[i].id == item) {",
													"            return i;",
													"        }",
													"    }",
													"    return -1;",
													"}",
													"",
													"function findProjectId(jsonData, item) {",
													"    for (var i = 0; i < jsonData.length; i++) {",
													"        if (jsonData[i].projectId == item) {",
													"            return i;",
													"        }",
													"    }",
													"    return -1;",
													"}",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Project is in list and matching: \" + projectId, function () {",
													"    foundAt = findProjectId(jsonData, projectId);",
													"    pm.expect(foundAt).to.not.eql(-1);",
													"});",
													"",
													"pm.test(\"Highlight is in list and matching:\" + highlightId, function () {",
													"    foundAt = findHighlightId(jsonData, highlightId);",
													"    pm.expect(foundAt).to.not.eql(-1);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{administratorUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Highlight/Project/{{projectId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Highlight",
												"Project",
												"{{projectId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Highlight-UpdateHighlight-Administrator",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "cd92bcf3-7c77-4298-ac67-3495f94c57cd",
												"exec": [
													"var highlightStartDate = pm.environment.get(\"highlightStartDate\");",
													"var highlightId = parseInt(pm.environment.get(\"highlightId\"));",
													"",
													"var jsonData = pm.response.json();",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.ok;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Highlight Id matches: \" + highlightId, function () {",
													"    pm.expect(jsonData.id).to.eql(highlightId);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "b8ee06bd-363f-42f8-8b72-2055ab337682",
												"exec": [
													"var current_timestamp = new Date();\r",
													"postman.setEnvironmentVariable(\"current_timestamp\", current_timestamp.toISOString());"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{administratorUserIdentityId}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"projectId\": \"{{projectId}}\",\r\n  \"startDate\": \"{{current_timestamp}}\",\r\n  \"endDate\": \"{{future_timestamp}}\",\r\n  \"description\" : \"Lorem Ipsum\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/Highlight/{{highlightId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Highlight",
												"{{highlightId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Highlight-GetUpdatedHighlight-Administrator",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "51da48f1-4f42-4db6-b2cb-a52c486e4b3d",
												"exec": [
													"var highlightUpdateTimestamp = pm.environment.get(\"current_timestamp\");",
													"var highlightEndDate = pm.environment.get(\"highlightEndDate\");",
													"var highlightId = pm.environment.get(\"highlightId\");",
													"var jsonData = pm.response.json();",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Highlight Id matches: \" + highlightId, function () {",
													"    pm.expect(jsonData.id).to.eql(highlightId);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"value": "{{administratorUserIdentityId}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Highlight/{{highlightId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Highlight",
												"{{highlightId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Highlight-GetHighlight-NonExisting-Administrator",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5ad7730d-d491-4bb0-9c7c-43db6427fda9",
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 404\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"    pm.response.to.be.notFound;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json;",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{administratorUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Highlight/98989",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Highlight",
												"98989"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Embed",
							"item": [
								{
									"name": "Embed-CreateEmbed-Administrator",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "43e15476-b2c3-41df-b661-5d82102d9bb3",
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"pm.environment.set(\"embedGuid\", jsonData.guid);",
													"pm.environment.set(\"embeddedProjectId\", jsonData.project.id);",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.success;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{administratorUserIdentityId}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"projectId\": {{projectId}}\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/Embed",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Embed"
											]
										}
									},
									"response": []
								},
								{
									"name": "Embed-GetAllEmbeds-Administrator",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "73cc0a0f-7f12-4374-87be-ddcafe054341",
												"exec": [
													"var embedGuid = pm.environment.get(\"embedGuid\");",
													"",
													"var jsonData = pm.response.json();",
													"",
													"var foundAt;",
													"",
													"function findItem(jsonData, item) {",
													"    for (var i = 0; i < jsonData.length; i++) {",
													"        if (jsonData[i].guid == item) {",
													"            return i;",
													"        }",
													"    }",
													"    return -1;",
													"}",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Embed is in list and matches: \" + embedGuid, function () {",
													"    foundAt = findItem(jsonData, embedGuid);",
													"    pm.expect(foundAt).to.not.eql(-1);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{administratorUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Embed",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Embed"
											]
										}
									},
									"response": []
								},
								{
									"name": "Embed-GetEmbed-Administrator",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e78fea04-4f87-47c2-ae94-c2f97f4311bb",
												"exec": [
													"var embeddedProjectId = parseInt(pm.environment.get(\"embeddedProjectId\"))",
													"",
													"var jsonData = pm.response.json();",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Embed matches: \" + embeddedProjectId, function () {",
													"    pm.expect(jsonData.id).to.eql(embeddedProjectId);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{administratorUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Embed/{{embedGuid}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Embed",
												"{{embedGuid}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Embed-GetEmbed-NonExisting-Administrator",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f4e4c574-ab1c-4a01-9163-8fdb5983250e",
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 404\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"    pm.response.to.be.notFound;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json;",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{administratorUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Embed/cdaadc49-b4b9-4c11-8937-e602174cba30",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Embed",
												"cdaadc49-b4b9-4c11-8937-e602174cba30"
											]
										}
									},
									"response": []
								},
								{
									"name": "Embed-GetEmbed-NonExisting-NoGUID-Administrator",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6b9dda1d-6212-4c2b-8eb5-e50ee5ca8afa",
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 404\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"    pm.response.to.be.notFound;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json;",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{administratorUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Embed/98989",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Embed",
												"98989"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Role",
							"item": [
								{
									"name": "Role-CreateRole-Administrator",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6db7921f-98d6-4127-8fb4-9378b211ef79",
												"exec": [
													"var scopeName = pm.environment.get(\"scopeName\");",
													"var roleName = pm.environment.get(\"roleName\");",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.environment.set(\"roleId\", jsonData.id);",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.success;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Role Name is set correctly and matching: \" + roleName, function () {",
													"    pm.expect(jsonData.name).to.eql(roleName);",
													"});",
													"",
													"pm.test(\"Scope is correct and matching: \" + scopeName, function () {",
													"    pm.expect(jsonData.scopes.scope).to.eql(scopeName);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{administratorUserIdentityId}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"name\": \"{{roleName}}\",\r\n  \"scopes\": [\r\n    {\r\n      \"scope\": \"EmbedWrite\"\r\n    }\r\n  ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/Role",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Role"
											]
										}
									},
									"response": []
								},
								{
									"name": "Role-GetAllRoles-Administrator",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "254b9e3a-31e0-443e-9f56-a69149b198f9",
												"exec": [
													"var roleName = pm.environment.get(\"roleName\");",
													"",
													"var jsonData = pm.response.json();",
													"",
													"var foundAt;",
													"",
													"function findProject(jsonData, name) {",
													"    for (var i = 0; i < jsonData.length; i++) {",
													"        if (jsonData[i].name == name) {",
													"            return i;",
													"        }",
													"    }",
													"    return -1;",
													"}",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Role: \" + roleName + \" is in list\", function () {",
													"    foundAt = findProject(jsonData, roleName);",
													"    pm.expect(foundAt).to.not.eql(-1);",
													"});",
													"",
													"pm.test(\"Role Name is set correctly with matching: \" + roleName, function () {",
													"    pm.expect(jsonData[foundAt].name).to.eql(roleName);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{administratorUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Role",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Role"
											]
										}
									},
									"response": []
								},
								{
									"name": "Scope-GetAllScopes-Administrator",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "72fab17f-8d43-498d-8aa8-ffa376d8faf0",
												"exec": [
													"var identityId = parseInt(pm.environment.get(\"identityId\"));",
													"var projectName = pm.environment.get(\"projectName\");",
													"",
													"var jsonData = pm.response.json();",
													"",
													"var foundAt;",
													"",
													"function findProject(jsonData, name) {",
													"    for (var i = 0; i < jsonData.length; i++) {",
													"        if (jsonData[i].name == name) {",
													"            return i;",
													"        }",
													"    }",
													"    return -1;",
													"}",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{administratorUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Role/Scopes",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Role",
												"Scopes"
											]
										}
									},
									"response": []
								},
								{
									"name": "Role-GetRole-Administrator",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d045639c-9cb7-4471-95c6-800b3ebdc07c",
												"exec": [
													"var roleId = parseInt(pm.environment.get(\"roleId\"));",
													"var roleName = pm.environment.get(\"roleName\");",
													"",
													"var jsonData = pm.response.json();",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Role Name is set correctly\", function () {",
													"    pm.expect(jsonData.name).to.eql(roleName);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{administratorUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Role/{{roleId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Role",
												"{{roleId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Role-UpdateRole-Administrator",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "9a69f5d0-ba2a-48fd-97a5-961b266a41e9",
												"exec": [
													"var updatedRoleName = pm.environment.get(\"updatedRoleName\");",
													"",
													"var jsonData = pm.response.json();",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.ok;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Role Name is set correctly\", function () {",
													"    pm.expect(jsonData.name).to.eql(updatedRoleName);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{administratorUserIdentityId}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"name\": \"{{updatedRoleName}}\",\r\n  \"scopes\": [\r\n    {\r\n      \"scope\": \"EmbedWrite\"\r\n    }\r\n  ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/Role/{{roleId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Role",
												"{{roleId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Role-GetUpdatedRole-Administrator",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "628464ed-313f-44f8-aa95-ca90d77fee2a",
												"exec": [
													"var updatedRoleName = pm.environment.get(\"updatedRoleName\");",
													"",
													"var jsonData = pm.response.json();",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Role Name is set correctly and matches: \" + updatedRoleName, function () {",
													"    pm.expect(jsonData.name).to.eql(updatedRoleName);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{administratorUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Role/{{roleId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Role",
												"{{roleId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Role-SetRole-Administrator",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "650d902f-63ab-4d42-804b-c3b2791c92b2",
												"exec": [
													"var roleId = parseInt(pm.environment.get(\"roleId\"));",
													"",
													"var jsonData = pm.response.json();",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.ok;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Role is set correctly and matches: \" + roleId, function () {",
													"    pm.expect(jsonData.role.id).to.eql(roleId);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{administratorUserIdentityId}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"createdUserId\": {{createdUserId}},\r\n  \"name\": \"{{projectNameUpdated}}\",\r\n  \"description\": \"postmantest_description\",\r\n  \"shortDescription\": \"postmantest_shortdesc\",\r\n  \"uri\": \"postmantest_uri\",\r\n  \"collaborators\": [\r\n    {\r\n      \"fullName\": \"postmantest_collfullname\",\r\n      \"role\": \"postmantest_collrole\"\r\n    }\r\n  ],\r\n  \"created\": \"2020-04-20T08:24:26.693Z\",\r\n  \"updated\": \"2020-04-20T08:24:26.693Z\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/Role/setRole?userId={{createdUserId}}&roleId={{roleId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Role",
												"setRole"
											],
											"query": [
												{
													"key": "userId",
													"value": "{{createdUserId}}",
													"description": "Id of the user that we want to update"
												},
												{
													"key": "roleId",
													"value": "{{roleId}}",
													"description": "Id of the role that you want to update the user with"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "User-GetRole-Administrator",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2b6f32ff-54b3-4b74-9e35-74505a683a96",
												"exec": [
													"var roleId = parseInt(pm.environment.get(\"roleId\"));",
													"",
													"var jsonData = pm.response.json();",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Check if user has role that matches: \" + roleId, function () {",
													"    pm.expect(jsonData.role.id).to.eql(roleId);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{administratorUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/User/{{createdUserId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"User",
												"{{createdUserId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Role-GetRole-NonExisting-Administrator",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f3dce3f2-0fbb-4285-b8ca-f7cffee6b55e",
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 404\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"    pm.response.to.be.notFound;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json;",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{administratorUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Role/98989",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Role",
												"98989"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Search",
							"item": [
								{
									"name": "Search-SearchInternal-Administrator",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "785f42fc-2f76-410a-a88b-ba65aec88baf",
												"exec": [
													"var projectName = pm.environment.get(\"projectName\");",
													"",
													"var jsonData = pm.response.json();",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.ok;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Project Name is set correctly and matching: \" + projectName, function () {",
													"    pm.expect(jsonData.results[0].name).to.eql(projectName);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{administratorUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Search/internal/{{projectId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Search",
												"internal",
												"{{projectId}}"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Wizard",
							"item": [
								{
									"name": "Wizard-GetWizard-Administrator",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "545989d9-ede0-4560-bdbb-74d3227b6dca",
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{administratorUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Wizard?sourceURI={{wizardSourceUri}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Wizard"
											],
											"query": [
												{
													"key": "sourceURI",
													"value": "{{wizardSourceUri}}",
													"description": "This is the URI that the wizard will use to fetch the source."
												}
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Institution",
							"item": [
								{
									"name": "Institution-CreateInstitution-Administrator",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "eabf4cbd-2cbc-4285-b2c3-68f8c3e1bd29",
												"exec": [
													"var institutionName = pm.environment.get(\"institutionName\");",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.environment.set(\"createdInstitutionId\", jsonData.id);",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.success;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Check if created Name matches: \" + institutionName, function () {",
													"    pm.expect(jsonData.name).to.eql(institutionName);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{administratorUserIdentityId}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"{{institutionName}}\",\n    \"description\": \"postmantest_initial_description\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/Institution",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Institution"
											]
										}
									},
									"response": []
								},
								{
									"name": "Institution-GetInstitution-Administrator",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ee816fe2-1781-4af8-b528-068774850411",
												"exec": [
													"var createdInstitutionId = parseInt(pm.environment.get(\"createdInstitutionId\"));",
													"var institutionName = pm.environment.get(\"institutionName\");",
													"",
													"var jsonData = pm.response.json();",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Check if updated Id matches: \" + createdInstitutionId, function () {",
													"    pm.expect(jsonData.id).to.eql(createdInstitutionId);",
													"});",
													"",
													"pm.test(\"Check previously created UserName with id \" + institutionName, function () {",
													"    pm.expect(jsonData.name).to.eql(institutionName);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{administratorUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Institution/{{createdInstitutionId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Institution",
												"{{createdInstitutionId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Institution-UpdateInstitution-Administrator",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "9154a9c9-8882-48e2-a572-dcb756860de6",
												"exec": [
													"var institutionName = pm.environment.get(\"updatedInstitutionName\");",
													"pm.environment.set(\"institutionName\", institutionName);",
													"",
													"var jsonData = pm.response.json();",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.ok;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Check if updated Institution Name matches: \" + institutionName, function () {",
													"    pm.expect(jsonData.name).to.eql(institutionName);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{administratorUserIdentityId}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"name\": \"{{updatedInstitutionName}}\",\r\n  \"description\": \"postmantest_updated_description\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/Institution/{{createdInstitutionId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Institution",
												"{{createdInstitutionId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Institution-GetUpdatedInstitution-Administrator",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d9f41f96-6d23-42d2-a54d-cac2579e3514",
												"exec": [
													"var createdInstitutionId = parseInt(pm.environment.get(\"createdInstitutionId\"));",
													"var institutionName = pm.environment.get(\"institutionName\")",
													"",
													"var jsonData = pm.response.json();",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Check if updated Institution Id matches: \" + createdInstitutionId, function () {",
													"    pm.expect(jsonData.id).to.eql(createdInstitutionId);",
													"});",
													"",
													"pm.test(\"Check if updated institution matches: \" + institutionName, function () {",
													"    pm.expect(jsonData.name).to.eql(institutionName);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{administratorUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Institution/{{createdInstitutionId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Institution",
												"{{createdInstitutionId}}"
											],
											"query": [
												{
													"key": "",
													"value": "",
													"disabled": true
												}
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "CallToActionOption",
							"item": [
								{
									"name": "CallToActionOption-CreateCallToActionOption-Administrator",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5aa8c498-f397-4f87-9f37-9d9609b78e2b",
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"pm.environment.set(\"callToActionOptionId\", jsonData.id);",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.success;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Call to action option type is lowercase\", function () {",
													"    pm.expect(jsonData.type).to.eql(jsonData.type.toLowerCase());",
													"});",
													"",
													"pm.test(\"Call to action option value is lowercase\", function () {",
													"    pm.expect(jsonData.value).to.eql(jsonData.value.toLowerCase());",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{administratorUserIdentityId}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"type\": \"Title\",\r\n  \"value\": \"Collaborate\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/CallToActionOption",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"CallToActionOption"
											]
										}
									},
									"response": []
								},
								{
									"name": "CallToActionOption-GetAllCallToActionOptions-Administrator",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6d0a035e-3994-4f58-9e21-0d11cdba7362",
												"exec": [
													"var optionId = parseInt(pm.environment.get(\"callToActionOptionId\"));",
													"",
													"var jsonData = pm.response.json();",
													"",
													"var foundAt;",
													"",
													"function findOption(jsonData, id) {",
													"    for (var i = 0; i < jsonData.length; i++) {",
													"        if (jsonData[i].id == id) {",
													"            return i;",
													"        }",
													"    }",
													"    return -1;",
													"}",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.ok;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Call to action option with id: \" + optionId + \" is in list\", function () {",
													"    foundAt = findOption(jsonData, optionId);",
													"    pm.expect(foundAt).to.not.eql(-1);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{administratorUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/CallToActionOption",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"CallToActionOption"
											]
										}
									},
									"response": []
								},
								{
									"name": "CallToActionOption-GetCallToActionOptionById-Administrator",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a6d96df4-6517-4756-9f7d-495c40d1bd34",
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"pm.environment.set(\"callToActionOptionType\", jsonData.type);",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.ok;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Call to action option type is lowercase\", function () {",
													"    pm.expect(jsonData.type).to.eql(jsonData.type.toLowerCase());",
													"});",
													"",
													"pm.test(\"Call to action option value is lowercase\", function () {",
													"    pm.expect(jsonData.value).to.eql(jsonData.value.toLowerCase());",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{administratorUserIdentityId}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"type\": \"Title\",\r\n  \"value\": \"Collaborate\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/CallToActionOption/{{callToActionOptionId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"CallToActionOption",
												"{{callToActionOptionId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "CallToActionOption-GetCallToActionOptionByType-Administrator",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "7dd83fdc-181c-4ed2-b07f-96870aa1b451",
												"exec": [
													"var callToActionOptionId = parseInt(pm.environment.get(\"callToActionOptionId\"));",
													"",
													"var jsonData = pm.response.json();",
													"",
													"function findOptionType(jsonData, id) {",
													"    for (var i = 0; i < jsonData.length; i++) {",
													"        if (jsonData[i].id == id) {",
													"            return i;",
													"        }",
													"    }",
													"    return -1;",
													"}",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.ok;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Call to action option id is \" + callToActionOptionId, function() {",
													"    foundAt = findOptionType(jsonData, callToActionOptionId);",
													"    pm.expect(foundAt).to.not.eql(-1);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{administratorUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/CallToActionOption/type/{{callToActionOptionType}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"CallToActionOption",
												"type",
												"{{callToActionOptionType}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "CallToActionOption-UpdateCallToActionOption-Administrator",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "bc5781d5-229e-4d0e-bb3f-f336fb13bdbb",
												"exec": [
													"var updatedCallToActionType = pm.environment.get(\"updatedCallToActionType\");",
													"var updatedCallToActionValue = pm.environment.get(\"updatedCallToActionValue\");",
													"pm.environment.set(\"callToActionOptionType\", updatedCallToActionType);",
													"",
													"var jsonData = pm.response.json();",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.ok;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Check if updated Call to action Type matches: \" + updatedCallToActionType, function () {",
													"    pm.expect(jsonData.type).to.eql(updatedCallToActionType);",
													"});",
													"",
													"pm.test(\"Check if updated Call to action Value matches: \" + updatedCallToActionValue, function () {",
													"    pm.expect(jsonData.value).to.eql(updatedCallToActionValue);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{administratorUserIdentityId}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"type\": \"{{updatedCallToActionType}}\",\r\n    \"value\": \"{{updatedCallToActionValue}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/CallToActionOption/{{callToActionOptionId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"CallToActionOption",
												"{{callToActionOptionId}}"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Cleanup",
							"item": [
								{
									"name": "Embed-DeleteEmbed-Administrator",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d095c8f2-1ec5-477c-9b37-76bf7c98f61d",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{administratorUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Embed/{{embedGuid}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Embed",
												"{{embedGuid}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Highlight-DeleteHighlight-Administrator",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "be233e38-382e-4f2f-a164-816f28590b68",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{administratorUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Highlight/{{highlightId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Highlight",
												"{{highlightId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Project-DeleteProject-Administrator",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "8e2d5a07-78f9-4b41-9870-face39602de3",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{administratorUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Project/{{projectId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Project",
												"{{projectId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Institution-DeleteInstitution-Administrator",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "8ea5585f-3eab-4947-90de-38024adbc877",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{administratorUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Institution/{{createdInstitutionId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Institution",
												"{{createdInstitutionId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Role-DeleteRole-WithUsers-Administrator",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "140d9d19-c27e-4669-84c3-08e8b9c47f19",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"",
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{administratorUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Role/{{roleId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Role",
												"{{roleId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "User-DeleteUser-Administrator",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "632f3dbd-0318-4e61-a3f5-70b51406efc0",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{administratorUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/User/{{createdUserId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"User",
												"{{createdUserId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Role-DeleteRole-Administrator",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e151e716-6faf-4458-b394-0a672cd528e4",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{administratorUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Role/{{roleId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Role",
												"{{roleId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "CallToActionOption-DeleteCallToActionOption-Administrator",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "9bc503e0-3417-4d44-b338-31686c86121b",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{administratorUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/CallToActionOption/{{callToActionOptionId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"CallToActionOption",
												"{{callToActionOptionId}}"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Checkup-on-Cleanup",
							"item": [
								{
									"name": "Project-Get-Deleted-Project-Administrator",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "563a1c4a-a803-411d-a711-464f99ba7901",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"",
													"pm.test(\"Status code is 404\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"    pm.response.to.be.notFound;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{administratorUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Project/{{projectId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Project",
												"{{projectId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "User-Get-Deleted-User-Administrator",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "969d3aa7-1d66-4630-ab8f-1cbfbe790678",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"",
													"pm.test(\"Status code is 404\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"    pm.response.to.be.notFound;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{administratorUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/User/{{createdUserId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"User",
												"{{createdUserId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Role-Get-Deleted-Role-Administrator",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "32393ee5-cfe8-4aa2-88c9-66c0341dd1ca",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"",
													"pm.test(\"Status code is 404\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"    pm.response.to.be.notFound;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{administratorUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Role/{{roleId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Role",
												"{{roleId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Embed-Get-Deleted-Embed-Administrator",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b37dd53e-109a-446d-93f3-f6ae51b846bc",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"",
													"pm.test(\"Status code is 404\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"    pm.response.to.be.notFound;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{administratorUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Embed/{{embedGuid}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Embed",
												"{{embedGuid}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Highlight-Get-Deleted-Highlight-Administrator",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4cfad317-c04c-4102-9730-d26c5e9771b2",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"",
													"pm.test(\"Status code is 404\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"    pm.response.to.be.notFound;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{administratorUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Highlight/{{highlightId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Highlight",
												"{{highlightId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Institution-Get-Deleted-Institution-Administrator",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "55163296-3c0c-407c-82d4-4fa06eec7418",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"",
													"pm.test(\"Status code is 404\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"    pm.response.to.be.notFound;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{administratorUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Institution/{{createdInstitutionId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Institution",
												"{{createdInstitutionId}}"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "File",
							"item": [
								{
									"name": "File-CreateFile-Administrator",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "81f81858-eec6-43af-aad7-520515ec272b",
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.environment.set(\"adminFileId\", jsonData.id)\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Response time is less than 800ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(800);\r",
													"});\r",
													"\r",
													"pm.test(\"Response must be valid and have a json body\", function () {\r",
													"     pm.response.to.be.success;\r",
													"     pm.response.to.be.withBody;\r",
													"     pm.response.to.be.json;\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "IdentityId",
												"value": "{{administratorUserIdentityId}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "File",
													"type": "file",
													"src": "Postman/testimage.png"
												}
											]
										},
										"url": {
											"raw": "{{apiUrl}}/api/File",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"File"
											]
										}
									},
									"response": []
								},
								{
									"name": "Files-GetAll-Adminstrator",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2b6a5260-2fac-4559-9fcf-cef76c0f9cd8",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);\r",
													"});\r",
													"\r",
													"pm.test(\"Response must be valid and have a json body\", function () {\r",
													"     pm.response.to.be.success;\r",
													"     pm.response.to.be.withBody;\r",
													"     pm.response.to.be.json;\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{administratorUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/File",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"File"
											]
										}
									},
									"response": []
								},
								{
									"name": "File-Delete-Administrator",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "15624b56-18b1-4217-879c-df101f8a2b5f",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);\r",
													"});\r",
													"\r",
													"pm.test(\"Response must be valid\", function () {\r",
													"     pm.response.to.be.ok;\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "IdentityId",
												"value": "{{administratorUserIdentityId}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/File/{{adminFileId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"File",
												"{{adminFileId}}"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Guest",
					"item": [
						{
							"name": "Preparation",
							"item": [
								{
									"name": "Project-CreateProject",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "de068b29-76d2-4db4-b0e0-425b5801d86d",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"var administratorUserId = parseInt(pm.environment.get(\"administratorUserId\"));",
													"var projectName = pm.environment.get(\"projectName\");",
													"var adminUserName = pm.environment.get(\"adminUserName\");",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.environment.set(\"projectId\", jsonData.id);",
													"",
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.success;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});",
													"",
													"pm.test(\"Project Name is set correctly and matching: \" + projectName, function () {",
													"    pm.expect(jsonData.name).to.eql(projectName);",
													"});",
													"",
													"pm.test(\"User Name is correct and matching: \" + adminUserName, function () {",
													"    pm.expect(jsonData.user.name).to.eql(adminUserName);",
													"});",
													"",
													"pm.test(\"Identity ID is correct and matching: \" + administratorUserId, function () {",
													"    pm.expect(parseInt(jsonData.user.id)).to.eql(administratorUserId);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{administratorUserIdentityId}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"name\": \"{{projectName}}\",\r\n  \"description\": \"postmantest_description\",\r\n  \"shortDescription\": \"postmantest_shortdesc\",\r\n  \"uri\": \"postmantest_uri\",\r\n  \"collaborators\": [\r\n    {\r\n      \"fullName\": \"postmantest_collfullname\",\r\n      \"role\": \"postmantest_collrole\"\r\n    }\r\n  ],\r\n  \"created\": \"2020-04-20T08:24:26.693Z\",\r\n  \"updated\": \"2020-04-20T08:24:26.693Z\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/Project",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Project"
											]
										}
									},
									"response": []
								},
								{
									"name": "Highlight-CreateHighlight",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e2379184-13ff-474f-b12d-316415fcb661",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"var identityId = parseInt(pm.environment.get(\"identityId\"));",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.environment.set(\"highlightId\", jsonData.id);",
													"",
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.success;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "8d171794-b31e-4e4b-8456-e3ddb3e1beb8",
												"exec": [
													"var current_timestamp = new Date();\r",
													"postman.setEnvironmentVariable(\"current_timestamp\", current_timestamp.toISOString());\r",
													"\r",
													"var future_timestamp = new Date(Date.now() +(2 * 86400000));\r",
													"postman.setEnvironmentVariable(\"future_timestamp\", future_timestamp.toISOString());\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{administratorUserIdentityId}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"projectId\": {{projectId}},\r\n  \"startDate\": \"{{current_timestamp}}\",\r\n  \"endDate\": \"{{future_timestamp}}\",\r\n  \"description\" : \"Lorem Ipsum\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/Highlight",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Highlight"
											]
										}
									},
									"response": []
								},
								{
									"name": "Embed-CreateEmbed",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "04b91bd5-c35e-41cf-a11b-118971cdaf37",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.environment.set(\"embedGuid\", jsonData.guid);",
													"pm.environment.set(\"embeddedProjectId\", jsonData.project.id);",
													"",
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.success;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{administratorUserIdentityId}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"projectId\": {{projectId}}\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/Embed",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Embed"
											]
										}
									},
									"response": []
								},
								{
									"name": "CallToActionOption-CreateCallToActionOption",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c9c0b691-4ca4-436b-a6c2-7baf1e03d7bc",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.environment.set(\"callToActionOptionId\", jsonData.id);",
													"pm.environment.set(\"callToActionOptionType\", jsonData.type);",
													"",
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.success;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});",
													"",
													"pm.test(\"Call to action option type is lowercase\", function () {",
													"    pm.expect(jsonData.type).to.eql(jsonData.type.toLowerCase());",
													"});",
													"",
													"pm.test(\"Call to action option value is lowercase\", function () {",
													"    pm.expect(jsonData.value).to.eql(jsonData.value.toLowerCase());",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{administratorUserIdentityId}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"type\": \"Title\",\r\n  \"value\": \"Collaborate\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/CallToActionOption",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"CallToActionOption"
											]
										}
									},
									"response": []
								}
							],
							"description": "For some requests, we need to have data available. The variables need to be filled so the request can succeed. We put these preparation requests in this folder. We will clean them up in the cleanup folder.",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "a3319510-4c89-41e2-ab3e-26e0d617455a",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "297b1f16-dc0e-4981-a983-5bd2ec77f135",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "User",
							"item": [
								{
									"name": "User-CreateUser-Guest",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "1c2aafd0-666b-49f1-8898-6aa331326235",
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 401\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.unauthorized;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"identityId\": \"98764342123\",\n    \"name\": \"mycooltestusername\",\n    \"email\": \"postmantest_email@example.com\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/User",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"User"
											]
										}
									},
									"response": []
								},
								{
									"name": "User-GetUser-Guest",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "8a02320d-d709-4676-a4b8-e2a9686623d8",
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 401\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.unauthorized;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{apiUrl}}/api/User/1",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"User",
												"1"
											]
										}
									},
									"response": []
								},
								{
									"name": "User-UpdateUser-Guest",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2d959bd6-8ebb-49b9-9404-03def9489560",
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 401\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.unauthorized;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"name\": \"bobz\",\r\n  \"email\": \"BobSmith@email.com\",\r\n  \"identityId\": {{administratorUserIdentityId}}\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/User/1",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"User",
												"1"
											]
										}
									},
									"response": []
								},
								{
									"name": "User-DeleteUser-Guest",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "74a3024f-ff4b-48d3-8ea0-61b00ec88651",
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 401\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.unauthorized;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{apiUrl}}/api/User/1",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"User",
												"1"
											]
										}
									},
									"response": []
								}
							],
							"auth": {
								"type": "noauth"
							},
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "e058a7db-bab3-4f70-b319-f02e882ec350",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "32e60d5f-dc2a-45cd-a2f8-5519504e8dae",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "FollowUser",
							"item": [
								{
									"name": "User-FollowUser-Guest",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2a6ab3e3-4505-4fee-854c-adc7928a3685",
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 401\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/User/follow/{{userIdToFollow}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"User",
												"follow",
												"{{userIdToFollow}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "User-UnFollowUser-Guest",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "9f98267f-e0a9-4c55-acb0-139cc65913dc",
												"exec": [
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 401\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "DELETE",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/User/follow/{{userIdToFollow}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"User",
												"follow",
												"{{userIdToFollow}}"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Project",
							"item": [
								{
									"name": "Project-CreateProject-Guest",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4c524626-d6c1-4ac1-887f-b05af07c78aa",
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 401\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"    pm.response.to.be.unauthorized;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json;",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"name\": \"{{projectName}}\",\r\n  \"description\": \"postmantest_description\",\r\n  \"shortDescription\": \"postmantest_shortdesc\",\r\n  \"uri\": \"postmantest_uri\",\r\n  \"collaborators\": [\r\n    {\r\n      \"fullName\": \"postmantest_collfullname\",\r\n      \"role\": \"postmantest_collrole\"\r\n    }\r\n  ],\r\n  \"created\": \"2020-04-20T08:24:26.693Z\",\r\n  \"updated\": \"2020-04-20T08:24:26.693Z\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/Project",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Project"
											]
										}
									},
									"response": []
								},
								{
									"name": "Project-GetAllProjects-Guest",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e44c5554-b7a7-45ca-b1b6-0b81e1cb42ee",
												"exec": [
													"var projectName = pm.environment.get(\"projectName\");",
													"",
													"var jsonData = pm.response.json();",
													"",
													"var foundAt;",
													"",
													"function findProject(jsonData, name) {",
													"    for (var i = 0; i < jsonData.results.length; i++) {",
													"        if (jsonData.results[i].name == name) {",
													"            return i;",
													"        }",
													"    }",
													"    return -1;",
													"}",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Project: \" + projectName + \" is in list\", function () {",
													"    foundAt = findProject(jsonData, projectName);",
													"    pm.expect(foundAt).to.not.eql(-1);",
													"});",
													"",
													"pm.test(\"Project name is set correctly and matching: \" + projectName, function () {",
													"    pm.expect(jsonData.results[foundAt].name).to.eql(projectName);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{apiUrl}}/api/Project",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Project"
											]
										}
									},
									"response": []
								},
								{
									"name": "Project-GetProject-Guest",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "933b9f85-d70c-4564-9653-0a8790f672ed",
												"exec": [
													"var projectName = pm.environment.get(\"projectName\");",
													"",
													"var jsonData = pm.response.json();",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Project name is set correctly and matches: \" + projectName, function () {",
													"    pm.expect(jsonData.name).to.eql(projectName);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{apiUrl}}/api/Project/{{projectId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Project",
												"{{projectId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Project-UpdateProject-Guest",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b9826e64-3ab8-4275-a174-27719199a6ec",
												"exec": [
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 401\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"    pm.response.to.be.unauthorized;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"name\": \"{{projectNameUpdated}}\",\r\n  \"description\": \"postmantest_description\",\r\n  \"shortDescription\": \"postmantest_shortdesc\",\r\n  \"uri\": \"postmantest_uri\",\r\n  \"collaborators\": [\r\n    {\r\n      \"fullName\": \"postmantest_collfullname\",\r\n      \"role\": \"postmantest_collrole\"\r\n    }\r\n  ],\r\n  \"created\": \"2020-04-20T08:24:26.693Z\",\r\n  \"updated\": \"2020-04-20T08:24:26.693Z\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/Project/1",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Project",
												"1"
											]
										}
									},
									"response": []
								},
								{
									"name": "Project-DeleteProject-Guest",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d6a9d295-93f0-4f27-aaf1-e3834b09a80e",
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 401\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.unauthorized;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{apiUrl}}/api/Project/1",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Project",
												"1"
											]
										}
									},
									"response": []
								},
								{
									"name": "Project-LikeProject-Guest",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6bd221b9-668e-4b83-904e-88c8bede9087",
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"eval(pm.environment.get(\"commonTests\"))();\r",
													"\r",
													"pm.test(\"Status code is 401\", function () {\r",
													"    pm.response.to.have.status(401);\r",
													"});\r",
													"\r",
													"pm.test(\"Response must be valid and have a json body\", function () {\r",
													"     pm.response.to.be.unauthorized;\r",
													"     pm.response.to.be.withBody;\r",
													"     pm.response.to.be.json;\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [
											{
												"key": "IdentityId",
												"value": "{{administratorUserIdentityId}}",
												"type": "text",
												"disabled": true
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Project/like/{{projectId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Project",
												"like",
												"{{projectId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Project-DeleteLikeProject-Guest",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "cb722c70-349e-4a47-ab24-5164c4c1146d",
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"eval(pm.environment.get(\"commonTests\"))();\r",
													"\r",
													"pm.test(\"Status code is 401\", function () {\r",
													"    pm.response.to.have.status(401);\r",
													"});\r",
													"\r",
													"pm.test(\"Response must be valid and have a json body\", function () {\r",
													"     pm.response.to.be.unauthorized;\r",
													"     pm.response.to.be.withBody;\r",
													"     pm.response.to.be.json;\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "DELETE",
										"header": [
											{
												"key": "IdentityId",
												"value": "{{registeredUserIdentityId}}",
												"type": "text",
												"disabled": true
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Project/like/{{projectId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Project",
												"like",
												"{{projectId}}"
											]
										}
									},
									"response": []
								}
							],
							"auth": {
								"type": "noauth"
							},
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "8a9a649c-11c6-4568-ba17-012189d94993",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "903df066-7f0d-4522-9642-c1cf778d34c1",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "FollowProject",
							"item": [
								{
									"name": "Project-FollowProject-Guest",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "be10ede9-685a-4853-b783-7670e890d521",
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 401\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/project/follow/{{projectIdToFollow}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"project",
												"follow",
												"{{projectIdToFollow}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Project-UnFollowProject-Guest",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e1feba8b-29b3-44c2-89de-9a7270c9a753",
												"exec": [
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 401\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "DELETE",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/project/follow/{{projectIdToFollow}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"project",
												"follow",
												"{{projectIdToFollow}}"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Highlight",
							"item": [
								{
									"name": "Highlight-CreateHighlight-Guest",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "99797656-cf65-452b-bf65-72edd364c589",
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 401\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"    pm.response.to.be.unauthorized;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json;",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "1bc95a9b-0eb1-4350-a95a-b666910bdfab",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"projectId\": {{projectId}},\r\n  \"startDate\": \"{{current_timestamp}}\",\r\n  \"endDate\": \"{{future_timestamp}}\",\r\n  \"description\" : \"Lorem Ipsum\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/Highlight",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Highlight"
											]
										}
									},
									"response": []
								},
								{
									"name": "Highlight-GetAllActiveHighlights-Guest",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "077a6f10-3e23-46b8-83b0-471c70ef9421",
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{apiUrl}}/api/Highlight",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Highlight"
											]
										}
									},
									"response": []
								},
								{
									"name": "Highlight-GetHighlight-Guest",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e416e7fb-2924-41d4-a316-2c5b22a9b305",
												"exec": [
													"var highlightId = parseInt(pm.environment.get(\"highlightId\"));",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.environment.set(\"highlightStartDate\", jsonData.startDate);",
													"pm.environment.set(\"highlightEndDate\", jsonData.endDate);",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Highlight Id matches: \" + highlightId, function () {",
													"    pm.expect(jsonData.id).to.eql(highlightId);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{apiUrl}}/api/Highlight/{{highlightId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Highlight",
												"{{highlightId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Highlight-GetHighlight-ByProject-Guest",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "9282613d-ae20-46ab-a8c8-09b81d3eadd5",
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 401\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"    pm.response.to.be.unauthorized;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json;",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{apiUrl}}/api/Highlight/Project/{{projectId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Highlight",
												"Project",
												"{{projectId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Highlight-UpdateHighlight-Guest",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d152d98b-6e3b-401b-8a33-2815e2971979",
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 401\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"    pm.response.to.be.unauthorized;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json;",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "71c00018-83cb-41b6-9d28-37da8af29552",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"projectId\": \"{{projectId}}\",\r\n  \"startDate\": \"{{current_timestamp}}\",\r\n  \"endDate\": \"{{highlightEndDate}}\",\r\n  \"description\" : \"Lorem Ipsum\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/Highlight/{{highlightId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Highlight",
												"{{highlightId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Highlight-DeleteHighlight-Guest",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a63d2a56-a20d-414c-9045-2fdff30d9069",
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 401\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.unauthorized;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{apiUrl}}/api/Highlight/{{highlightId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Highlight",
												"{{highlightId}}"
											]
										}
									},
									"response": []
								}
							],
							"auth": {
								"type": "noauth"
							},
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "90dbb6d5-19f6-4e40-852d-99e467d92316",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "19103b8f-b81f-4b8b-87cd-78f13f6a0c96",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Embed",
							"item": [
								{
									"name": "Embed-CreateEmbed-Guest",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c9c83725-206c-43c6-ad02-80f5b005a5b4",
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 401\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.unauthorized;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"projectId\": {{projectId}}\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/Embed",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Embed"
											]
										}
									},
									"response": []
								},
								{
									"name": "Embed-GetAllEmbeds-Guest",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "54bf7eb3-25aa-4dbf-8691-b276bc494ec9",
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 401\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.unauthorized;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{apiUrl}}/api/Embed",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Embed"
											]
										}
									},
									"response": []
								},
								{
									"name": "Embed-GetEmbed-Guest",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2491240b-ae05-486c-8d91-cd3e0380d075",
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.ok;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{apiUrl}}/api/Embed/{{embedGuid}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Embed",
												"{{embedGuid}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Embed-DeleteEmbed-Guest",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "00caf28a-34db-4b52-b2ba-6828de5f0480",
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 401\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.unauthorized;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{apiUrl}}/api/Embed/{{embedGuid}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Embed",
												"{{embedGuid}}"
											]
										}
									},
									"response": []
								}
							],
							"auth": {
								"type": "noauth"
							},
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "e24bad5d-1832-4709-81af-756a7ce6dcea",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "48aae464-f5e2-42dc-98c6-a2e71ba4b4eb",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Role",
							"item": [
								{
									"name": "Role-CreateRole-Guest",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ad13d109-343e-4812-b0d5-e190bd7e23b2",
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 401\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"    pm.response.to.be.unauthorized;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json;",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"name\": \"{{roleName}}\",\r\n  \"scopes\": [\r\n    {\r\n      \"scope\": \"EmbedWrite\"\r\n    }\r\n  ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/Role",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Role"
											]
										}
									},
									"response": []
								},
								{
									"name": "Role-GetAllRoles-Guest",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ac535463-71bc-4316-8f6f-62eeb4882b74",
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 401\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"    pm.response.to.be.unauthorized;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json;",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{apiUrl}}/api/Role",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Role"
											]
										}
									},
									"response": []
								},
								{
									"name": "Scope-GetAllScopes-Guest",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "50dc8115-52ce-411c-a083-45815ecbb8f3",
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 401\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"    pm.response.to.be.unauthorized;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json;",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{apiUrl}}/api/Role/Scopes",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Role",
												"Scopes"
											]
										}
									},
									"response": []
								},
								{
									"name": "Role-GetRole-Guest",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "bf63b595-5d34-41c4-b2c6-4cb0fcf8ea92",
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 401\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"    pm.response.to.be.unauthorized;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json;",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{apiUrl}}/api/Role/1",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Role",
												"1"
											]
										}
									},
									"response": []
								},
								{
									"name": "Role-UpdateRole-Guest",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "23c838ff-694f-4be4-aace-3a0f2ee26212",
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 401\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"    pm.response.to.be.unauthorized;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json;",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"name\": \"{{updatedRoleName}}\",\r\n  \"scopes\": [\r\n    {\r\n      \"scope\": \"EmbedWrite\"\r\n    }\r\n  ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/Role/1",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Role",
												"1"
											]
										}
									},
									"response": []
								},
								{
									"name": "Role-SetRole-Guest",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d088f933-c5e1-41b3-89f8-e97b441de043",
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 401\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"    pm.response.to.be.unauthorized;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json;",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"createdUserId\": {{createdUserId}},\r\n  \"name\": \"{{projectNameUpdated}}\",\r\n  \"description\": \"postmantest_description\",\r\n  \"shortDescription\": \"postmantest_shortdesc\",\r\n  \"uri\": \"postmantest_uri\",\r\n  \"collaborators\": [\r\n    {\r\n      \"fullName\": \"postmantest_collfullname\",\r\n      \"role\": \"postmantest_collrole\"\r\n    }\r\n  ],\r\n  \"created\": \"2020-04-20T08:24:26.693Z\",\r\n  \"updated\": \"2020-04-20T08:24:26.693Z\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/Role/setRole?createdUserId={{createdUserId}}&roleId=1",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Role",
												"setRole"
											],
											"query": [
												{
													"key": "createdUserId",
													"value": "{{createdUserId}}",
													"description": "Id of the user that we want to update"
												},
												{
													"key": "roleId",
													"value": "1",
													"description": "Id of the role that you want to update the user with"
												}
											]
										}
									},
									"response": []
								}
							],
							"auth": {
								"type": "noauth"
							},
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "d99c33c9-cbe3-4c80-822e-bf8a7b5056b2",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "a3709d25-7375-47ad-9db6-5245f4573692",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Search",
							"item": [
								{
									"name": "Search-SearchInternal-Guest",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "0ac832a5-ba35-43d8-b93e-7c47b69cf52e",
												"exec": [
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.ok;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{apiUrl}}/api/Search/internal/1",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Search",
												"internal",
												"1"
											]
										}
									},
									"response": []
								}
							],
							"auth": {
								"type": "noauth"
							},
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "9f1d723e-6325-4e62-bfcc-8f3df87e839b",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "0b7bc8f5-fc89-44e1-bfff-a38f902b547b",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Wizard",
							"item": [
								{
									"name": "Wizard-GetWizard-Guest",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2d373dd9-e51a-42f8-8642-1ad4cb148240",
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 401\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"    pm.response.to.be.unauthorized;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json;",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{apiUrl}}/api/Wizard?sourceURI={{wizardSourceUri}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Wizard"
											],
											"query": [
												{
													"key": "sourceURI",
													"value": "{{wizardSourceUri}}",
													"description": "This is the URI that the wizard will use to fetch the source."
												}
											]
										}
									},
									"response": []
								}
							],
							"auth": {
								"type": "noauth"
							},
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "50ad7205-cb17-480f-b8dd-dae96681e5af",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "eb0df7ed-cac5-44b1-88df-96293d758754",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Institution",
							"item": [
								{
									"name": "Institution-CreateInstitution-Guest",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "77374e42-b103-46fd-ab9f-40b7991bbf98",
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 401\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.unauthorized;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"{{institutionName}}\",\n    \"description\": \"postmantest_initial_description\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/Institution",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Institution"
											]
										}
									},
									"response": []
								},
								{
									"name": "Institution-GetInstitution-Guest",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d02211fb-a9cb-4521-b1f0-13ac8799de04",
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 401\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.unauthorized;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{apiUrl}}/api/Institution/1",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Institution",
												"1"
											]
										}
									},
									"response": []
								},
								{
									"name": "Institution-UpdateInstitution-Guest",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c0dabd71-39ff-439b-90c6-f6afbcf9bd43",
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 401\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.unauthorized;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"name\": \"{{institutionName}}\",\r\n    \"description\": \"postmantest_initial_description\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/Institution/1",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Institution",
												"1"
											]
										}
									},
									"response": []
								},
								{
									"name": "Instituiton-DeleteInstitution-Guest",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c49c5b5d-ef39-4256-bdec-b4a34750210f",
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 401\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.unauthorized;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{apiUrl}}/api/Institution/1",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Institution",
												"1"
											]
										}
									},
									"response": []
								}
							],
							"auth": {
								"type": "noauth"
							},
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "a6c3f70f-e2ac-4077-be65-3d82bff6fcc7",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "9a979fba-ccee-4b24-8744-80feb06995a1",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "File",
							"item": [
								{
									"name": "Post-File-Guest",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b05c99c3-a8f2-4ffe-b105-59f98897e4e8",
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"eval(pm.environment.get(\"commonTests\"))();\r",
													"\r",
													"pm.test(\"Status code is 401\", function () {\r",
													"    pm.response.to.have.status(401);\r",
													"});\r",
													"\r",
													"pm.test(\"Response must be valid and have a json body\", function () {\r",
													"    pm.response.to.be.unauthorized;\r",
													"    pm.response.to.be.withBody;\r",
													"    pm.response.to.be.json;\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "File",
													"type": "file",
													"src": "Postman/testimage.png"
												}
											]
										},
										"url": {
											"raw": "{{apiUrl}}/api/File",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"File"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get-Files-Guest",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d5d4fa80-5063-4d79-9b72-20218c476ad3",
												"exec": [
													"eval(pm.environment.get(\"commonTests\"))();\r",
													"\r",
													"pm.test(\"Status code is 401\", function () {\r",
													"    pm.response.to.have.status(401);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{apiUrl}}/api/File",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"File"
											]
										}
									},
									"response": []
								},
								{
									"name": "File-Delete-Guest",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "7878b6b5-96ef-4817-927f-241337e55304",
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"eval(pm.environment.get(\"commonTests\"))();\r",
													"\r",
													"pm.test(\"Status code is 401\", function () {\r",
													"    pm.response.to.have.status(401);\r",
													"});\r",
													"\r",
													"pm.test(\"Response must be valid and have a json body\", function () {\r",
													"     pm.response.to.be.unauthorized;\r",
													"     pm.response.to.be.withBody;\r",
													"     pm.response.to.be.json;\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{apiUrl}}/api/File/1",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"File",
												"1"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "CallToActionOption",
							"item": [
								{
									"name": "CallToActionOption-CreateCallToActionOption-Guest",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a83e6c7c-e919-4511-8563-eac6aa67f5f4",
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 401\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"    pm.response.to.be.unauthorized;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"type\": \"Title\",\n    \"value\": \"Provide feedback\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/CallToActionOption",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"CallToActionOption"
											]
										}
									},
									"response": []
								},
								{
									"name": "CallToActionOption-GetAllCallToActionOptions-Guest",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "8781aa38-95ca-4db1-8d7d-49e79704415b",
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 401\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"    pm.response.to.be.unauthorized;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{apiUrl}}/api/CallToActionOption",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"CallToActionOption"
											]
										}
									},
									"response": []
								},
								{
									"name": "CallToActionOption-GetCallToActionOptionById-Guest",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "452ded50-547f-4d63-94c7-6a3eeba1dd17",
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 401\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"    pm.response.to.be.unauthorized;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{apiUrl}}/api/CallToActionOption/{{callToActionOptionId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"CallToActionOption",
												"{{callToActionOptionId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "CallToActionOption-GetCallToActionOptionByType-Guest",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e646fc03-912a-4614-af60-2f214371f037",
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 401\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"    pm.response.to.be.unauthorized;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{apiUrl}}/api/CallToActionOption/type/{{callToActionOptionType}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"CallToActionOption",
												"type",
												"{{callToActionOptionType}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "CallToActionOption-UpdateCallToActionOption-Guest",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "9b1a14a7-19da-4339-91d2-6f7cdeb490db",
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 401\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"    pm.response.to.be.unauthorized;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"type\": \"Updated type\",\r\n    \"value\": \"Updated value\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/CallToActionOption/{{callToActionOptionId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"CallToActionOption",
												"{{callToActionOptionId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "CallToActionOption-DeleteCallToActionOption-Guest",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "90f197ac-6c17-4967-b96c-dd89ed359abb",
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 401\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"    pm.response.to.be.unauthorized;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{apiUrl}}/api/CallToActionOption/{{callToActionOptionId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"CallToActionOption",
												"{{callToActionOptionId}}"
											]
										}
									},
									"response": []
								}
							],
							"auth": {
								"type": "noauth"
							},
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "4e228655-3739-4653-a023-60d23cd6e91d",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "ae2cc970-a42b-418c-aae5-c4c7c9b208db",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "f580fcc3-13f6-4dd1-b255-d9c96df9082d",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "66cf4a5d-9179-47d5-a140-2f6da99e3180",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Registered",
					"item": [
						{
							"name": "Preparation",
							"item": [
								{
									"name": "User-CreateUser",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "45974fb4-803a-4fa8-895d-5cb78655f219",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"var userName = pm.environment.get(\"userName\");",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.environment.set(\"createdUserId\", jsonData.id);",
													"pm.environment.set(\"identityId\", jsonData.id);",
													"",
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.success;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});",
													"",
													"pm.test(\"Check if created Username matches: \" + userName, function () {",
													"    pm.expect(jsonData.name).to.eql(userName);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{administratorUserIdentityId}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"identityId\": \"9996\",\n    \"name\": \"{{userName}}\",\n    \"email\": \"postmantest_email@example.com\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/User",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"User"
											]
										}
									},
									"response": []
								},
								{
									"name": "Project-CreateProject",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5a35570c-2b3e-487c-b74c-9642429d5479",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"var administratorUserId = parseInt(pm.environment.get(\"administratorUserId\"));",
													"var projectName = pm.environment.get(\"projectName\");",
													"var adminUserName = pm.environment.get(\"adminUserName\");",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.environment.set(\"projectId\", jsonData.id);",
													"pm.environment.set(\"adminProjectId\", jsonData.id);",
													"",
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.success;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});",
													"",
													"pm.test(\"Project Name is set correctly and matching: \" + projectName, function () {",
													"    pm.expect(jsonData.name).to.eql(projectName);",
													"});",
													"",
													"pm.test(\"User Name is correct and matching: \" + adminUserName, function () {",
													"    pm.expect(jsonData.user.name).to.eql(adminUserName);",
													"});",
													"",
													"pm.test(\"Identity ID is correct and matching: \" + administratorUserId, function () {",
													"    pm.expect(parseInt(jsonData.user.id)).to.eql(administratorUserId);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{administratorUserIdentityId}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"name\": \"{{projectName}}\",\r\n  \"description\": \"postmantest_description\",\r\n  \"shortDescription\": \"postmantest_shortdesc\",\r\n  \"uri\": \"postmantest_uri\",\r\n  \"collaborators\": [\r\n    {\r\n      \"fullName\": \"postmantest_collfullname\",\r\n      \"role\": \"postmantest_collrole\"\r\n    }\r\n  ],\r\n  \"created\": \"2020-04-20T08:24:26.693Z\",\r\n  \"updated\": \"2020-04-20T08:24:26.693Z\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/Project",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Project"
											]
										}
									},
									"response": []
								},
								{
									"name": "Highlight-CreateHighlight",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b71c2786-27b0-4e72-b447-8c74f723b90d",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"var identityId = parseInt(pm.environment.get(\"identityId\"));",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.environment.set(\"highlightId\", jsonData.id);",
													"",
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.success;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "e0e2c3c3-19d2-4a19-ab38-0632a2a91b86",
												"exec": [
													"var current_timestamp = new Date();\r",
													"postman.setEnvironmentVariable(\"current_timestamp\", current_timestamp.toISOString());\r",
													"\r",
													"var future_timestamp = new Date(Date.now() +(2 * 86400000));\r",
													"postman.setEnvironmentVariable(\"future_timestamp\", future_timestamp.toISOString());\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{administratorUserIdentityId}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"projectId\": {{projectId}},\r\n  \"startDate\": \"{{current_timestamp}}\",\r\n  \"endDate\": \"{{future_timestamp}}\",\r\n  \"description\" : \"Lorem Ipsum\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/Highlight",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Highlight"
											]
										}
									},
									"response": []
								},
								{
									"name": "Embed-CreateEmbed",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f7d50189-268a-4de8-ba7c-54040be8a7dd",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.environment.set(\"embedGuid\", jsonData.guid);",
													"pm.environment.set(\"adminEmbedGuid\", jsonData.guid);",
													"pm.environment.set(\"embeddedProjectId\", jsonData.project.id);",
													"",
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.success;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{administratorUserIdentityId}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"projectId\": {{projectId}}\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/Embed",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Embed"
											]
										}
									},
									"response": []
								},
								{
									"name": "Role-CreateRole",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "7bb282e6-96fe-4bba-b452-a81b21beb916",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"var scopeName = pm.environment.get(\"scopeName\");",
													"var roleName = pm.environment.get(\"roleName\");",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.environment.set(\"roleId\", jsonData.id);",
													"",
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.success;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});",
													"",
													"pm.test(\"Role Name is set correctly and matching: \" + roleName, function () {",
													"    pm.expect(jsonData.name).to.eql(roleName);",
													"});",
													"",
													"pm.test(\"Scope is correct and matching: \" + scopeName, function () {",
													"    pm.expect(jsonData.scopes.scope).to.eql(scopeName);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{administratorUserIdentityId}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"name\": \"{{roleName}}\",\r\n  \"scopes\": [\r\n    {\r\n      \"scope\": \"EmbedWrite\"\r\n    }\r\n  ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/Role",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Role"
											]
										}
									},
									"response": []
								},
								{
									"name": "CallToActionOption-CreateCallToActionOption",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2e64caa4-cadf-4352-a653-869977399e43",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.environment.set(\"callToActionOptionId\", jsonData.id);",
													"",
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.success;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});",
													"",
													"pm.test(\"Call to action option type is lowercase\", function () {",
													"    pm.expect(jsonData.type).to.eql(jsonData.type.toLowerCase());",
													"});",
													"",
													"pm.test(\"Call to action option value is lowercase\", function () {",
													"    pm.expect(jsonData.value).to.eql(jsonData.value.toLowerCase());",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{administratorUserIdentityId}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"type\": \"Title\",\r\n  \"value\": \"Feedback\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/CallToActionOption",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"CallToActionOption"
											]
										}
									},
									"response": []
								}
							],
							"description": "For some requests, we need to have data available. The variables need to be filled so the request can succeed. We put these preparation requests in this folder. We will clean them up in the cleanup folder.",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "36e364df-55ff-479d-b538-5ad4755421ad",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "ef39db74-f6a2-44e6-98bf-e0b46883bb06",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "User",
							"item": [
								{
									"name": "User-CreateUser-Registered",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "94b35488-81ac-4a68-bbee-e05b899d4b4f",
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 403\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.forbidden;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{registeredUserIdentityId}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"identityId\": \"{{createdUserId}}\",\n    \"name\": \"{{userName}}\",\n    \"email\": \"postmantest_email@example.com\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/User",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"User"
											]
										}
									},
									"response": []
								},
								{
									"name": "User-GetUser-Other-Registered",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f17166f8-31a6-4645-917b-b851c177126d",
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 403\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.forbidden;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{registeredUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/User/{{createdUserId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"User",
												"{{createdUserId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "User-GetUser-Self-Registered",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5f74560d-a08c-4063-b4f3-cccdef7556aa",
												"exec": [
													"var aliceIdentityId = parseInt(pm.environment.get(\"registeredUserIdentityId\"));",
													"",
													"var jsonData = pm.response.json();",
													"pm.environment.set(\"registeredUserId\", jsonData.id);",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.ok;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Identity ID is correct and matching: \" + aliceIdentityId, function () {",
													"    pm.expect(parseInt(jsonData.identityId)).to.eql(aliceIdentityId);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{registeredUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/User",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"User"
											]
										}
									},
									"response": []
								},
								{
									"name": "User-UpdateUser-Self-Registered",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "97fa9aba-781d-45c5-9f1d-1bcfe4c54f45",
												"exec": [
													"var updatedAliceEmail = pm.environment.get(\"updatedAliceEmail\");",
													"",
													"var jsonData = pm.response.json();",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.ok;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Check if email update matches: \" + updatedAliceEmail, function () {",
													"    pm.expect(jsonData.email).to.eql(updatedAliceEmail);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{registeredUserIdentityId}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"name\": \"alicez\",\r\n  \"email\": \"{{updatedAliceEmail}}\",\r\n  \"identityId\": \"{{registeredUserIdentityId}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/User/{{registeredUserId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"User",
												"{{registeredUserId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "User-UpdateUser-Other-Registered",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5729f2c3-e981-4f05-9260-199b73bb65b1",
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 401\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.unauthorized;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{registeredUserIdentityId}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"name\": \"bobz\",\r\n  \"email\": \"BobSmith@email.com\",\r\n  \"identityId\": {{administratorUserIdentityId}}\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/User/{{createdUserId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"User",
												"{{createdUserId}}"
											]
										}
									},
									"response": []
								}
							],
							"description": "Requests executed as the Alice user with the registered role.",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "fb40ef6f-c049-4722-9382-1440fa2159cd",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "f67df24c-684e-418f-b8e4-8cc8ee29b415",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "FollowUser",
							"item": [
								{
									"name": "User-FollowUser-Registered",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "00d9f8e6-24f2-40c0-ad55-86cc4f1057c6",
												"exec": [
													"var jsonData = pm.response.json();",
													"var userId = pm.environment.get(\"userIdToFollow\");",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.success;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Check if created Username matches: \" + userId, function () {",
													"    pm.expect(jsonData.id).to.eql(userId);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{registeredUserIdentityId}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/User/follow/{{userIdToFollow}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"User",
												"follow",
												"{{userIdToFollow}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "User-UnFollowUser-Registered",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "366a340c-46c5-4a77-921a-b12c38aa8761",
												"exec": [
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{registeredUserIdentityId}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/User/follow/{{userIdToFollow}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"User",
												"follow",
												"{{userIdToFollow}}"
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "12776b85-a2ed-4aaf-b1ba-b2ef2f085369",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "ae0990fb-20a8-4874-96b0-8e96c7f3f2eb",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Project",
							"item": [
								{
									"name": "Project-CreateProject-Registered",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "877ddb55-88a4-40a8-9fd9-379da2e2ed6c",
												"exec": [
													"var registeredUserId = pm.environment.get(\"registeredUserId\");",
													"var projectName = pm.environment.get(\"projectName\");",
													"",
													"var jsonData = pm.response.json();",
													"pm.environment.set(\"projectId\", jsonData.id);",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Project Name is set correctly and matches: \" + projectName, function () {",
													"    pm.expect(jsonData.name).to.eql(projectName);",
													"});",
													"",
													"pm.test(\"Identity Id is set correctly and matches: \" + registeredUserId, function () {",
													"    pm.expect(jsonData.user.id).to.eql(registeredUserId);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{registeredUserIdentityId}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"name\": \"{{projectName}}\",\r\n  \"description\": \"postmantest_description\",\r\n  \"shortDescription\": \"postmantest_shortdesc\",\r\n  \"uri\": \"postmantest_uri\",\r\n  \"collaborators\": [\r\n    {\r\n      \"fullName\": \"postmantest_collfullname\",\r\n      \"role\": \"postmantest_collrole\"\r\n    }\r\n  ],\r\n  \"created\": \"2020-04-20T08:24:26.693Z\",\r\n  \"updated\": \"2020-04-20T08:24:26.693Z\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/Project",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Project"
											]
										}
									},
									"response": []
								},
								{
									"name": "Project-GetAllProjects-Registered",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "bbcd3c41-e730-44b9-962a-16bbd0d07f68",
												"exec": [
													"var projectName = pm.environment.get(\"projectName\");",
													"",
													"var jsonData = pm.response.json();",
													"",
													"var foundAt;",
													"",
													"function findProject(jsonData, name) {",
													"    for (var i = 0; i < jsonData.results.length; i++) {",
													"        if (jsonData.results[i].name == name) {",
													"            return i;",
													"        }",
													"    }",
													"    return -1;",
													"}",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Project: \" + projectName + \" is in list\", function () {",
													"    foundAt = findProject(jsonData, projectName);",
													"    pm.expect(foundAt).to.not.eql(-1);",
													"});",
													"",
													"pm.test(\"Project Name is set correctly and matching: \" + projectName, function () {",
													"    pm.expect(jsonData.results[foundAt].name).to.eql(projectName);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{registeredUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Project",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Project"
											]
										}
									},
									"response": []
								},
								{
									"name": "Project-GetProject-Self-Registered",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "276b34c5-58ac-4622-90bd-aebdb27dd333",
												"exec": [
													"var projectName = pm.environment.get(\"projectName\");",
													"",
													"var jsonData = pm.response.json();",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Project Name is set correctly and matches: \" + projectName, function () {",
													"    pm.expect(jsonData.name).to.eql(projectName);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{registeredUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Project/{{projectId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Project",
												"{{projectId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Project-GetProject-Other-Registered",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "7b3fdb2f-dd81-46a0-af73-d75cf341b27a",
												"exec": [
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{registeredUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Project/{{adminProjectId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Project",
												"{{adminProjectId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Project-UpdateProject-Self-Registered",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2c128ade-c8ce-47ba-a58e-3d3d1b0cc558",
												"exec": [
													"var projectName = pm.environment.get(\"projectNameUpdated\");",
													"",
													"var jsonData = pm.response.json();",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.ok;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Project Name is set correctly and matches: \" + projectName, function () {",
													"    pm.expect(jsonData.name).to.eql(projectName);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{registeredUserIdentityId}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"name\": \"{{projectNameUpdated}}\",\r\n  \"description\": \"postmantest_description\",\r\n  \"shortDescription\": \"postmantest_shortdesc\",\r\n  \"uri\": \"postmantest_uri\",\r\n  \"collaborators\": [\r\n    {\r\n      \"fullName\": \"postmantest_collfullname\",\r\n      \"role\": \"postmantest_collrole\"\r\n    }\r\n  ],\r\n  \"created\": \"2020-04-20T08:24:26.693Z\",\r\n  \"updated\": \"2020-04-20T08:24:26.693Z\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/Project/{{projectId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Project",
												"{{projectId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Project-UpdateProject-Other-Registered",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "0c068803-0354-4f95-a96e-01cb86bf8455",
												"exec": [
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 401\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"    pm.response.to.be.unauthorized;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{registeredUserIdentityId}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"name\": \"{{projectNameUpdated}}\",\r\n  \"description\": \"postmantest_description\",\r\n  \"shortDescription\": \"postmantest_shortdesc\",\r\n  \"uri\": \"postmantest_uri\",\r\n  \"collaborators\": [\r\n    {\r\n      \"fullName\": \"postmantest_collfullname\",\r\n      \"role\": \"postmantest_collrole\"\r\n    }\r\n  ],\r\n  \"created\": \"2020-04-20T08:24:26.693Z\",\r\n  \"updated\": \"2020-04-20T08:24:26.693Z\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/Project/{{adminProjectId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Project",
												"{{adminProjectId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Project-LikeProject-Registered",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b3a2c3d6-fa1d-4c5a-b4f5-8eb17b7f555c",
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"eval(pm.environment.get(\"commonTests\"))();\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Response must be valid and have a json body\", function () {\r",
													"     pm.response.to.be.ok;\r",
													"     pm.response.to.be.withBody;\r",
													"     pm.response.to.be.json;\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "IdentityId",
												"value": "{{registeredUserIdentityId}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Project/like/{{projectId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Project",
												"like",
												"{{projectId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Project-DeleteLikeProject-Registered",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a8fbdfa5-5443-4819-b928-d5fd993078e3",
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"eval(pm.environment.get(\"commonTests\"))();\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Response must be valid and have a json body\", function () {\r",
													"     pm.response.to.be.ok;\r",
													"     pm.response.to.be.withBody;\r",
													"     pm.response.to.be.json;\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{registeredUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Project/like/{{projectId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Project",
												"like",
												"{{projectId}}"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "FollowProject",
							"item": [
								{
									"name": "Project-FollowProject-Registered",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2f44795b-2c5f-43c9-9545-c527d84ba96d",
												"exec": [
													"var projectId = pm.environment.get(\"projectIdToFollow\");",
													"",
													"var jsonData = pm.response.json();",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.success;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Check if created Username matches: \" + projectId, function () {",
													"    pm.expect(jsonData.id).to.eql(projectId);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{administratorUserIdentityId}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/project/follow/{{projectIdToFollow}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"project",
												"follow",
												"{{projectIdToFollow}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Project-UnFollowProject-Registered",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "96e6f1e0-a461-49c6-9663-7c6fe839e8d2",
												"exec": [
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{administratorUserIdentityId}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/project/follow/{{projectIdToFollow}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"project",
												"follow",
												"{{projectIdToFollow}}"
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "55d4cdd0-958a-4e9c-8572-b3237457c5d9",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "decf43f1-f79c-42b5-91de-c71342ecdd79",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Embed",
							"item": [
								{
									"name": "Embed-CreateEmbed-Self-Registered",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c287e7a1-d251-4194-ac4d-431864bb8f7c",
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"pm.environment.set(\"embedGuid\", jsonData.guid);",
													"pm.environment.set(\"embeddedProjectId\", jsonData.project.id);",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.success;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{registeredUserIdentityId}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"projectId\": {{projectId}}\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/Embed",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Embed"
											]
										}
									},
									"response": []
								},
								{
									"name": "Embed-CreateEmbed-Other-Registered",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "221665d8-47b0-4e07-8734-d62882f72b7e",
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 401\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.unauthorized;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{registeredUserIdentityId}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"projectId\": {{adminProjectId}}\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/Embed",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Embed"
											]
										}
									},
									"response": []
								},
								{
									"name": "Embed-GetAllEmbeds-Registered",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "1ec7d74d-4d33-4b11-b84f-224f0149e39c",
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 403\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.forbidden;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{registeredUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Embed",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Embed"
											]
										}
									},
									"response": []
								},
								{
									"name": "Embed-GetEmbed-Registered",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "12f57ad7-69c2-421e-ac0a-47fe153fb2d0",
												"exec": [
													"var embeddedProjectId = parseInt(pm.environment.get(\"embeddedProjectId\"))",
													"",
													"var jsonData = pm.response.json();",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Embed matches: \" + embeddedProjectId, function () {",
													"    pm.expect(jsonData.id).to.eql(embeddedProjectId);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{registeredUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Embed/{{embedGuid}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Embed",
												"{{embedGuid}}"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Highlight",
							"item": [
								{
									"name": "Highlight-CreateHighlight-Registered",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "76824c27-ad6a-43cc-a5d9-8a852e7d87cf",
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 403\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.forbidden;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "cc203063-649b-4fbc-b0e8-6cb8d6ddb9a2",
												"exec": [
													"var current_timestamp = new Date();\r",
													"postman.setEnvironmentVariable(\"current_timestamp\", current_timestamp.toISOString());\r",
													"\r",
													"var future_timestamp = new Date(Date.now() +(2 * 86400000));\r",
													"postman.setEnvironmentVariable(\"future_timestamp\", future_timestamp.toISOString());\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{registeredUserIdentityId}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"projectId\": {{projectId}},\r\n  \"startDate\": \"{{current_timestamp}}\",\r\n  \"endDate\": \"{{future_timestamp}}\",\r\n  \"description\" : \"Lorem Ipsum\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/Highlight",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Highlight"
											]
										}
									},
									"response": []
								},
								{
									"name": "Highlight-GetAllActiveHighlights-Registered",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "fc2e7fad-e4db-487e-9684-00ffb90b5bfb",
												"exec": [
													"var projectId = pm.environment.get(\"adminProjectId\");",
													"",
													"var jsonData = pm.response.json();",
													"",
													"var foundAt;",
													"",
													"function findItem(jsonData, item) {",
													"    for (var i = 0; i < jsonData.length; i++) {",
													"        if (jsonData[i].projectId == item) {",
													"            return i;",
													"        }",
													"    }",
													"    return -1;",
													"}",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Highlight is in list and matching: \" + projectId, function () {",
													"    foundAt = findItem(jsonData, projectId);",
													"    pm.expect(foundAt).to.not.eql(-1);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{registeredUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Highlight",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Highlight"
											]
										}
									},
									"response": []
								},
								{
									"name": "Highlight-GetHighlight-Registered",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "bddeb7ac-1198-4b79-adce-7f3bd0807e85",
												"exec": [
													"var identityId = parseInt(pm.environment.get(\"identityId\"));",
													"var highlightId = parseInt(pm.environment.get(\"highlightId\"));",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.environment.set(\"highlightStartDate\", jsonData.startDate);",
													"pm.environment.set(\"highlightEndDate\", jsonData.endDate);",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Highlight Id matches: \" + highlightId, function () {",
													"    pm.expect(jsonData.id).to.eql(highlightId);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{registeredUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Highlight/{{highlightId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Highlight",
												"{{highlightId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Highlight-GetHighlight-ByProject-Registered",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "9fbc7774-35c6-46fe-9bc5-d88700e36aa8",
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 403\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"    pm.response.to.be.forbidden;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json;",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{registeredUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Highlight/Project/{{projectId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Highlight",
												"Project",
												"{{projectId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Highlight-UpdateHighlight-Registered",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "86dbc875-4825-4066-9e31-94faa297b7f8",
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 403\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.forbidden;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "IdentityId",
												"value": "{{registeredUserIdentityId}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"projectId\": \"{{projectId}}\",\r\n  \"startDate\": \"{{current_timestamp}}\",\r\n  \"endDate\": \"{{highlightEndDate}}\",\r\n  \"description\" : \"Lorem Ipsum\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/Highlight/{{highlightId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Highlight",
												"{{highlightId}}"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Role",
							"item": [
								{
									"name": "Role-CreateRole-Registered",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "0d6236a4-4c04-49b1-8dc6-acdef826ec2d",
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 403\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.forbidden;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{registeredUserIdentityId}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"name\": \"{{roleName}}\",\r\n  \"scopes\": [\r\n    {\r\n      \"scope\": \"EmbedWrite\"\r\n    }\r\n  ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/Role",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Role"
											]
										}
									},
									"response": []
								},
								{
									"name": "Role-GetAllRoles-Registered",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2c90d622-f3bb-43ea-834c-c6ddba87af98",
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 403\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.forbidden;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{registeredUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Role",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Role"
											]
										}
									},
									"response": []
								},
								{
									"name": "Scope-GetAllScopes-Registered",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "54c65daa-06a0-4c61-9e2b-f5b83f3c5449",
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 403\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.forbidden;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{registeredUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Role/Scopes",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Role",
												"Scopes"
											]
										}
									},
									"response": []
								},
								{
									"name": "Role-GetRole-Registered",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "960649f1-1321-4946-a23d-627b1bea631b",
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 403\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.forbidden;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{registeredUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Role/{{roleId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Role",
												"{{roleId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Role-UpdateRole-Registered",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4215a11a-eae1-496e-bb82-9f2776ccce5a",
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 403\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.forbidden;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{registeredUserIdentityId}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"name\": \"{{updatedRoleName}}\",\r\n  \"scopes\": [\r\n    {\r\n      \"scope\": \"EmbedWrite\"\r\n    }\r\n  ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/Role/{{roleId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Role",
												"{{roleId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Role-SetRole-Registered",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4dac2194-5686-408c-bb1b-a4fb1e46d9ab",
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 403\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.forbidden;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{registeredUserIdentityId}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"createdUserId\": {{createdUserId}},\r\n  \"name\": \"{{projectNameUpdated}}\",\r\n  \"description\": \"postmantest_description\",\r\n  \"shortDescription\": \"postmantest_shortdesc\",\r\n  \"uri\": \"postmantest_uri\",\r\n  \"collaborators\": [\r\n    {\r\n      \"fullName\": \"postmantest_collfullname\",\r\n      \"role\": \"postmantest_collrole\"\r\n    }\r\n  ],\r\n  \"created\": \"2020-04-20T08:24:26.693Z\",\r\n  \"updated\": \"2020-04-20T08:24:26.693Z\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/Role/setRole?createdUserId={{createdUserId}}&roleId={{roleId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Role",
												"setRole"
											],
											"query": [
												{
													"key": "createdUserId",
													"value": "{{createdUserId}}",
													"description": "Id of the user that we want to update"
												},
												{
													"key": "roleId",
													"value": "{{roleId}}",
													"description": "Id of the role that you want to update the user with"
												}
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Search",
							"item": [
								{
									"name": "Search-SearchInternal-Registered",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e7b23d3e-d682-4997-aaa0-b12a9e13b360",
												"exec": [
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.ok;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{administratorUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Search/internal/{{projectName}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Search",
												"internal",
												"{{projectName}}"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Wizard",
							"item": [
								{
									"name": "Wizard-GetWizard-Registered",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "75cefc24-c5d4-4bfb-b512-d503dbf5b8ac",
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{registeredUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Wizard?sourceURI={{wizardSourceUri}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Wizard"
											],
											"query": [
												{
													"key": "sourceURI",
													"value": "{{wizardSourceUri}}",
													"description": "This is the URI that the wizard will use to fetch the source."
												}
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Institution",
							"item": [
								{
									"name": "Institution-CreateInstitution-Registered",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "650188a6-e473-44f8-bcef-51db6d771c77",
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 401\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.unauthorized;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [
											{
												"key": "IdentityId",
												"value": "{{registeredUserIdentityId}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"identityId\": \"98764342123\",\n    \"name\": \"mycooltestusername\",\n    \"email\": \"postmantest_email@example.com\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/User",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"User"
											]
										}
									},
									"response": []
								},
								{
									"name": "Institution-GetInstitution-Registered",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "317055f7-cc0e-4054-939c-12e88c496089",
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 401\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.unauthorized;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"value": "{{registeredUserIdentityId}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/User/1",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"User",
												"1"
											]
										}
									},
									"response": []
								},
								{
									"name": "Institution-UpdateInstitution-Registered",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "86e035c4-4c73-488c-8b08-277b0f31164b",
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 401\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.unauthorized;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "PUT",
										"header": [
											{
												"key": "IdentityId",
												"value": "{{registeredUserIdentityId}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"name\": \"bobz\",\r\n  \"email\": \"BobSmith@email.com\",\r\n  \"identityId\": {{administratorUserIdentityId}}\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/User/1",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"User",
												"1"
											]
										}
									},
									"response": []
								},
								{
									"name": "Instituiton-DeleteInstitution-Registered",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "08061912-960e-4298-8603-c2332cf7b788",
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 401\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.unauthorized;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "IdentityId",
												"value": "{{registeredUserIdentityId}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/User/1",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"User",
												"1"
											]
										}
									},
									"response": []
								}
							],
							"auth": {
								"type": "noauth"
							},
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "b969d5ec-61c1-44a5-8542-aeaf12ec084b",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "c276c5aa-2f62-4578-889f-8ae8de7b3c13",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "ProjectIcon",
							"item": [
								{
									"name": "ProjectIcon-Post-File-Registered",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "61fed1d4-a4d8-457b-b16b-68bb5aab1494",
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"eval(pm.environment.get(\"commonTests\"))();\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Response includes fileId\", function () {\r",
													"    pm.expect(jsonData.id).to.exist;\r",
													"})\r",
													"\r",
													"pm.environment.set(\"ProjectIconRegisteredFileId\", jsonData.id);\r",
													"\r",
													"pm.test(\"Response must be valid and have a json body\", function () {\r",
													"     pm.response.to.be.success;\r",
													"     pm.response.to.be.withBody;\r",
													"     pm.response.to.be.json;\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "IdentityId",
												"value": "{{registeredUserIdentityId}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "File",
													"type": "file",
													"src": "Postman/testimage.png"
												}
											]
										},
										"url": {
											"raw": "{{apiUrl}}/api/File",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"File"
											]
										}
									},
									"response": []
								},
								{
									"name": "ProjectIcon-CreateProject-Registered",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ebeeeb84-02d9-443c-a2f7-4f3be3974ab1",
												"exec": [
													"var registeredUserId = pm.environment.get(\"registeredUserId\");",
													"var projectName = pm.environment.get(\"projectName\");",
													"",
													"var jsonData = pm.response.json();",
													"pm.environment.set(\"ProjectIconProjectId\", jsonData.id);",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Project Name is set correctly and matches: \" + projectName, function () {",
													"    pm.expect(jsonData.name).to.eql(projectName);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{registeredUserIdentityId}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"name\": \"{{projectName}}\",\r\n  \"description\": \"postmantest_description\",\r\n  \"shortDescription\": \"postmantest_shortdesc\",\r\n  \"uri\": \"postmantest_uri\",\r\n  \"collaborators\": [\r\n    {\r\n      \"fullName\": \"postmantest_collfullname\",\r\n      \"role\": \"postmantest_collrole\"\r\n    }\r\n  ],\r\n  \"fileId\": {{ProjectIconRegisteredFileId}},\r\n  \"created\": \"2020-04-20T08:24:26.693Z\",\r\n  \"updated\": \"2020-04-20T08:24:26.693Z\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/Project",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Project"
											]
										}
									},
									"response": []
								},
								{
									"name": "ProjectIcon-GetProject-Registered",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c4c9b53d-927f-457d-b98a-f33d3de5d374",
												"exec": [
													"var projectName = pm.environment.get(\"projectName\");",
													"var ProjectIconRegisteredFileId = pm.environment.get(\"ProjectIconRegisteredFileId\");",
													"",
													"var jsonData = pm.response.json();",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Project Name is set correctly and matches: \" + projectName, function () {",
													"    pm.expect(jsonData.name).to.eql(projectName);",
													"});",
													"",
													"pm.test(\"ProjectIconId is set correctly and matches: \" + ProjectIconRegisteredFileId, function () {",
													"    pm.expect(jsonData.projectIcon.id).to.eql(ProjectIconRegisteredFileId)",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{registeredUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Project/{{ProjectIconProjectId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Project",
												"{{ProjectIconProjectId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "ProjectIcon-GetIcon-Registered",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "891aa457-3754-45c6-85f0-8da1547cf206",
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"eval(pm.environment.get(\"commonTests\"))();\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Response must be valid and have a json body\", function () {\r",
													"    pm.response.to.be.ok;\r",
													"    pm.response.to.be.withBody;\r",
													"    pm.response.to.be.json;\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{registeredUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/file/{{ProjectIconRegisteredFileId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"file",
												"{{ProjectIconRegisteredFileId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "ProjectIcon-UpdateProject-Same-ProjectIcon",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "659da927-477d-4fa2-8fd5-6834e9f9871e",
												"exec": [
													"var projectName = pm.environment.get(\"projectNameUpdated\");",
													"",
													"var jsonData = pm.response.json();",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.ok;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Project Name is set correctly and matches: \" + projectName, function () {",
													"    pm.expect(jsonData.name).to.eql(projectName);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{registeredUserIdentityId}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"name\": \"postmantest_projectname_updated\",\r\n  \"description\": \"postmantest_description\",\r\n  \"shortDescription\": \"postmantest_shortdesc\",\r\n  \"uri\": \"postmantest_uri\",\r\n  \"collaborators\": [\r\n    {\r\n      \"fullName\": \"postmantest_collfullname\",\r\n      \"role\": \"postmantest_collrole\"\r\n    }\r\n  ],\r\n  \"fileId\": {{ProjectIconRegisteredFileId}},\r\n  \"created\": \"2020-04-20T08:24:26.693Z\",\r\n  \"updated\": \"2020-04-20T08:24:26.693Z\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/Project/{{ProjectIconProjectId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Project",
												"{{ProjectIconProjectId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "ProjectIcon-GetIcon-Registered-After-Edit",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "46664000-e010-4af4-b7d5-168945aa51f3",
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"eval(pm.environment.get(\"commonTests\"))();\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Response must be valid and have a json body\", function () {\r",
													"    pm.response.to.be.ok;\r",
													"    pm.response.to.be.withBody;\r",
													"    pm.response.to.be.json;\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{registeredUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/file/{{ProjectIconRegisteredFileId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"file",
												"{{ProjectIconRegisteredFileId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "ProjectIcon-Post-New-File-Registered",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "994ecbc8-290a-43a8-8a63-947c1f9b13b8",
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"eval(pm.environment.get(\"commonTests\"))();\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Response includes fileId\", function () {\r",
													"    pm.expect(jsonData.id).to.exist;\r",
													"})\r",
													"\r",
													"pm.environment.set(\"newRegisteredFileId\", jsonData.id);\r",
													"\r",
													"pm.test(\"Response must be valid and have a json body\", function () {\r",
													"     pm.response.to.be.success;\r",
													"     pm.response.to.be.withBody;\r",
													"     pm.response.to.be.json;\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{registeredUserIdentityId}}"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "File",
													"type": "file",
													"src": "Postman/testimage2.png"
												}
											]
										},
										"url": {
											"raw": "{{apiUrl}}/api/File",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"File"
											]
										}
									},
									"response": []
								},
								{
									"name": "ProjectIcon-UpdateProject-Registered",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e7715b4a-b24a-456d-9781-e2d513eeea86",
												"exec": [
													"var projectName = pm.environment.get(\"projectNameUpdated\");",
													"",
													"var jsonData = pm.response.json();",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.ok;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Project Name is set correctly and matches: \" + projectName, function () {",
													"    pm.expect(jsonData.name).to.eql(projectName);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{registeredUserIdentityId}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"name\": \"postmantest_projectname_updated\",\r\n  \"description\": \"postmantest_description\",\r\n  \"shortDescription\": \"postmantest_shortdesc\",\r\n  \"uri\": \"postmantest_uri\",\r\n  \"collaborators\": [\r\n    {\r\n      \"fullName\": \"postmantest_collfullname\",\r\n      \"role\": \"postmantest_collrole\"\r\n    }\r\n  ],\r\n  \"fileId\": {{newRegisteredFileId}},\r\n  \"created\": \"2020-04-20T08:24:26.693Z\",\r\n  \"updated\": \"2020-04-20T08:24:26.693Z\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/Project/{{ProjectIconProjectId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Project",
												"{{ProjectIconProjectId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "ProjectIcon-GetUpdatedProject-Registered",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "955a1df4-a954-45c2-b53c-023b157e5c43",
												"exec": [
													"var projectName = pm.environment.get(\"projectName\");",
													"var newRegisteredFileId = pm.environment.get(\"newRegisteredFileId\");",
													"",
													"var jsonData = pm.response.json();",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Project Name is set correctly and matches: \" + projectName, function () {",
													"    pm.expect(jsonData.name).to.eql(projectName);",
													"});",
													"",
													"pm.test(\"ProjectIconId is set correctly and matches: \" + newRegisteredFileId, function () {",
													"    pm.expect(jsonData.projectIcon.id).to.eql(newRegisteredFileId)",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{registeredUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Project/{{ProjectIconProjectId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Project",
												"{{ProjectIconProjectId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "ProjectIcon-GetDeletedIcon-Registered",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "62ef20f4-5263-4b7e-9f2d-79afe8472894",
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"eval(pm.environment.get(\"commonTests\"))();\r",
													"\r",
													"pm.test(\"Status code is 404\", function () {\r",
													"    pm.response.to.have.status(404);\r",
													"});\r",
													"\r",
													"pm.test(\"Response must be valid and have a json body\", function () {\r",
													"    pm.response.to.be.notFound;\r",
													"    pm.response.to.be.withBody;\r",
													"    pm.response.to.be.json;\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{registeredUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/file/{{ProjectIconRegisteredFileId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"file",
												"{{ProjectIconRegisteredFileId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "ProjectIcon-GetNewIcon-Registered",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "686957a5-5b5d-4825-9dcc-f42a38b2237b",
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"eval(pm.environment.get(\"commonTests\"))();\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Response must be valid and have a json body\", function () {\r",
													"    pm.response.to.be.ok;\r",
													"    pm.response.to.be.withBody;\r",
													"    pm.response.to.be.json;\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{registeredUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/file/{{newRegisteredFileId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"file",
												"{{newRegisteredFileId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "ProjectIcon-DeleteProject-Registered",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "102d6e06-6713-4932-bdcf-9568bb784a2b",
												"exec": [
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{registeredUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Project/{{ProjectIconProjectId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Project",
												"{{ProjectIconProjectId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "ProjectIcon-GetNewIcon-Registered Copy",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "fe0a1200-ca73-4892-bad3-661e9399deb9",
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"eval(pm.environment.get(\"commonTests\"))();\r",
													"\r",
													"pm.test(\"Status code is 404\", function () {\r",
													"    pm.response.to.have.status(404);\r",
													"});\r",
													"\r",
													"pm.test(\"Response must be valid and have a json body\", function () {\r",
													"    pm.response.to.be.notFound;\r",
													"    pm.response.to.be.withBody;\r",
													"    pm.response.to.be.json;\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{registeredUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/file/{{ProjectIconRegisteredFileId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"file",
												"{{ProjectIconRegisteredFileId}}"
											]
										}
									},
									"response": []
								}
							],
							"description": "Testing if the icons are accessible, and get deleted when they are supposed to ",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "7d873208-5f42-4a53-b343-0e694fc2e9fb",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "b3873f58-2eba-48a1-9235-126b29d84103",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "CallToActionOption",
							"item": [
								{
									"name": "CallToActionOption-CreateCallToActionOption-Registered",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c360276d-7da6-4b3b-a761-4c392fdd5461",
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 403\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.forbidden;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "IdentityId",
												"value": "{{registeredUserIdentityId}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"type\": \"Title\",\n    \"value\": \"Provide feedback\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/CallToActionOption",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"CallToActionOption"
											]
										}
									},
									"response": []
								},
								{
									"name": "CallToActionOption-GetAllCallToActionOptions-Registered",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b192b6a6-7db7-4696-a68b-ae652e81360c",
												"exec": [
													"var optionId = parseInt(pm.environment.get(\"callToActionOptionId\"));",
													"",
													"var jsonData = pm.response.json();",
													"",
													"var foundAt;",
													"",
													"function findOption(jsonData, id) {",
													"    for (var i = 0; i < jsonData.length; i++) {",
													"        if (jsonData[i].id == id) {",
													"            return i;",
													"        }",
													"    }",
													"    return -1;",
													"}",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.ok;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Call to action option with id: \" + optionId + \" is in list\", function () {",
													"    foundAt = findOption(jsonData, optionId);",
													"    pm.expect(foundAt).to.not.eql(-1);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{registeredUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/CallToActionOption",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"CallToActionOption"
											]
										}
									},
									"response": []
								},
								{
									"name": "CallToActionOption-GetCallToActionOptionById-Registered",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "47cf50d2-f4c3-4902-bd20-c2e7ba965785",
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"pm.environment.set(\"callToActionOptionType\", jsonData.type);",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.ok;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Call to action option type is lowercase\", function () {",
													"    pm.expect(jsonData.type).to.eql(jsonData.type.toLowerCase());",
													"});",
													"",
													"pm.test(\"Call to action option value is lowercase\", function () {",
													"    pm.expect(jsonData.value).to.eql(jsonData.value.toLowerCase());",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"value": "{{registeredUserIdentityId}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/CallToActionOption/{{callToActionOptionId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"CallToActionOption",
												"{{callToActionOptionId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "CallToActionOption-GetCallToActionOptionByType-Registered",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ebcde4d1-2723-44e9-8183-edf892479df6",
												"exec": [
													"var callToActionOptionId = parseInt(pm.environment.get(\"callToActionOptionId\"));",
													"",
													"var jsonData = pm.response.json();",
													"",
													"function findOptionType(jsonData, id) {",
													"    for (var i = 0; i < jsonData.length; i++) {",
													"        if (jsonData[i].id == id) {",
													"            return i;",
													"        }",
													"    }",
													"    return -1;",
													"}",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.ok;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Call to action option id is \" + callToActionOptionId, function() {",
													"    foundAt = findOptionType(jsonData, callToActionOptionId);",
													"    pm.expect(foundAt).to.not.eql(-1);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{registeredUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/CallToActionOption/type/{{callToActionOptionType}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"CallToActionOption",
												"type",
												"{{callToActionOptionType}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "CallToActionOption-UpdateCallToActionOption-Registered",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "32fc70dc-d568-4f1f-80f4-71b5e6b67ac4",
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 403\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.forbidden;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "IdentityId",
												"value": "{{registeredUserIdentityId}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"type\": \"Updated type\",\r\n    \"value\": \"Updated value\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/CallToActionOption/{{callToActionOptionId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"CallToActionOption",
												"{{callToActionOptionId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "CallToActionOption-DeleteCallToActionOption-Registered",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b77dc7c0-0db3-4515-ad20-24cd3a45f29e",
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 403\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.forbidden;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "IdentityId",
												"value": "{{registeredUserIdentityId}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/CallToActionOption/{{callToActionOptionId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"CallToActionOption",
												"{{callToActionOptionId}}"
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "638a24df-5f21-4dca-8bcd-a451c0ab39dd",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "ca5b7bdb-a533-4978-9053-731d1e16d02f",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Cleanup",
							"item": [
								{
									"name": "Embed-DeleteEmbed-Self-Registered",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "84406690-6a8a-49d0-a29b-65ec14c42633",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.ok;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{administratorUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Embed/{{embedGuid}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Embed",
												"{{embedGuid}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Embed-DeleteEmbed-Other-Registered",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "bcc7b09d-879d-4ed3-bd0f-9bf04d448481",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.ok;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{administratorUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Embed/{{adminEmbedGuid}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Embed",
												"{{adminEmbedGuid}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Highlight-DeleteHighlight-Other-Registered",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "860b6ebd-f6f8-4b76-8565-a61dbcd0572b",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.ok;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{administratorUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Highlight/{{highlightId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Highlight",
												"{{highlightId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Project-DeleteProject-Self-Registered",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "bf9c65cf-ec08-48c7-b140-6571996f4035",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{administratorUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Project/{{projectId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Project",
												"{{projectId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Project-DeleteProject-Other-Registered",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "58a37eef-8590-4f20-9c95-6a8c7b22a43c",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.ok;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{administratorUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Project/1",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Project",
												"1"
											]
										}
									},
									"response": []
								},
								{
									"name": "Role-DeleteRole-Registered",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a5b47568-eade-4af7-906d-004a7f514b3c",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.ok;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{administratorUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Role/{{roleId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Role",
												"{{roleId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "User-DeleteUser-Other-Registered",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "caf20bf1-b595-4d48-8894-2da9f184c5c7",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.ok;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{administratorUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/User/{{createdUserId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"User",
												"{{createdUserId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "CallToActionOption-DeleteCallToActionOption-Registered",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "54adecf0-6efe-4277-8833-f1d34fc5f6e0",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.ok;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{administratorUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/CallToActionOption/{{callToActionOptionId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"CallToActionOption",
												"{{callToActionOptionId}}"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "File",
							"item": [
								{
									"name": "Get-Files-Registered",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "23b74d18-a32e-4889-85c4-ffa824c212a1",
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"eval(pm.environment.get(\"commonTests\"))();\r",
													"\r",
													"pm.test(\"Response must be valid and have a json body\", function () {\r",
													"    pm.response.to.be.withBody;\r",
													"    pm.response.to.be.json;\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"value": "{{registeredUserIdentityId}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/File",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"File"
											]
										}
									},
									"response": []
								},
								{
									"name": "Post-File-Registered",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "26f12af3-8bba-4038-8b49-bda9948230b9",
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.environment.set(\"registeredFileId\", jsonData.id)\r",
													"\r",
													"eval(pm.environment.get(\"commonTests\"))();\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Response must be valid and have a json body\", function () {\r",
													"     pm.response.to.be.success;\r",
													"     pm.response.to.be.withBody;\r",
													"     pm.response.to.be.json;\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "IdentityId",
												"value": "{{registeredUserIdentityId}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "File",
													"type": "file",
													"src": "Postman/testimage.png"
												}
											]
										},
										"url": {
											"raw": "{{apiUrl}}/api/File",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"File"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete-File-Registered",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "cdb2c1bd-128c-484e-b6a9-3ad4c692b535",
												"exec": [
													"eval(pm.environment.get(\"commonTests\"))();\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Response must be valid\", function () {\r",
													"     pm.response.to.be.ok;\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "IdentityId",
												"value": "{{registeredUserIdentityId}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/File/{{registeredFileId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"File",
												"{{registeredFileId}}"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Data Officer",
					"item": [
						{
							"name": "Preparation",
							"item": [
								{
									"name": "Institution-CreateInstitution",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e059ae21-3133-46f8-9c82-20e0694ba67e",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"var institutionName = pm.environment.get(\"institutionName\");",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.environment.set(\"createdInstitutionId\", jsonData.id);",
													"",
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.success;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});",
													"",
													"pm.test(\"Check if created Name matches: \" + institutionName, function () {",
													"    pm.expect(jsonData.name).to.eql(institutionName);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{administratorUserIdentityId}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"{{institutionName}}\",\n    \"description\": \"postmantest_initial_description\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/Institution",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Institution"
											]
										}
									},
									"response": []
								},
								{
									"name": "User-CreateUserWithoutInstitution",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d544bdfc-0586-485a-a416-d3cdad9ddd5b",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"var userName = pm.environment.get(\"userName\");",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.environment.set(\"createdUserId\", jsonData.id);",
													"pm.environment.set(\"identityId\", jsonData.id);",
													"",
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.success;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});",
													"",
													"pm.test(\"Check if created Username matches: \" + userName, function () {",
													"    pm.expect(jsonData.name).to.eql(userName);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{administratorUserIdentityId}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"identityId\": \"9996\",\n    \"name\": \"{{userName}}\",\n    \"email\": \"postmantest_email@example.com\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/User",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"User"
											]
										}
									},
									"response": []
								},
								{
									"name": "User-CreateUserWithInstitution",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "981ce482-f360-44a9-99cd-d97e40eba1e0",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"var userName = pm.environment.get(\"userName\");",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.environment.set(\"createdUserWithInstitutionId\", jsonData.id);",
													"",
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.success;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});",
													"",
													"pm.test(\"Check if created Username matches: \" + userName, function () {",
													"    pm.expect(jsonData.name).to.eql(userName);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{administratorUserIdentityId}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"identityId\": \"9996\",\n    \"name\": \"{{userName}}\",\n    \"email\": \"postmantest_email@example.com\",\n    \"institutionId\": {{institutionIdFromUser}}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/User",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"User"
											]
										}
									},
									"response": []
								},
								{
									"name": "Project-CreateProject-DifferentInstitution",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f80ce3a2-5f7c-49cf-a0a6-7cabb6203c15",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"var administratorUserId = parseInt(pm.environment.get(\"administratorUserId\"));",
													"var projectName = pm.environment.get(\"projectName\");",
													"var adminUserName = pm.environment.get(\"adminUserName\");",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.environment.set(\"projectId\", jsonData.id);",
													"pm.environment.set(\"adminProjectId\", jsonData.id);",
													"",
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.success;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});",
													"",
													"pm.test(\"Project Name is set correctly and matching: \" + projectName, function () {",
													"    pm.expect(jsonData.name).to.eql(projectName);",
													"});",
													"",
													"pm.test(\"User Name is correct and matching: \" + adminUserName, function () {",
													"    pm.expect(jsonData.user.name).to.eql(adminUserName);",
													"});",
													"",
													"pm.test(\"Identity ID is correct and matching: \" + administratorUserId, function () {",
													"    pm.expect(parseInt(jsonData.user.id)).to.eql(administratorUserId);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{administratorUserIdentityId}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"name\": \"{{projectName}}\",\r\n  \"description\": \"postmantest_description\",\r\n  \"shortDescription\": \"postmantest_shortdesc\",\r\n  \"uri\": \"postmantest_uri\",\r\n  \"collaborators\": [\r\n    {\r\n      \"fullName\": \"postmantest_collfullname\",\r\n      \"role\": \"postmantest_collrole\"\r\n    }\r\n  ],\r\n  \"created\": \"2020-04-20T08:24:26.693Z\",\r\n  \"updated\": \"2020-04-20T08:24:26.693Z\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/Project",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Project"
											]
										}
									},
									"response": []
								},
								{
									"name": "Project-CreateProject-SameInstitution",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "989e97fd-fc84-4488-89be-95f1d22f02d3",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.environment.set(\"projectIdWithInstitution\", jsonData.id);",
													"",
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.success;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "\"9996\""
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"name\": \"{{projectName}}\",\r\n  \"description\": \"postmantest_description\",\r\n  \"shortDescription\": \"postmantest_shortdesc\",\r\n  \"uri\": \"postmantest_uri\",\r\n  \"collaborators\": [\r\n    {\r\n      \"fullName\": \"postmantest_collfullname\",\r\n      \"role\": \"postmantest_collrole\"\r\n    }\r\n  ],\r\n  \"created\": \"2020-04-20T08:24:26.693Z\",\r\n  \"updated\": \"2020-04-20T08:24:26.693Z\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/Project",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Project"
											]
										}
									},
									"response": []
								},
								{
									"name": "Highlight-CreateHighlight",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5124842a-504a-47db-90c5-a1e71d70c2f8",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"var identityId = parseInt(pm.environment.get(\"identityId\"));",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.environment.set(\"highlightId\", jsonData.id);",
													"",
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.success;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "79367799-4c66-4159-bcda-4283268c84b5",
												"exec": [
													"var current_timestamp = new Date();\r",
													"postman.setEnvironmentVariable(\"current_timestamp\", current_timestamp.toISOString());\r",
													"\r",
													"var future_timestamp = new Date(Date.now() +(2 * 86400000));\r",
													"postman.setEnvironmentVariable(\"future_timestamp\", future_timestamp.toISOString());\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{administratorUserIdentityId}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"projectId\": {{projectId}},\r\n  \"startDate\": \"{{current_timestamp}}\",\r\n  \"endDate\": \"{{future_timestamp}}\",\r\n  \"description\" : \"Lorem Ipsum\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/Highlight",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Highlight"
											]
										}
									},
									"response": []
								},
								{
									"name": "Embed-CreateEmbed-DifferentInstitution",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "9b5b0148-f75a-40c6-814e-7baf34f6f872",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.environment.set(\"embedGuid\", jsonData.guid);",
													"pm.environment.set(\"adminEmbedGuid\", jsonData.guid);",
													"pm.environment.set(\"embeddedProjectId\", jsonData.project.id);",
													"",
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.success;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{administratorUserIdentityId}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"projectId\": {{projectId}}\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/Embed",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Embed"
											]
										}
									},
									"response": []
								},
								{
									"name": "Embed-CreateEmbed-SameInstitution",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "17eb3f80-c2c1-496e-aa4c-b387a0126dcd",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.environment.set(\"embedGuidWithInstitution\", jsonData.guid);",
													"",
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.success;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "\"9996\""
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"projectId\": {{projectIdWithInstitution}}\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/Embed",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Embed"
											]
										}
									},
									"response": []
								},
								{
									"name": "Role-CreateRole",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3ea2b4f0-32dc-4dd0-a222-9a72f62225e6",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"var scopeName = pm.environment.get(\"scopeName\");",
													"var roleName = pm.environment.get(\"roleName\");",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.environment.set(\"roleId\", jsonData.id);",
													"",
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.success;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});",
													"",
													"pm.test(\"Role Name is set correctly and matching: \" + roleName, function () {",
													"    pm.expect(jsonData.name).to.eql(roleName);",
													"});",
													"",
													"pm.test(\"Scope is correct and matching: \" + scopeName, function () {",
													"    pm.expect(jsonData.scopes.scope).to.eql(scopeName);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{administratorUserIdentityId}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"name\": \"{{roleName}}\",\r\n  \"scopes\": [\r\n    {\r\n      \"scope\": \"EmbedWrite\"\r\n    }\r\n  ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/Role",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Role"
											]
										}
									},
									"response": []
								},
								{
									"name": "CallToActionOption-CreateCallToActionOption",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "42869d32-00e4-4149-9552-d075bd2f46ff",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.environment.set(\"callToActionOptionId\", jsonData.id);",
													"",
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.success;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});",
													"",
													"pm.test(\"Call to action option type is lowercase\", function () {",
													"    pm.expect(jsonData.type).to.eql(jsonData.type.toLowerCase());",
													"});",
													"",
													"pm.test(\"Call to action option value is lowercase\", function () {",
													"    pm.expect(jsonData.value).to.eql(jsonData.value.toLowerCase());",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{administratorUserIdentityId}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"type\": \"Title\",\r\n  \"value\": \"Contact\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/CallToActionOption",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"CallToActionOption"
											]
										}
									},
									"response": []
								}
							],
							"description": "For some requests, we need to have data available. The variables need to be filled so the request can succeed. We put these preparation requests in this folder. We will clean them up in the cleanup folder.",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "70b3e908-1856-4c5e-9939-b79619a12d0b",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "a99ca8eb-a1cb-4bc3-ba90-555ee56fb818",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "User",
							"item": [
								{
									"name": "User-CreateUser-DataOfficer",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "bb487be3-56f2-40ba-a348-90384eccf9da",
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 403\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.forbidden;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{dataOfficerUserIdentityId}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"identityId\": \"{{createdUserId}}\",\n    \"name\": \"{{userName}}\",\n    \"email\": \"postmantest_email@example.com\",\n    \"institutionId\": {{createdInstitutionId}}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/User",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"User"
											]
										}
									},
									"response": []
								},
								{
									"name": "User-GetUser-Other-DifferentInstitution-DataOfficer",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "190c042d-50cd-4002-9190-48e8a65db0da",
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 403\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.forbidden;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{dataOfficerUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/User/{{createdUserId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"User",
												"{{createdUserId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "User-GetUser-Other-SameInstitution-DataOfficer",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "7d3215d3-44fa-489c-93fd-4d41f13cea12",
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.ok;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{dataOfficerUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/User/{{createdUserWithInstitutionId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"User",
												"{{createdUserWithInstitutionId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "User-GetUser-Self-DataOfficer",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c584c19d-547e-4059-b99e-a3ce3a0b2d59",
												"exec": [
													"var aliceIdentityId = parseInt(pm.environment.get(\"dataOfficerUserIdentityId\"));",
													"",
													"var jsonData = pm.response.json();",
													"pm.environment.set(\"dataOfficerUserId\", jsonData.id);",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.ok;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Identity ID is correct and matching: \" + aliceIdentityId, function () {",
													"    pm.expect(parseInt(jsonData.identityId)).to.eql(aliceIdentityId);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{dataOfficerUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/User",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"User"
											]
										}
									},
									"response": []
								},
								{
									"name": "User-UpdateUser-Self-DataOfficer",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "9c99eec8-5c9f-437e-8f54-657b25877101",
												"exec": [
													"var updatedAliceEmail = pm.environment.get(\"updatedAliceEmail\");",
													"",
													"var jsonData = pm.response.json();",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.ok;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Check if email update matches: \" + updatedAliceEmail, function () {",
													"    pm.expect(jsonData.email).to.eql(updatedAliceEmail);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{dataOfficerUserIdentityId}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"name\": \"alicez\",\r\n  \"email\": \"{{updatedAliceEmail}}\",\r\n  \"identityId\": \"{{dataOfficerUserIdentityId}}\",\r\n  \"institutionId\": 1\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/User/{{dataOfficerUserId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"User",
												"{{dataOfficerUserId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "User-UpdateUser-Other-DataOfficer",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "317bc983-b22c-4564-89de-8984d7cf25f5",
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 401\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.unauthorized;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{dataOfficerUserIdentityId}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"name\": \"bobz\",\r\n  \"email\": \"BobSmith@email.com\",\r\n  \"identityId\": {{administratorUserIdentityId}}\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/User/{{createdUserId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"User",
												"{{createdUserId}}"
											]
										}
									},
									"response": []
								}
							],
							"description": "Requests executed as the Alice user with the registered role.",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "9f1a3a27-2af1-4905-a147-0bdcebb39e31",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "7b2acf5e-5ef2-4f08-937e-f0b08294e05f",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Project",
							"item": [
								{
									"name": "Project-CreateProject-DataOfficer",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "7238ab0e-c800-4cf7-a2f6-72204889b8e4",
												"exec": [
													"var registeredUserId = pm.environment.get(\"dataOfficerUserId\");",
													"var projectName = pm.environment.get(\"projectName\");",
													"",
													"var jsonData = pm.response.json();",
													"pm.environment.set(\"projectId\", jsonData.id);",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Project Name is set correctly and matches: \" + projectName, function () {",
													"    pm.expect(jsonData.name).to.eql(projectName);",
													"});",
													"",
													"pm.test(\"Identity Id is set correctly and matches: \" + registeredUserId, function () {",
													"    pm.expect(jsonData.user.id).to.eql(registeredUserId);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{dataOfficerUserIdentityId}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"name\": \"{{projectName}}\",\r\n  \"description\": \"postmantest_description\",\r\n  \"shortDescription\": \"postmantest_shortdesc\",\r\n  \"uri\": \"postmantest_uri\",\r\n  \"collaborators\": [\r\n    {\r\n      \"fullName\": \"postmantest_collfullname\",\r\n      \"role\": \"postmantest_collrole\"\r\n    }\r\n  ],\r\n  \"created\": \"2020-04-20T08:24:26.693Z\",\r\n  \"updated\": \"2020-04-20T08:24:26.693Z\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/Project",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Project"
											]
										}
									},
									"response": []
								},
								{
									"name": "Project-GetAllProjects-DataOfficer",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ebd9b794-ebd4-4535-acc4-7e609f4f1a5b",
												"exec": [
													"var projectName = pm.environment.get(\"projectName\");",
													"",
													"var jsonData = pm.response.json();",
													"",
													"var foundAt;",
													"",
													"function findProject(jsonData, name) {",
													"    for (var i = 0; i < jsonData.results.length; i++) {",
													"        if (jsonData.results[i].name == name) {",
													"            return i;",
													"        }",
													"    }",
													"    return -1;",
													"}",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Project: \" + projectName + \" is in list\", function () {",
													"    foundAt = findProject(jsonData, projectName);",
													"    pm.expect(foundAt).to.not.eql(-1);",
													"});",
													"",
													"pm.test(\"Project Name is set correctly and matching: \" + projectName, function () {",
													"    pm.expect(jsonData.results[foundAt].name).to.eql(projectName);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{dataOfficerUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Project",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Project"
											]
										}
									},
									"response": []
								},
								{
									"name": "Project-GetProject-Self-DataOfficer",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "aff50bf4-1297-4bb3-b431-dc2b8e35e754",
												"exec": [
													"var projectName = pm.environment.get(\"projectName\");",
													"",
													"var jsonData = pm.response.json();",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Project Name is set correctly and matches: \" + projectName, function () {",
													"    pm.expect(jsonData.name).to.eql(projectName);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{dataOfficerUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Project/{{projectId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Project",
												"{{projectId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Project-GetProject-Other-DataOfficer",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "152b0dd6-a96d-4307-a745-aec13bc95baf",
												"exec": [
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{dataOfficerUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Project/{{adminProjectId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Project",
												"{{adminProjectId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Project-UpdateProject-Self-DataOfficer",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3cc51d90-b62d-4556-b252-10037bb00fce",
												"exec": [
													"var projectName = pm.environment.get(\"projectNameUpdated\");",
													"",
													"var jsonData = pm.response.json();",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.ok;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Project Name is set correctly and matches: \" + projectName, function () {",
													"    pm.expect(jsonData.name).to.eql(projectName);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{dataOfficerUserIdentityId}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"name\": \"{{projectNameUpdated}}\",\r\n  \"description\": \"postmantest_description\",\r\n  \"shortDescription\": \"postmantest_shortdesc\",\r\n  \"uri\": \"postmantest_uri\",\r\n  \"collaborators\": [\r\n    {\r\n      \"fullName\": \"postmantest_collfullname\",\r\n      \"role\": \"postmantest_collrole\"\r\n    }\r\n  ],\r\n  \"created\": \"2020-04-20T08:24:26.693Z\",\r\n  \"updated\": \"2020-04-20T08:24:26.693Z\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/Project/{{projectId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Project",
												"{{projectId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Project-UpdateProject-Other-DataOfficer",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e3caea87-a210-45fb-a9b6-c4b631932160",
												"exec": [
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 401\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"    pm.response.to.be.unauthorized;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{dataOfficerUserIdentityId}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"name\": \"{{projectNameUpdated}}\",\r\n  \"description\": \"postmantest_description\",\r\n  \"shortDescription\": \"postmantest_shortdesc\",\r\n  \"uri\": \"postmantest_uri\",\r\n  \"collaborators\": [\r\n    {\r\n      \"fullName\": \"postmantest_collfullname\",\r\n      \"role\": \"postmantest_collrole\"\r\n    }\r\n  ],\r\n  \"created\": \"2020-04-20T08:24:26.693Z\",\r\n  \"updated\": \"2020-04-20T08:24:26.693Z\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/Project/{{adminProjectId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Project",
												"{{adminProjectId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Project-LikeProject-DataOfficer",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "28ee2966-236d-4e8f-a3e1-9b19ce017c97",
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"eval(pm.environment.get(\"commonTests\"))();\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Response must be valid and have a json body\", function () {\r",
													"     pm.response.to.be.ok;\r",
													"     pm.response.to.be.withBody;\r",
													"     pm.response.to.be.json;\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{dataOfficerUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Project/like/{{projectId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Project",
												"like",
												"{{projectId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Project-DeleteLikeProject-DataOfficer",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "1e51528e-914e-483c-a465-b4ac446f4dd4",
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"eval(pm.environment.get(\"commonTests\"))();\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Response must be valid and have a json body\", function () {\r",
													"     pm.response.to.be.ok;\r",
													"     pm.response.to.be.withBody;\r",
													"     pm.response.to.be.json;\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{dataOfficerUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Project/like/{{projectId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Project",
												"like",
												"{{projectId}}"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Embed",
							"item": [
								{
									"name": "Embed-CreateEmbed-Self-DataOfficer",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "58cb575d-569b-44b7-8baf-3a227a889250",
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"pm.environment.set(\"embedGuid\", jsonData.guid);",
													"pm.environment.set(\"embeddedProjectId\", jsonData.project.id);",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.success;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{dataOfficerUserIdentityId}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"projectId\": {{projectId}}\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/Embed",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Embed"
											]
										}
									},
									"response": []
								},
								{
									"name": "Embed-CreateEmbed-Other-DataOfficer",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6e112956-1bbb-4099-b05b-dd52fb2b2828",
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 401\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.unauthorized;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{dataOfficerUserIdentityId}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"projectId\": {{adminProjectId}}\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/Embed",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Embed"
											]
										}
									},
									"response": []
								},
								{
									"name": "Embed-GetAllEmbeds-DataOfficer",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a4de46b8-d5d2-476f-99f7-af5f4f40b2ae",
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 403\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.forbidden;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{dataOfficerUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Embed",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Embed"
											]
										}
									},
									"response": []
								},
								{
									"name": "Embed-GetEmbed-DataOfficer",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c475924c-95c1-4bb0-aa67-7dac5788761a",
												"exec": [
													"var embeddedProjectId = parseInt(pm.environment.get(\"embeddedProjectId\"))",
													"",
													"var jsonData = pm.response.json();",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Embed matches: \" + embeddedProjectId, function () {",
													"    pm.expect(jsonData.id).to.eql(embeddedProjectId);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{dataOfficerUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Embed/{{embedGuid}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Embed",
												"{{embedGuid}}"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Highlight",
							"item": [
								{
									"name": "Highlight-CreateHighlight-DataOfficer",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a5de0598-192f-4796-acbe-effe3948c97d",
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 403\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.forbidden;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "1a10e7de-0317-4649-be0e-c07c41d1f55e",
												"exec": [
													"var current_timestamp = new Date();\r",
													"postman.setEnvironmentVariable(\"current_timestamp\", current_timestamp.toISOString());\r",
													"\r",
													"var future_timestamp = new Date(Date.now() +(2 * 86400000));\r",
													"postman.setEnvironmentVariable(\"future_timestamp\", future_timestamp.toISOString());\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{dataOfficerUserIdentityId}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"projectId\": {{projectId}},\r\n  \"startDate\": \"{{current_timestamp}}\",\r\n  \"endDate\": \"{{future_timestamp}}\",\r\n  \"description\" : \"Lorem Ipsum\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/Highlight",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Highlight"
											]
										}
									},
									"response": []
								},
								{
									"name": "Highlight-GetAllActiveHighlights-DataOfficer",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3e762e0a-f15d-4490-ace8-c825a6357593",
												"exec": [
													"var projectId = pm.environment.get(\"adminProjectId\");",
													"",
													"var jsonData = pm.response.json();",
													"",
													"var foundAt;",
													"",
													"function findItem(jsonData, item) {",
													"    for (var i = 0; i < jsonData.length; i++) {",
													"        if (jsonData[i].projectId == item) {",
													"            return i;",
													"        }",
													"    }",
													"    return -1;",
													"}",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Highlight is in list and matching: \" + projectId, function () {",
													"    foundAt = findItem(jsonData, projectId);",
													"    pm.expect(foundAt).to.not.eql(-1);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{dataOfficerUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Highlight",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Highlight"
											]
										}
									},
									"response": []
								},
								{
									"name": "Highlight-GetHighlight-DataOfficer",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d66d4400-fda8-410b-a37f-b47a4dd26f1c",
												"exec": [
													"var identityId = parseInt(pm.environment.get(\"identityId\"));",
													"var highlightId = parseInt(pm.environment.get(\"highlightId\"));",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.environment.set(\"highlightStartDate\", jsonData.startDate);",
													"pm.environment.set(\"highlightEndDate\", jsonData.endDate);",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Highlight Id matches: \" + highlightId, function () {",
													"    pm.expect(jsonData.id).to.eql(highlightId);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{dataOfficerUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Highlight/{{highlightId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Highlight",
												"{{highlightId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Highlight-GetHighlight-ByProject-DataOfficer",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "75ccb9b2-fb58-44d2-b9bb-734714f7c680",
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 403\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"    pm.response.to.be.forbidden;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json;",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{dataOfficerUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Highlight/Project/{{projectId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Highlight",
												"Project",
												"{{projectId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Highlight-UpdateHighlight-DataOfficer",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "dfc4cb9a-6081-4cad-be7e-78da2c89c4e9",
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 403\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.forbidden;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "IdentityId",
												"value": "{{dataOfficerUserIdentityId}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"projectId\": \"{{projectId}}\",\r\n  \"startDate\": \"{{current_timestamp}}\",\r\n  \"endDate\": \"{{highlightEndDate}}\",\r\n  \"description\" : \"Lorem Ipsum\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/Highlight/{{highlightId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Highlight",
												"{{highlightId}}"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Role",
							"item": [
								{
									"name": "Role-CreateRole-DataOfficer",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "52841b84-dc29-47a9-95d9-1f5bcf92f4b0",
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 403\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.forbidden;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{dataOfficerUserIdentityId}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"name\": \"{{roleName}}\",\r\n  \"scopes\": [\r\n    {\r\n      \"scope\": \"EmbedWrite\"\r\n    }\r\n  ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/Role",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Role"
											]
										}
									},
									"response": []
								},
								{
									"name": "Role-GetAllRoles-DataOfficer",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b2dc3c50-0351-4883-970b-89a27b59099a",
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 403\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.forbidden;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{dataOfficerUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Role",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Role"
											]
										}
									},
									"response": []
								},
								{
									"name": "Scope-GetAllScopes-DataOfficer",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "cf30afbb-7608-42d0-ba07-3c9e07fe9efd",
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 403\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.forbidden;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{dataOfficerUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Role/Scopes",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Role",
												"Scopes"
											]
										}
									},
									"response": []
								},
								{
									"name": "Role-GetRole-DataOfficer",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2a9e6939-b1ee-4095-9212-fd49a1c14fed",
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 403\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.forbidden;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{dataOfficerUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Role/{{roleId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Role",
												"{{roleId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Role-UpdateRole-DataOfficer",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "9a1c1eff-3a3f-4ff7-b64e-97667ec1c807",
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 403\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.forbidden;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{dataOfficerUserIdentityId}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"name\": \"{{updatedRoleName}}\",\r\n  \"scopes\": [\r\n    {\r\n      \"scope\": \"EmbedWrite\"\r\n    }\r\n  ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/Role/{{roleId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Role",
												"{{roleId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Role-SetRole-DataOfficer",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "88c444a6-51f8-48f8-9112-87dac48b3c1e",
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 403\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.forbidden;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{dataOfficerUserIdentityId}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"createdUserId\": {{createdUserId}},\r\n  \"name\": \"{{projectNameUpdated}}\",\r\n  \"description\": \"postmantest_description\",\r\n  \"shortDescription\": \"postmantest_shortdesc\",\r\n  \"uri\": \"postmantest_uri\",\r\n  \"collaborators\": [\r\n    {\r\n      \"fullName\": \"postmantest_collfullname\",\r\n      \"role\": \"postmantest_collrole\"\r\n    }\r\n  ],\r\n  \"created\": \"2020-04-20T08:24:26.693Z\",\r\n  \"updated\": \"2020-04-20T08:24:26.693Z\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/Role/setRole?createdUserId={{createdUserId}}&roleId={{roleId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Role",
												"setRole"
											],
											"query": [
												{
													"key": "createdUserId",
													"value": "{{createdUserId}}",
													"description": "Id of the user that we want to update"
												},
												{
													"key": "roleId",
													"value": "{{roleId}}",
													"description": "Id of the role that you want to update the user with"
												}
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Search",
							"item": [
								{
									"name": "Search-SearchInternal-DataOfficer",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d5212f3c-22f6-46bb-8034-3b1c58af1d1e",
												"exec": [
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.ok;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{dataOfficerUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Search/internal/{{projectName}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Search",
												"internal",
												"{{projectName}}"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Wizard",
							"item": [
								{
									"name": "Wizard-GetWizard-DataOfficer",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f70163cf-44e9-4ab8-96ed-2afe20ef2195",
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{dataOfficerUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Wizard?sourceURI={{wizardSourceUri}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Wizard"
											],
											"query": [
												{
													"key": "sourceURI",
													"value": "{{wizardSourceUri}}",
													"description": "This is the URI that the wizard will use to fetch the source."
												}
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Institution",
							"item": [
								{
									"name": "Institution-CreateInstitution-DataOfficer",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "173af2c3-f7db-4bdd-b8dd-a1d156a1556d",
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 401\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.unauthorized;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"identityId\": \"98764342123\",\n    \"name\": \"mycooltestusername\",\n    \"email\": \"postmantest_email@example.com\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/User",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"User"
											]
										}
									},
									"response": []
								},
								{
									"name": "Institution-GetInstitution-DataOfficer",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2ed551a0-a73b-430e-9f96-40b2b07dc2f9",
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 401\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.unauthorized;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{apiUrl}}/api/User/1",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"User",
												"1"
											]
										}
									},
									"response": []
								},
								{
									"name": "Institution-UpdateInstitution-DataOfficer",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2e0e2120-ee4d-4502-be5f-84c345e5e5e2",
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 401\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.unauthorized;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"name\": \"bobz\",\r\n  \"email\": \"BobSmith@email.com\",\r\n  \"identityId\": {{administratorUserIdentityId}}\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/User/1",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"User",
												"1"
											]
										}
									},
									"response": []
								},
								{
									"name": "Instituiton-DeleteInstitution-DataOfficer",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "432e9a64-ba70-451e-aa12-5d5406f86fc1",
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 401\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.unauthorized;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{apiUrl}}/api/User/1",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"User",
												"1"
											]
										}
									},
									"response": []
								}
							],
							"auth": {
								"type": "noauth"
							},
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "bad411b3-f0a3-45d1-b6d2-5bf260a5334f",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "b60963dd-5a84-4516-81c5-29eea83fbeb7",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "CallToActionOption",
							"item": [
								{
									"name": "CallToActionOption-CreateCallToActionOption-DataOfficer",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "076d5402-ee68-4cbb-a64b-4dbf38a1fcc0",
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 403\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.forbidden;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "IdentityId",
												"value": "{{dataOfficerUserIdentityId}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"type\": \"Title\",\n    \"value\": \"Provide feedback\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/CallToActionOption",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"CallToActionOption"
											]
										}
									},
									"response": []
								},
								{
									"name": "CallToActionOption-GetAllCallToActionOptions-DataOfficer",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "15257270-9b1d-4d30-b7cc-22f5a6eb6102",
												"exec": [
													"var optionId = parseInt(pm.environment.get(\"callToActionOptionId\"));",
													"",
													"var jsonData = pm.response.json();",
													"",
													"var foundAt;",
													"",
													"function findOption(jsonData, id) {",
													"    for (var i = 0; i < jsonData.length; i++) {",
													"        if (jsonData[i].id == id) {",
													"            return i;",
													"        }",
													"    }",
													"    return -1;",
													"}",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.ok;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Call to action option with id: \" + optionId + \" is in list\", function () {",
													"    foundAt = findOption(jsonData, optionId);",
													"    pm.expect(foundAt).to.not.eql(-1);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{dataOfficerUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/CallToActionOption",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"CallToActionOption"
											]
										}
									},
									"response": []
								},
								{
									"name": "CallToActionOption-GetCallToActionOptionById-DataOfficer",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "0bcd7738-b03b-4786-b232-5053b745709f",
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"pm.environment.set(\"callToActionOptionType\", jsonData.type);",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.ok;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Call to action option type is lowercase\", function () {",
													"    pm.expect(jsonData.type).to.eql(jsonData.type.toLowerCase());",
													"});",
													"",
													"pm.test(\"Call to action option value is lowercase\", function () {",
													"    pm.expect(jsonData.value).to.eql(jsonData.value.toLowerCase());",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"value": "{{dataOfficerUserIdentityId}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/CallToActionOption/{{callToActionOptionId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"CallToActionOption",
												"{{callToActionOptionId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "CallToActionOption-GetCallToActionOptionByType-DataOfficer",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "978845f8-cd35-4510-ac88-f24a63c7f450",
												"exec": [
													"var callToActionOptionId = parseInt(pm.environment.get(\"callToActionOptionId\"));",
													"",
													"var jsonData = pm.response.json();",
													"",
													"function findOptionType(jsonData, id) {",
													"    for (var i = 0; i < jsonData.length; i++) {",
													"        if (jsonData[i].id == id) {",
													"            return i;",
													"        }",
													"    }",
													"    return -1;",
													"}",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.ok;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Call to action option id is \" + callToActionOptionId, function() {",
													"    foundAt = findOptionType(jsonData, callToActionOptionId);",
													"    pm.expect(foundAt).to.not.eql(-1);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{dataOfficerUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/CallToActionOption/type/{{callToActionOptionType}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"CallToActionOption",
												"type",
												"{{callToActionOptionType}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "CallToActionOption-UpdateCallToActionOption-DataOfficer",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "78eb6f95-9711-48b2-8ed2-10cc758fbb38",
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 403\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.forbidden;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "IdentityId",
												"value": "{{dataOfficerUserIdentityId}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"type\": \"Updated type\",\r\n    \"value\": \"Updated value\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/CallToActionOption/{{callToActionOptionId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"CallToActionOption",
												"{{callToActionOptionId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "CallToActionOption-DeleteCallToActionOption-DataOffficer",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "7a2f9547-5f13-45c6-998f-a6c3a118794b",
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 403\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.forbidden;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "IdentityId",
												"value": "{{dataOfficerUserIdentityId}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/CallToActionOption/{{callToActionOptionId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"CallToActionOption",
												"{{callToActionOptionId}}"
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "924363e6-6218-42cd-8919-8507442bcf8b",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "e4ed46c0-e4e5-49b0-8ed1-4122ba9997dd",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Cleanup",
							"item": [
								{
									"name": "Embed-DeleteEmbed-Self-DataOfficer",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a729179c-a4f9-4497-bf37-f72fb8339539",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.ok;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{administratorUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Embed/{{embedGuid}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Embed",
												"{{embedGuid}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Embed-DeleteEmbed-Other-DifferentInstitution-DataOfficer",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4acbdc37-2aaf-41ae-89a1-7804787c2e49",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.ok;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{administratorUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Embed/{{adminEmbedGuid}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Embed",
												"{{adminEmbedGuid}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Embed-DeleteEmbed-Other-SameInstitution-DataOfficer",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "402a8e37-1589-44a4-aaa7-f4677e20c4e3",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.ok;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{administratorUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Embed/{{embedGuidWithInstitution}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Embed",
												"{{embedGuidWithInstitution}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Highlight-DeleteHighlight-Other-DataOfficer",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "75c2fb11-7101-4d3c-9a4a-7ee57481ac22",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.ok;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{administratorUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Highlight/{{highlightId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Highlight",
												"{{highlightId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Project-DeleteProject-Self-DataOfficer",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f34f2b77-5328-4369-a596-4b2510257edc",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.ok;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{administratorUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Project/{{projectId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Project",
												"{{projectId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Project-DeleteProject-Other-OtherInstitution-DataOfficer",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "31a32b30-7043-48a7-be92-91802f8433bb",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.ok;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{administratorUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Project/1",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Project",
												"1"
											]
										}
									},
									"response": []
								},
								{
									"name": "Project-DeleteProject-Other-SameInstitution-DataOfficer",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "8937f143-06e5-4720-92cb-f91064bf046f",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.ok;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{administratorUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Project/{{projectIdWithInstitution}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Project",
												"{{projectIdWithInstitution}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Role-DeleteRole-DataOfficer",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "21f5d1b6-31f0-4846-9212-cde66098cc91",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.ok;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{administratorUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Role/{{roleId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Role",
												"{{roleId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "User-DeleteUser-Other-DifferentInstitution-DataOfficer",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2dcce4ff-f9fe-4f08-8775-d2ba6a9c4271",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.ok;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{administratorUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/User/{{createdUserId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"User",
												"{{createdUserId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "User-DeleteUser-Other-SameInstitution-DataOfficer",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "27750a9c-f5b5-47ae-b290-35e761a0c08c",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.ok;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{administratorUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/User/{{createdUserWithInstitutionId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"User",
												"{{createdUserWithInstitutionId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "CallToActionOption-DeleteCallToActionOption-DataOfficer",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "8e6b17ed-e790-44ba-9314-3dd455a112d0",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.ok;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{administratorUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/CallToActionOption/{{callToActionOptionId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"CallToActionOption",
												"{{callToActionOptionId}}"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "File",
							"item": [
								{
									"name": "Post-File-DataOfficer",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ec12cd4e-2dc4-411c-b191-364a3c627f5b",
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.environment.set(\"dataOfficerFileId\", jsonData.id)\r",
													"\r",
													"eval(pm.environment.get(\"commonTests\"))();\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Response must be valid and have a json body\", function () {\r",
													"     pm.response.to.be.withBody;\r",
													"     pm.response.to.be.json;\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "IdentityId",
												"value": "{{dataOfficerUserIdentityId}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "File",
													"type": "file",
													"src": "Postman/testimage.png"
												}
											]
										},
										"url": {
											"raw": "{{apiUrl}}/api/File",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"File"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get-Files-DataOfficer",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "1c9911b4-91a2-4a53-b329-24717873e5aa",
												"exec": [
													"eval(pm.environment.get(\"commonTests\"))();\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Response must be valid and have a json body\", function () {\r",
													"    pm.response.to.be.withBody;\r",
													"    pm.response.to.be.json;\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"value": "{{dataOfficerUserIdentityId}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/File",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"File"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete-File-DataOfficer",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "590eb4ac-9f8f-4179-80a6-bf67f3c6c497",
												"exec": [
													"eval(pm.environment.get(\"commonTests\"))();\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Response must be valid\", function () {\r",
													"     pm.response.to.be.ok;\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{dataOfficerUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/File/{{dataOfficerFileId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"File",
												"{{dataOfficerFileId}}"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "PR",
					"item": [
						{
							"name": "Preparation",
							"item": [
								{
									"name": "User-CreateUser",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "1c5cfad5-425c-4aff-93fb-30a4fe0b0c2c",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"var userName = pm.environment.get(\"userName\");",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.environment.set(\"createdUserId\", jsonData.id);",
													"pm.environment.set(\"identityId\", jsonData.id);",
													"",
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.success;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});",
													"",
													"pm.test(\"Check if created Username matches: \" + userName, function () {",
													"    pm.expect(jsonData.name).to.eql(userName);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{administratorUserIdentityId}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"identityId\": \"9996\",\n    \"name\": \"{{userName}}\",\n    \"email\": \"postmantest_email@example.com\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/User",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"User"
											]
										}
									},
									"response": []
								},
								{
									"name": "Project-CreateProject",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "59563dad-2063-4920-977c-a26056ec581c",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"var administratorUserId = parseInt(pm.environment.get(\"administratorUserId\"));",
													"var projectName = pm.environment.get(\"projectName\");",
													"var adminUserName = pm.environment.get(\"adminUserName\");",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.environment.set(\"projectId\", jsonData.id);",
													"pm.environment.set(\"adminProjectId\", jsonData.id);",
													"",
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.success;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});",
													"",
													"pm.test(\"Project Name is set correctly and matching: \" + projectName, function () {",
													"    pm.expect(jsonData.name).to.eql(projectName);",
													"});",
													"",
													"pm.test(\"User Name is correct and matching: \" + adminUserName, function () {",
													"    pm.expect(jsonData.user.name).to.eql(adminUserName);",
													"});",
													"",
													"pm.test(\"Identity ID is correct and matching: \" + administratorUserId, function () {",
													"    pm.expect(parseInt(jsonData.user.id)).to.eql(administratorUserId);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{administratorUserIdentityId}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"name\": \"{{projectName}}\",\r\n  \"description\": \"postmantest_description\",\r\n  \"shortDescription\": \"postmantest_shortdesc\",\r\n  \"uri\": \"postmantest_uri\",\r\n  \"collaborators\": [\r\n    {\r\n      \"fullName\": \"postmantest_collfullname\",\r\n      \"role\": \"postmantest_collrole\"\r\n    }\r\n  ],\r\n  \"created\": \"2020-04-20T08:24:26.693Z\",\r\n  \"updated\": \"2020-04-20T08:24:26.693Z\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/Project",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Project"
											]
										}
									},
									"response": []
								},
								{
									"name": "Highlight-CreateHighlight",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "acf9e62f-9220-42ab-89ff-68d0bd134e9c",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"var identityId = parseInt(pm.environment.get(\"identityId\"));",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.environment.set(\"highlightId\", jsonData.id);",
													"",
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.success;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "bac7b6d3-fbc8-4993-ba06-598afc83b6b5",
												"exec": [
													"var current_timestamp = new Date();\r",
													"postman.setEnvironmentVariable(\"current_timestamp\", current_timestamp.toISOString());\r",
													"\r",
													"var future_timestamp = new Date(Date.now() +(2 * 86400000));\r",
													"postman.setEnvironmentVariable(\"future_timestamp\", future_timestamp.toISOString());\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{administratorUserIdentityId}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"projectId\": {{projectId}},\r\n  \"startDate\": \"{{current_timestamp}}\",\r\n  \"endDate\": \"{{future_timestamp}}\",\r\n  \"description\" : \"Lorem Ipsum\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/Highlight",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Highlight"
											]
										}
									},
									"response": []
								},
								{
									"name": "Embed-CreateEmbed",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b1da09fd-1790-41f9-bdea-48d28e50f76d",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.environment.set(\"embedGuid\", jsonData.guid);",
													"pm.environment.set(\"embeddedProjectId\", jsonData.project.id);",
													"",
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.success;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{administratorUserIdentityId}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"projectId\": {{projectId}}\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/Embed",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Embed"
											]
										}
									},
									"response": []
								},
								{
									"name": "Role-CreateRole",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a868bd1b-5c19-4e0a-8250-ffcaec8417fa",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"var scopeName = pm.environment.get(\"scopeName\");",
													"var roleName = pm.environment.get(\"roleName\");",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.environment.set(\"roleId\", jsonData.id);",
													"",
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.success;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});",
													"",
													"pm.test(\"Role Name is set correctly and matching: \" + roleName, function () {",
													"    pm.expect(jsonData.name).to.eql(roleName);",
													"});",
													"",
													"pm.test(\"Scope is correct and matching: \" + scopeName, function () {",
													"    pm.expect(jsonData.scopes.scope).to.eql(scopeName);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{administratorUserIdentityId}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"name\": \"{{roleName}}\",\r\n  \"scopes\": [\r\n    {\r\n      \"scope\": \"EmbedWrite\"\r\n    }\r\n  ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/Role",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Role"
											]
										}
									},
									"response": []
								},
								{
									"name": "CallToActionOption-CreateCallToActionOption",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c1847b13-5133-4071-b761-55339b37b3d6",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.environment.set(\"callToActionOptionId\", jsonData.id);",
													"",
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.success;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});",
													"",
													"pm.test(\"Call to action option type is lowercase\", function () {",
													"    pm.expect(jsonData.type).to.eql(jsonData.type.toLowerCase());",
													"});",
													"",
													"pm.test(\"Call to action option value is lowercase\", function () {",
													"    pm.expect(jsonData.value).to.eql(jsonData.value.toLowerCase());",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{administratorUserIdentityId}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"type\": \"Title\",\r\n  \"value\": \"Review\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/CallToActionOption",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"CallToActionOption"
											]
										}
									},
									"response": []
								}
							],
							"description": "For some requests, we need to have data available. The variables need to be filled so the request can succeed. We put these preparation requests in this folder. We will clean them up in the cleanup folder.",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "a2c5b69c-db61-43f9-af00-9c0e00607952",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "58a7d60f-4e4f-4ed7-8bce-49520022d61b",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "User",
							"item": [
								{
									"name": "User-CreateUser-PR",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ee442e59-cc87-439d-8ce8-af679ed533ff",
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 403\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.forbidden;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{prUserIdentityId}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"identityId\": \"{{createdUserId}}\",\n    \"name\": \"{{userName}}\",\n    \"email\": \"postmantest_email@example.com\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/User",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"User"
											]
										}
									},
									"response": []
								},
								{
									"name": "User-GetUser-Other-PR",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6a655338-3ffe-4113-9f5f-3c1d2d4024e0",
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 403\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.forbidden;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{prUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/User/{{createdUserId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"User",
												"{{createdUserId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "User-GetUser-Self-PR",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "64870807-6b87-4390-8681-901c2e499977",
												"exec": [
													"var prUserIdentityId = parseInt(pm.environment.get(\"prUserIdentityId\"));",
													"",
													"var jsonData = pm.response.json();",
													"pm.environment.set(\"PrUserId\", jsonData.id);",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.ok;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Identity ID is correct and matching: \" + prUserIdentityId, function () {",
													"    pm.expect(parseInt(jsonData.identityId)).to.eql(prUserIdentityId);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{prUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/User",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"User"
											]
										}
									},
									"response": []
								},
								{
									"name": "User-UpdateUser-Self-PR",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f75fabf5-8798-47b4-b354-317ba67299e4",
												"exec": [
													"var updatedPrUserEmail = pm.environment.get(\"updatedPrUserEmail\");",
													"",
													"var jsonData = pm.response.json();",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.ok;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Check if email update matches: \" + updatedPrUserEmail, function () {",
													"    pm.expect(jsonData.email).to.eql(updatedPrUserEmail);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "IdentityId",
												"value": "{{prUserIdentityId}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"name\": \"Pr jerry\",\r\n  \"email\": \"{{updatedPrUserEmail}}\",\r\n  \"identityId\": \"{{prUserIdentityId}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/User/{{PrUserId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"User",
												"{{PrUserId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "User-UpdateUser-Other-PR",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f861294f-33b5-4c92-8da2-027b06a77a60",
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 401\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.unauthorized;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{prUserIdentityId}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"name\": \"bobz\",\r\n  \"email\": \"BobSmith@email.com\",\r\n  \"identityId\": {{administratorUserIdentityId}}\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/User/{{createdUserId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"User",
												"{{createdUserId}}"
											]
										}
									},
									"response": []
								}
							],
							"description": "Requests executed as the Alice user with the registered role.",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "d9aad880-dd34-4003-956e-e962b5fa8db8",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "6773c1b6-f017-46db-9adb-5c40bbddb301",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "FollowUser",
							"item": [
								{
									"name": "User-FollowUser-PR",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a004ba2e-74b8-4d5f-aac7-0956c16b38fe",
												"exec": [
													"var jsonData = pm.response.json();",
													"var userId = pm.environment.get(\"userIdToFollow\");",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.success;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Check if created Username matches: \" + userId, function () {",
													"    pm.expect(jsonData.id).to.eql(userId);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{prUserIdentityId}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/User/follow/{{userIdToFollow}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"User",
												"follow",
												"{{userIdToFollow}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "User-UnFollowUser-PR",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "793a4b16-0ce6-400a-acf3-8530d161c59c",
												"exec": [
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{prUserIdentityId}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/User/follow/{{userIdToFollow}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"User",
												"follow",
												"{{userIdToFollow}}"
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "0f9872e7-dd1f-4b24-8000-28a7a8ceccd4",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "d8441219-91c0-4200-82ec-397775df5503",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Project",
							"item": [
								{
									"name": "Project-CreateProject-PR",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4583db44-1c49-4f29-95cb-29270b20f485",
												"exec": [
													"var PrUserId = pm.environment.get(\"PrUserId\");",
													"var projectName = pm.environment.get(\"projectName\");",
													"",
													"var jsonData = pm.response.json();",
													"pm.environment.set(\"projectId\", jsonData.id);",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Project Name is set correctly and matches: \" + projectName, function () {",
													"    pm.expect(jsonData.name).to.eql(projectName);",
													"});",
													"",
													"pm.test(\"User Id is set correctly and matches: \" + PrUserId, function () {",
													"    pm.expect(jsonData.user.id).to.eql(PrUserId);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "IdentityId",
												"value": "{{prUserIdentityId}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"name\": \"{{projectName}}\",\r\n  \"description\": \"postmantest_description\",\r\n  \"shortDescription\": \"postmantest_shortdesc\",\r\n  \"uri\": \"postmantest_uri\",\r\n  \"collaborators\": [\r\n    {\r\n      \"fullName\": \"postmantest_collfullname\",\r\n      \"role\": \"postmantest_collrole\"\r\n    }\r\n  ],\r\n  \"created\": \"2020-04-20T08:24:26.693Z\",\r\n  \"updated\": \"2020-04-20T08:24:26.693Z\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/Project",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Project"
											]
										}
									},
									"response": []
								},
								{
									"name": "Project-GetAllProjects-PR",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "77d51d90-1d86-4814-96bc-d85323f992c5",
												"exec": [
													"var projectName = pm.environment.get(\"projectName\");",
													"",
													"var jsonData = pm.response.json();",
													"",
													"var foundAt;",
													"",
													"function findProject(jsonData, name) {",
													"    for (var i = 0; i < jsonData.results.length; i++) {",
													"        if (jsonData.results[i].name == name) {",
													"            return i;",
													"        }",
													"    }",
													"    return -1;",
													"}",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Project: \" + projectName + \" is in list\", function () {",
													"    foundAt = findProject(jsonData, projectName);",
													"    pm.expect(foundAt).to.not.eql(-1);",
													"});",
													"",
													"pm.test(\"Project Name is set correctly and matching: \" + projectName, function () {",
													"    pm.expect(jsonData.results[foundAt].name).to.eql(projectName);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{prUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Project",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Project"
											]
										}
									},
									"response": []
								},
								{
									"name": "Project-GetProject-Self-PR",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2ad862e4-e7d5-422c-b50f-db0674e19a28",
												"exec": [
													"var projectName = pm.environment.get(\"projectName\");",
													"",
													"var jsonData = pm.response.json();",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Project Name is set correctly and matches: \" + projectName, function () {",
													"    pm.expect(jsonData.name).to.eql(projectName);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{prUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Project/{{projectId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Project",
												"{{projectId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Project-GetProject-Other-PR",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "488116a9-2da8-4b05-8c9c-9151215db8e3",
												"exec": [
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{prUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Project/{{adminProjectId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Project",
												"{{adminProjectId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Project-UpdateProject-Self-PR",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "756a70f4-b0e3-4542-990f-440fb9b05b92",
												"exec": [
													"var projectName = pm.environment.get(\"projectNameUpdated\");",
													"",
													"var jsonData = pm.response.json();",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.ok;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Project Name is set correctly and matches: \" + projectName, function () {",
													"    pm.expect(jsonData.name).to.eql(projectName);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{prUserIdentityId}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"name\": \"{{projectNameUpdated}}\",\r\n  \"description\": \"postmantest_description\",\r\n  \"shortDescription\": \"postmantest_shortdesc\",\r\n  \"uri\": \"postmantest_uri\",\r\n  \"collaborators\": [\r\n    {\r\n      \"fullName\": \"postmantest_collfullname\",\r\n      \"role\": \"postmantest_collrole\"\r\n    }\r\n  ],\r\n  \"created\": \"2020-04-20T08:24:26.693Z\",\r\n  \"updated\": \"2020-04-20T08:24:26.693Z\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/Project/{{projectId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Project",
												"{{projectId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Project-UpdateProject-Other-PR",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b3ea1f8f-824b-4f7b-b543-85cdffe16758",
												"exec": [
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 401\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"    pm.response.to.be.unauthorized;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{prUserIdentityId}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"name\": \"{{projectNameUpdated}}\",\r\n  \"description\": \"postmantest_description\",\r\n  \"shortDescription\": \"postmantest_shortdesc\",\r\n  \"uri\": \"postmantest_uri\",\r\n  \"collaborators\": [\r\n    {\r\n      \"fullName\": \"postmantest_collfullname\",\r\n      \"role\": \"postmantest_collrole\"\r\n    }\r\n  ],\r\n  \"created\": \"2020-04-20T08:24:26.693Z\",\r\n  \"updated\": \"2020-04-20T08:24:26.693Z\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/Project/{{adminProjectId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Project",
												"{{adminProjectId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Project-LikeProject-PR",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "79e6bf29-ba03-45b4-862e-7310921502ed",
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"eval(pm.environment.get(\"commonTests\"))();\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Response must be valid and have a json body\", function () {\r",
													"     pm.response.to.be.ok;\r",
													"     pm.response.to.be.withBody;\r",
													"     pm.response.to.be.json;\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{prUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Project/like/{{projectId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Project",
												"like",
												"{{projectId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Project-DeleteLikeProject-PR",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "8f664541-38c4-486f-8bef-03c4a38017fa",
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"eval(pm.environment.get(\"commonTests\"))();\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Response must be valid and have a json body\", function () {\r",
													"     pm.response.to.be.ok;\r",
													"     pm.response.to.be.withBody;\r",
													"     pm.response.to.be.json;\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{prUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Project/like/{{projectId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Project",
												"like",
												"{{projectId}}"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "FollowProject",
							"item": [
								{
									"name": "Project-FollowProject-PR",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "899e837c-da36-42d0-a0c2-cd712704337d",
												"exec": [
													"var jsonData = pm.response.json();",
													"var projectId = pm.environment.get(\"projectIdToFollow\");",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.success;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Check if created project id matches: \" + projectId, function () {",
													"    pm.expect(jsonData.id).to.eql(projectId);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{prUserIdentityId}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/project/follow/{{projectIdToFollow}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"project",
												"follow",
												"{{projectIdToFollow}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Project-UnFollowProject-PR",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "7d2e9c97-c721-4795-9587-0f4a27aca66f",
												"exec": [
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{prUserIdentityId}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/project/follow/{{projectIdToFollow}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"project",
												"follow",
												"{{projectIdToFollow}}"
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "830cd9ae-bad4-4ffb-9906-9a2f422a3adf",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "5dfcdb9f-1205-4a93-9641-6a2d3cbb7bcd",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Embed",
							"item": [
								{
									"name": "Embed-CreateEmbed-Self-PR",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6dd4e420-e6a8-4e33-b394-07db1d0f3cc1",
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"pm.environment.set(\"embedGuid\", jsonData.guid);",
													"pm.environment.set(\"embeddedProjectId\", jsonData.project.id);",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.success;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "IdentityId",
												"value": "{{prUserIdentityId}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"projectId\": {{projectId}}\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/Embed",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Embed"
											]
										}
									},
									"response": []
								},
								{
									"name": "Embed-CreateEmbed-Other-PR",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b77f8d7a-2871-4447-8a18-7c4b253c65fb",
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"pm.environment.set(\"otherEmbedGuid\", jsonData.guid);",
													"pm.environment.set(\"otherEmbeddedProjectId\", jsonData.project.id);",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.success;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "IdentityId",
												"value": "{{prUserIdentityId}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"projectId\": {{adminProjectId}}\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/Embed",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Embed"
											]
										}
									},
									"response": []
								},
								{
									"name": "Embed-GetAllEmbeds-PR",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4eac0f0a-c421-47fc-b3aa-2aebd0dced04",
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.ok;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"value": "{{prUserIdentityId}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Embed",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Embed"
											]
										}
									},
									"response": []
								},
								{
									"name": "Embed-GetEmbed-Self-PR",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d34a77b0-3a9e-493a-a12e-2ce98b6f6579",
												"exec": [
													"var embeddedProjectId = parseInt(pm.environment.get(\"embeddedProjectId\"))",
													"",
													"var jsonData = pm.response.json();",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Embed matches: \" + embeddedProjectId, function () {",
													"    pm.expect(jsonData.id).to.eql(embeddedProjectId);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{prUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Embed/{{embedGuid}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Embed",
												"{{embedGuid}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Embed-GetEmbed-Other-PR",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "97eba638-fdb6-4cda-ac02-15f1f97c4538",
												"exec": [
													"var otherEmbeddedProjectId = parseInt(pm.environment.get(\"otherEmbeddedProjectId\"))",
													"",
													"var jsonData = pm.response.json();",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Embed matches: \" + otherEmbeddedProjectId, function () {",
													"    pm.expect(jsonData.id).to.eql(otherEmbeddedProjectId);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{prUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Embed/{{otherEmbedGuid}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Embed",
												"{{otherEmbedGuid}}"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Highlight",
							"item": [
								{
									"name": "Highlight-CreateHighlight-Self-PR",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5893a927-c376-4c66-a545-4918c4a847ee",
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"pm.environment.set(\"highlightId\", jsonData.id);",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.success;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "caae42c1-8e9e-4b03-a74d-098e7fb60424",
												"exec": [
													"var current_timestamp = new Date();\r",
													"postman.setEnvironmentVariable(\"current_timestamp\", current_timestamp.toISOString());\r",
													"\r",
													"var future_timestamp = new Date(Date.now() +(2 * 86400000));\r",
													"postman.setEnvironmentVariable(\"future_timestamp\", future_timestamp.toISOString());\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{prUserIdentityId}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"projectId\": {{projectId}},\r\n  \"startDate\": \"{{current_timestamp}}\",\r\n  \"endDate\": \"{{future_timestamp}}\",\r\n  \"description\" : \"Lorem Ipsum\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/Highlight",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Highlight"
											]
										}
									},
									"response": []
								},
								{
									"name": "Highlight-GetHighlight-Self-PR",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "163a8e93-2a6b-4dee-9203-65887c460a02",
												"exec": [
													"var identityId = parseInt(pm.environment.get(\"identityId\"));",
													"var highlightId = parseInt(pm.environment.get(\"highlightId\"));",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.environment.set(\"highlightStartDate\", jsonData.startDate);",
													"pm.environment.set(\"highlightEndDate\", jsonData.endDate);",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Highlight Id matches: \" + highlightId, function () {",
													"    pm.expect(jsonData.id).to.eql(highlightId);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"value": "{{prUserIdentityId}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Highlight/{{highlightId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Highlight",
												"{{highlightId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Highlight-GetHighlight-ByProject-Self-PR",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "32ff88fe-9aec-4619-830b-566149b4c653",
												"exec": [
													"var identityId = parseInt(pm.environment.get(\"identityId\"));",
													"var projectId = parseInt(pm.environment.get(\"projectId\"));",
													"var highlightId = parseInt(pm.environment.get(\"highlightId\"));",
													"",
													"var jsonData = pm.response.json();",
													"",
													"var foundAt;",
													"",
													"function findHighlightId(jsonData, item) {",
													"    for (var i = 0; i < jsonData.length; i++) {",
													"        if (jsonData[i].id == item) {",
													"            return i;",
													"        }",
													"    }",
													"    return -1;",
													"}",
													"",
													"function findProjectId(jsonData, item) {",
													"    for (var i = 0; i < jsonData.length; i++) {",
													"        if (jsonData[i].projectId == item) {",
													"            return i;",
													"        }",
													"    }",
													"    return -1;",
													"}",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Project is in list and matching: \" + projectId, function () {",
													"    foundAt = findProjectId(jsonData, projectId);",
													"    pm.expect(foundAt).to.not.eql(-1);",
													"});",
													"",
													"pm.test(\"Highlight is in list and matching:\" + highlightId, function () {",
													"    foundAt = findHighlightId(jsonData, highlightId);",
													"    pm.expect(foundAt).to.not.eql(-1);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{prUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Highlight/Project/{{projectId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Highlight",
												"Project",
												"{{projectId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Highlight-UpdateHighlight-Self-PR",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "567cb596-5c34-4011-994e-481baeeb5d84",
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.ok;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "84f9a832-b7fb-43f9-8553-fcb09d6fc9a9",
												"exec": [
													"var current_timestamp = new Date();\r",
													"postman.setEnvironmentVariable(\"current_timestamp\", current_timestamp.toISOString());"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "IdentityId",
												"value": "{{prUserIdentityId}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"projectId\": \"{{projectId}}\",\r\n  \"startDate\": \"{{current_timestamp}}\",\r\n  \"endDate\": \"{{future_timestamp}}\",\r\n  \"description\" : \"Lorem Ipsum\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/Highlight/{{highlightId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Highlight",
												"{{highlightId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Highlight-CreateHighlight-Other-PR",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d7f25cb6-8467-4a76-983e-12edd2eaff76",
												"exec": [
													"var jsonData = pm.response.json();",
													"pm.environment.set(\"adminHighlightId\", jsonData.id);",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.success;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "f8f16363-ce5c-4c1a-9ae5-f6b7f500b331",
												"exec": [
													"var current_timestamp = new Date();\r",
													"postman.setEnvironmentVariable(\"current_timestamp\", current_timestamp.toISOString());\r",
													"\r",
													"var future_timestamp = new Date(Date.now() +(2 * 86400000));\r",
													"postman.setEnvironmentVariable(\"future_timestamp\", future_timestamp.toISOString());\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{prUserIdentityId}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"projectId\": {{adminProjectId}},\r\n  \"startDate\": \"{{current_timestamp}}\",\r\n  \"endDate\": \"{{future_timestamp}}\",\r\n  \"description\" : \"Lorem Ipsum\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/Highlight",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Highlight"
											]
										}
									},
									"response": []
								},
								{
									"name": "Highlight-GetHighlight-Other-PR",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "584c204b-68aa-4bb0-bdbd-0ac50f51c6f1",
												"exec": [
													"var identityId = parseInt(pm.environment.get(\"identityId\"));",
													"var adminHighlightId = parseInt(pm.environment.get(\"adminHighlightId\"));",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.environment.set(\"highlightStartDate\", jsonData.startDate);",
													"pm.environment.set(\"highlightEndDate\", jsonData.endDate);",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Highlight Id matches: \" + adminHighlightId, function () {",
													"    pm.expect(jsonData.id).to.eql(adminHighlightId);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{prUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Highlight/{{adminHighlightId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Highlight",
												"{{adminHighlightId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Highlight-GetHighlight-ByProject-Other-PR",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "0ac80189-9e5c-46e5-bf40-f497ec73e00c",
												"exec": [
													"var identityId = parseInt(pm.environment.get(\"identityId\"));",
													"var adminProjectId = parseInt(pm.environment.get(\"adminProjectId\"));",
													"var adminHighlightId = parseInt(pm.environment.get(\"adminHighlightId\"));",
													"",
													"var jsonData = pm.response.json();",
													"",
													"var foundAt;",
													"",
													"function findHighlightId(jsonData, item) {",
													"    for (var i = 0; i < jsonData.length; i++) {",
													"        if (jsonData[i].id == item) {",
													"            return i;",
													"        }",
													"    }",
													"    return -1;",
													"}",
													"",
													"function findProjectId(jsonData, item) {",
													"    for (var i = 0; i < jsonData.length; i++) {",
													"        if (jsonData[i].projectId == item) {",
													"            return i;",
													"        }",
													"    }",
													"    return -1;",
													"}",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Project is in list and matching: \" + adminProjectId, function () {",
													"    foundAt = findProjectId(jsonData, adminProjectId);",
													"    pm.expect(foundAt).to.not.eql(-1);",
													"});",
													"",
													"pm.test(\"Highlight is in list and matching:\" + adminHighlightId, function () {",
													"    foundAt = findHighlightId(jsonData, adminHighlightId);",
													"    pm.expect(foundAt).to.not.eql(-1);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{prUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Highlight/Project/{{adminProjectId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Highlight",
												"Project",
												"{{adminProjectId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Highlight-UpdateHighlight-Other-PR",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "77dffd0d-833a-46be-8e16-a87e5e37abdf",
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.ok;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "32ba5c36-7252-4fd5-9539-f1477be86d27",
												"exec": [
													"var current_timestamp = new Date();\r",
													"postman.setEnvironmentVariable(\"current_timestamp\", current_timestamp.toISOString());"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{prUserIdentityId}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"projectId\": \"{{projectId}}\",\r\n  \"startDate\": \"{{current_timestamp}}\",\r\n  \"endDate\": \"{{future_timestamp}}\",\r\n  \"description\" : \"Lorem Ipsum\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/Highlight/{{adminHighlightId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Highlight",
												"{{adminHighlightId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Highlight-GetAllActiveHighlights-PR",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "82dc1883-5c07-43cf-a3a5-56fcb5263c4e",
												"exec": [
													"var projectId = pm.environment.get(\"adminProjectId\");",
													"",
													"var jsonData = pm.response.json();",
													"",
													"var foundAt;",
													"",
													"function findItem(jsonData, item) {",
													"    for (var i = 0; i < jsonData.length; i++) {",
													"        if (jsonData[i].projectId == item) {",
													"            return i;",
													"        }",
													"    }",
													"    return -1;",
													"}",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Highlight is in list and matching: \" + projectId, function () {",
													"    foundAt = findItem(jsonData, projectId);",
													"    pm.expect(foundAt).to.not.eql(-1);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{prUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Highlight",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Highlight"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Role",
							"item": [
								{
									"name": "Role-CreateRole-PR",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "9aeccb11-b045-4f78-b2b5-c6c407d35c9a",
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 403\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.forbidden;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{prUserIdentityId}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"name\": \"{{roleName}}\",\r\n  \"scopes\": [\r\n    {\r\n      \"scope\": \"EmbedWrite\"\r\n    }\r\n  ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/Role",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Role"
											]
										}
									},
									"response": []
								},
								{
									"name": "Role-GetAllRoles-PR",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "cf17146a-fec8-43d8-b09d-e8cca31cd600",
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 403\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.forbidden;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{prUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Role",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Role"
											]
										}
									},
									"response": []
								},
								{
									"name": "Scope-GetAllScopes-PR",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ebe699a6-ba0b-490d-af49-68378a213c22",
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 403\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.forbidden;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{prUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Role/Scopes",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Role",
												"Scopes"
											]
										}
									},
									"response": []
								},
								{
									"name": "Role-GetRole-PR",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c103706d-d4a4-4ae8-85a6-9f36d04c0042",
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 403\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.forbidden;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{prUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Role/{{roleId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Role",
												"{{roleId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Role-UpdateRole-PR",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e2df1ec1-a3a8-4c05-9610-0821309f126f",
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 403\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.forbidden;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{prUserIdentityId}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"name\": \"{{updatedRoleName}}\",\r\n  \"scopes\": [\r\n    {\r\n      \"scope\": \"EmbedWrite\"\r\n    }\r\n  ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/Role/{{roleId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Role",
												"{{roleId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Role-SetRole-PR",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "9a47eb8b-684e-47bf-8361-1eab773f4466",
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 403\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.forbidden;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{prUserIdentityId}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"createdUserId\": {{createdUserId}},\r\n  \"name\": \"{{projectNameUpdated}}\",\r\n  \"description\": \"postmantest_description\",\r\n  \"shortDescription\": \"postmantest_shortdesc\",\r\n  \"uri\": \"postmantest_uri\",\r\n  \"collaborators\": [\r\n    {\r\n      \"fullName\": \"postmantest_collfullname\",\r\n      \"role\": \"postmantest_collrole\"\r\n    }\r\n  ],\r\n  \"created\": \"2020-04-20T08:24:26.693Z\",\r\n  \"updated\": \"2020-04-20T08:24:26.693Z\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/Role/setRole?createdUserId={{createdUserId}}&roleId={{roleId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Role",
												"setRole"
											],
											"query": [
												{
													"key": "createdUserId",
													"value": "{{createdUserId}}",
													"description": "Id of the user that we want to update"
												},
												{
													"key": "roleId",
													"value": "{{roleId}}",
													"description": "Id of the role that you want to update the user with"
												}
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Search",
							"item": [
								{
									"name": "Search-SearchInternal-PR",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f4b731c9-72ab-472f-a58e-c55c39f401c2",
												"exec": [
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.ok;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{prUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Search/internal/{{projectName}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Search",
												"internal",
												"{{projectName}}"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Wizard",
							"item": [
								{
									"name": "Wizard-GetWizard-PR",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e91fafb3-49eb-4f2b-93d0-5dde0660c62d",
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{registeredUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Wizard?sourceURI={{wizardSourceUri}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Wizard"
											],
											"query": [
												{
													"key": "sourceURI",
													"value": "{{wizardSourceUri}}",
													"description": "This is the URI that the wizard will use to fetch the source."
												}
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Institution",
							"item": [
								{
									"name": "Institution-CreateInstitution-PR",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "8d7580fb-7f89-4633-9fa9-39a38561b96f",
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 401\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.unauthorized;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"identityId\": \"98764342123\",\n    \"name\": \"mycooltestusername\",\n    \"email\": \"postmantest_email@example.com\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/User",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"User"
											]
										}
									},
									"response": []
								},
								{
									"name": "Institution-GetInstitution-PR",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4d41a7eb-ae8d-4892-a518-7d515d910901",
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 401\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.unauthorized;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{apiUrl}}/api/User/1",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"User",
												"1"
											]
										}
									},
									"response": []
								},
								{
									"name": "Institution-UpdateInstitution-PR",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "87735bb9-334e-4262-b00f-645e34f2d3aa",
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 401\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.unauthorized;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"name\": \"bobz\",\r\n  \"email\": \"BobSmith@email.com\",\r\n  \"identityId\": {{administratorUserIdentityId}}\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/User/1",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"User",
												"1"
											]
										}
									},
									"response": []
								},
								{
									"name": "Instituiton-DeleteInstitution-PR",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "173539aa-913d-46a5-b0aa-ad9549b09370",
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 401\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.unauthorized;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{apiUrl}}/api/User/1",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"User",
												"1"
											]
										}
									},
									"response": []
								}
							],
							"auth": {
								"type": "noauth"
							},
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "dd427566-3ba4-4c7d-a349-197bad5e2e63",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "af2de4dd-5c68-4aaf-ac17-b3eb0b0de85b",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "CallToActionOption",
							"item": [
								{
									"name": "CallToActionOption-CreateCallToActionOption-PR",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "18f9c53b-ebd7-4f9e-8b65-78dfefcdb727",
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 403\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.forbidden;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "IdentityId",
												"value": "{{prUserIdentityId}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"type\": \"Title\",\n    \"value\": \"Provide feedback\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/CallToActionOption",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"CallToActionOption"
											]
										}
									},
									"response": []
								},
								{
									"name": "CallToActionOption-GetAllCallToActionOptions-PR",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "55e80eb0-2f42-4d77-8c31-c5531f4a9e41",
												"exec": [
													"var optionId = parseInt(pm.environment.get(\"callToActionOptionId\"));",
													"",
													"var jsonData = pm.response.json();",
													"",
													"var foundAt;",
													"",
													"function findOption(jsonData, id) {",
													"    for (var i = 0; i < jsonData.length; i++) {",
													"        if (jsonData[i].id == id) {",
													"            return i;",
													"        }",
													"    }",
													"    return -1;",
													"}",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.ok;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Call to action option with id: \" + optionId + \" is in list\", function () {",
													"    foundAt = findOption(jsonData, optionId);",
													"    pm.expect(foundAt).to.not.eql(-1);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{prUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/CallToActionOption",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"CallToActionOption"
											]
										}
									},
									"response": []
								},
								{
									"name": "CallToActionOption-GetCallToActionOptionById-PR",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "8bcfe374-7067-4016-bce5-3282596af159",
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"pm.environment.set(\"callToActionOptionType\", jsonData.type);",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.ok;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Call to action option type is lowercase\", function () {",
													"    pm.expect(jsonData.type).to.eql(jsonData.type.toLowerCase());",
													"});",
													"",
													"pm.test(\"Call to action option value is lowercase\", function () {",
													"    pm.expect(jsonData.value).to.eql(jsonData.value.toLowerCase());",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"value": "{{prUserIdentityId}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/CallToActionOption/{{callToActionOptionId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"CallToActionOption",
												"{{callToActionOptionId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "CallToActionOption-GetCallToActionOptionByType-PR",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6641844f-e45e-43b1-b37e-1b9d8ca09d90",
												"exec": [
													"var callToActionOptionId = parseInt(pm.environment.get(\"callToActionOptionId\"));",
													"",
													"var jsonData = pm.response.json();",
													"",
													"function findOptionType(jsonData, id) {",
													"    for (var i = 0; i < jsonData.length; i++) {",
													"        if (jsonData[i].id == id) {",
													"            return i;",
													"        }",
													"    }",
													"    return -1;",
													"}",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.ok;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Call to action option id is \" + callToActionOptionId, function() {",
													"    foundAt = findOptionType(jsonData, callToActionOptionId);",
													"    pm.expect(foundAt).to.not.eql(-1);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{prUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/CallToActionOption/type/{{callToActionOptionType}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"CallToActionOption",
												"type",
												"{{callToActionOptionType}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "CallToActionOption-UpdateCallToActionOption-PR",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "27a39811-bf2e-415c-8aea-89a49521a61b",
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 403\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.forbidden;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "IdentityId",
												"value": "{{prUserIdentityId}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"type\": \"Updated type\",\r\n    \"value\": \"Updated value\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/CallToActionOption/{{callToActionOptionId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"CallToActionOption",
												"{{callToActionOptionId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "CallToActionOption-DeleteCallToActionOption-PR",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c84e3a93-4564-4dfe-9af9-1da6bdf8c51f",
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 403\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.forbidden;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "IdentityId",
												"value": "{{prUserIdentityId}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/CallToActionOption/{{callToActionOptionId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"CallToActionOption",
												"{{callToActionOptionId}}"
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "2139be79-d33e-43c5-a835-2dd8ab706806",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "23a5a2a7-055a-4298-95bf-d253bd224a78",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Cleanup",
							"item": [
								{
									"name": "Embed-DeleteEmbed-Self-PR",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b5d8b27e-1178-4d89-aee9-9d2b4995e685",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.ok;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{administratorUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Embed/{{embedGuid}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Embed",
												"{{embedGuid}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Embed-DeleteEmbed-Other-PR",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c1549c82-a659-4270-939f-8936a314b344",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.ok;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{administratorUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Embed/{{otherEmbedGuid}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Embed",
												"{{otherEmbedGuid}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Highlight-DeleteHighlight-Self-PR",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "844b26a8-534f-4b02-99d8-40311aed1eb7",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{administratorUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Highlight/{{highlightId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Highlight",
												"{{highlightId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Highlight-DeleteHighlight-Other-PR",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5f210fbf-2683-4864-90cb-99d8ffa7803b",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{administratorUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Highlight/{{adminHighlightId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Highlight",
												"{{adminHighlightId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Project-DeleteProject-Self-PR",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "447de7e0-3492-4e98-bc50-70ed09297db4",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{administratorUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Project/{{projectId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Project",
												"{{projectId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Project-DeleteProject-Other-PR",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2f29d6bb-e3f3-467a-930c-7506af300e38",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.ok;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{administratorUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Project/{{adminProjectId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Project",
												"{{adminProjectId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Role-DeleteRole-PR",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "9242c9f1-47e3-4c09-89cd-e7a1d2c35f7e",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.ok;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{administratorUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Role/{{roleId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Role",
												"{{roleId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "User-DeleteUser-Other-PR",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "1ca97956-4544-45f1-8809-98f97dc401a8",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.ok;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{administratorUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/User/{{createdUserId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"User",
												"{{createdUserId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "CallToActionOption-DeleteCallToActionOption-PR",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "cbb9cb71-953c-4d71-adb7-2cfbdee34bf9",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.ok;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{administratorUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/CallToActionOption/{{callToActionOptionId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"CallToActionOption",
												"{{callToActionOptionId}}"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "File",
							"item": [
								{
									"name": "Post-File-PR",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "0b496236-409b-4193-a863-92dd001a70b1",
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.environment.set(\"prFileId\", jsonData.id)\r",
													"\r",
													"eval(pm.environment.get(\"commonTests\"))();\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Response must be valid and have a json body\", function () {\r",
													"     pm.response.to.be.success;\r",
													"     pm.response.to.be.withBody;\r",
													"     pm.response.to.be.json;\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "IdentityId",
												"value": "{{prUserIdentityId}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "File",
													"type": "file",
													"src": "Postman/testimage.png"
												}
											]
										},
										"url": {
											"raw": "{{apiUrl}}/api/File",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"File"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get-Files-PR",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e2ad2b5d-6e2d-4e9f-9b56-0b01db3a8db5",
												"exec": [
													"eval(pm.environment.get(\"commonTests\"))();\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Response must be valid and have a json body\", function () {\r",
													"    pm.response.to.be.withBody;\r",
													"    pm.response.to.be.json;\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"value": "{{prUserIdentityId}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/File",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"File"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete-File-PR",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "41a647fd-6b47-4440-b27d-6bb9f7f40969",
												"exec": [
													"eval(pm.environment.get(\"commonTests\"))();\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Response must be valid\", function () {\r",
													"     pm.response.to.be.ok;\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "IdentityId",
												"value": "{{prUserIdentityId}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/File/{{prFileId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"File",
												"{{prFileId}}"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Cleanup",
			"item": [
				{
					"name": "DeleteUsers",
					"item": [
						{
							"name": "Registered",
							"item": [
								{
									"name": "Delete-RegisteredUser",
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "IdentityId",
												"value": "{{administratorUserIdentityId}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/User/{{registeredUserId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"User",
												"{{registeredUserId}}"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "PR",
							"item": [
								{
									"name": "Delete-PRUser",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "0069f7c9-0b7c-4442-9953-534a5f9410c2",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "IdentityId",
												"value": "{{administratorUserIdentityId}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/User/{{prUserId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"User",
												"{{prUserId}}"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "DataOfficer",
							"item": [
								{
									"name": "Delete-DataOfficerUser",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d5f10d18-09f2-4c55-97f1-3974d36e00ca",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{administratorUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/User/{{dataOfficerUserId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"User",
												"{{dataOfficerUserId}}"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Delete-ProjectForFollowing",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "2187bcb2-4182-47b3-ae1b-c9780c19f22f",
								"exec": [
									"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "IdentityId",
								"value": "{{administratorUserIdentityId}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{apiUrl}}/api/Project/{{projectIdToFollow}}",
							"host": [
								"{{apiUrl}}"
							],
							"path": [
								"api",
								"Project",
								"{{projectIdToFollow}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete-UserForFollowing",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "0bed8aa0-4b02-4d39-977a-cd5c4dd0a9b5",
								"exec": [
									"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "IdentityId",
								"value": "{{administratorUserIdentityId}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{apiUrl}}/api/User/{{userIdToFollow}}",
							"host": [
								"{{apiUrl}}"
							],
							"path": [
								"api",
								"User",
								"{{userIdToFollow}}"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		}
	],
	"auth": {
		"type": "oauth2",
		"oauth2": [
			{
				"key": "accessToken",
				"value": "{{accessToken}}",
				"type": "string"
			},
			{
				"key": "tokenType",
				"value": "Bearer",
				"type": "string"
			},
			{
				"key": "addTokenTo",
				"value": "header",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "abd7196d-385b-4238-830f-0f0908f9777e",
				"type": "text/javascript",
				"exec": [
					"// Adapted from: https://gist.github.com/harryi3t/dd5c61451206047db70710ff6174c3c1",
					"",
					"let tokenUrl = pm.variables.get(\"tokenUrl\");",
					"let clientId = pm.variables.get(\"clientId\");",
					"let clientSecret = pm.variables.get(\"clientSecret\");",
					"let scope = pm.variables.get(\"scope\");",
					"",
					"let getTokenRequest = {",
					"    method: 'POST',",
					"    url: tokenUrl,",
					"    auth: {",
					"        type: \"basic\",",
					"        basic: [",
					"            { key: \"username\", value: clientId },",
					"            { key: \"password\", value: clientSecret }",
					"        ]",
					"    },",
					"    body: {",
					"        mode: 'formdata',",
					"        formdata: [",
					"            { key: 'grant_type', value: 'client_credentials' },",
					"            { key: 'scope', value: scope }",
					"        ]",
					"    }",
					"};",
					"",
					"pm.sendRequest(getTokenRequest, (err, response) => {",
					"    let jsonResponse = response.json(),",
					"        newAccessToken = jsonResponse.access_token;",
					"",
					"    console.log({ err, jsonResponse, newAccessToken })",
					"",
					"    pm.environment.set('accessToken', newAccessToken);",
					"    pm.variables.set('accessToken', newAccessToken);",
					"});"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "8bc8ca1d-7bc0-4109-a967-eda4c7546857",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"protocolProfileBehavior": {}
}