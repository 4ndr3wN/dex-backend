{
	"info": {
		"_postman_id": "20dc657f-5d66-4032-b738-3c87ecda6be1",
		"name": "DEV",
		"description": "Testing Digital Excellence API",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Warmup",
			"item": [
				{
					"name": "Project-GetAllProjects-Guest",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c69f9f80-f676-427a-bf04-7e50da5ce73a",
								"exec": [
									"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\") + 5000);",
									"",
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
									"});",
									"",
									"pm.test(\"Response must be valid and have a json body\", function () {",
									"    pm.response.to.be.ok;",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{apiUrl}}/api/Project",
							"host": [
								"{{apiUrl}}"
							],
							"path": [
								"api",
								"Project"
							]
						}
					},
					"response": []
				},
				{
					"name": "User-CreateUser-Administrator",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "35bdaba8-43c8-4b64-bd21-0540db3d9c90",
								"exec": [
									"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
									"",
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Response must be valid and have a json body\", function () {",
									"     pm.response.to.be.success;",
									"     pm.response.to.be.withBody;",
									"     pm.response.to.be.json;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "IdentityId",
								"type": "text",
								"value": "{{administratorUserIdentityId}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"identityId\": \"999\",\n    \"name\": \"{{userName}}\",\n    \"email\": \"postmantest_email@example.com\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{apiUrl}}/api/User",
							"host": [
								"{{apiUrl}}"
							],
							"path": [
								"api",
								"User"
							]
						}
					},
					"response": []
				}
			],
			"description": "Warmup the API to ensure fast response times",
			"protocolProfileBehavior": {}
		},
		{
			"name": "ACL",
			"item": [
				{
					"name": "Administrator",
					"item": [
						{
							"name": "User",
							"item": [
								{
									"name": "User-CreateUser-Administrator",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "10041605-359f-44c9-8bdb-d42a96bbd361",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"var userName = pm.environment.get(\"userName\");",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.environment.set(\"createdUserId\", jsonData.id);",
													"pm.environment.set(\"createdUserIdentityId\", jsonData.identityId);",
													"",
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.success;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});",
													"",
													"pm.test(\"Check if created Username matches: \" + userName, function () {",
													"    pm.expect(jsonData.name).to.eql(userName);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{administratorUserIdentityId}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"identityId\": \"999\",\n    \"name\": \"{{userName}}\",\n    \"email\": \"postmantest_email@example.com\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/User",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"User"
											]
										}
									},
									"response": []
								},
								{
									"name": "User-GetUser-Administrator",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "bc424802-d303-44d9-bbfb-da53b8afb38e",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"var createdUserId = parseInt(pm.environment.get(\"createdUserId\"));",
													"var createdUserIdentityId = pm.environment.get(\"createdUserIdentityId\");",
													"var userName = pm.environment.get(\"userName\");",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Check if updated identity Id matches: \" + createdUserIdentityId, function () {",
													"    pm.expect(jsonData.identityId).to.eql(createdUserIdentityId);",
													"});",
													"",
													"pm.test(\"Check if updated Id matches: \" + createdUserId, function () {",
													"    pm.expect(jsonData.id).to.eql(createdUserId);",
													"});",
													"",
													"pm.test(\"Check previously created UserName with id \" + userName, function () {",
													"    pm.expect(jsonData.name).to.eql(userName);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{administratorUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/User/{{createdUserId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"User",
												"{{createdUserId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "User-UpdateUser-Administrator",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "93f2d460-81ca-4f39-aa06-a78852a0eea2",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"var userName = pm.environment.get(\"userNameUpdated\");",
													"pm.environment.set(\"userName\", userName);",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.ok;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Check if updated username matches: \" + userName, function () {",
													"    pm.expect(jsonData.name).to.eql(userName);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{administratorUserIdentityId}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"name\": \"{{userNameUpdated}}\",\r\n  \"email\": \"postmantest_email\",\r\n  \"identityId\": \"{{createdUserIdentityId}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/User/{{createdUserId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"User",
												"{{createdUserId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "User-GetUpdatedUser-Administrator",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f137b99c-0b27-41cd-8071-9b4cd0587128",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"var createdUserId = parseInt(pm.environment.get(\"createdUserId\"));",
													"var createdUserIdentityId = pm.environment.get(\"createdUserIdentityId\");",
													"var userName = pm.environment.get(\"userName\")",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Check if updated identity Id matches: \" + createdUserIdentityId, function () {",
													"    pm.expect(jsonData.identityId).to.eql(createdUserIdentityId);",
													"});",
													"",
													"pm.test(\"Check if updated Id matches: \" + createdUserId, function () {",
													"    pm.expect(jsonData.id).to.eql(createdUserId);",
													"});",
													"",
													"pm.test(\"Check if updated username matches: \" + userName, function () {",
													"    pm.expect(jsonData.name).to.eql(userName);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{administratorUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/User/{{createdUserId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"User",
												"{{createdUserId}}"
											],
											"query": [
												{
													"key": "",
													"value": "",
													"disabled": true
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "User-GetUser-Self-Administrator",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "07518144-a582-42bb-8048-964eaa4a31e4",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"var administratorUserIdentityId = parseInt(pm.environment.get(\"administratorUserIdentityId\"));",
													"",
													"var jsonData = pm.response.json();",
													"pm.environment.set(\"administratorUserId\", jsonData.id);",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.ok;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});",
													"",
													"pm.test(\"Identity ID is correct and matching: \" + administratorUserIdentityId, function () {",
													"    pm.expect(parseInt(jsonData.identityId)).to.eql(administratorUserIdentityId);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{administratorUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/User",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"User"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "FollowUser",
							"item": [
								{
									"name": "User-CreateUserToFollow-Administrator",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ed792c06-f9a5-40e7-af43-f7dc1f9fa36e",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"var userName = pm.environment.get(\"userName\");",
													"",
													"var jsonData = pm.response.json();",
													"pm.environment.set(\"userIdToFollow\", jsonData.id)",
													"",
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.success;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});",
													"",
													"pm.test(\"Check if created Username matches: \" + userName, function () {",
													"    pm.expect(jsonData.name).to.eql(userName);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{administratorUserIdentityId}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"identityId\": \"999\",\n    \"name\": \"{{userName}}\",\n    \"email\": \"postmantest_email@example.com\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/User",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"User"
											]
										}
									},
									"response": []
								},
								{
									"name": "User-FollowUser-Administrator",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "dede75f8-e9d1-44d6-bb67-2c3a58ec00e3",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"",
													"var jsonData = pm.response.json();",
													"",
													"var userIdToFollow = pm.environment.get(\"userIdToFollow\");",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.success;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});",
													"",
													"pm.test(\"Check if created Username matches: \" + userIdToFollow, function () {",
													"    pm.expect(jsonData.id).to.eql(userIdToFollow);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{administratorUserIdentityId}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/User/follow/{{userIdToFollow}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"User",
												"follow",
												"{{userIdToFollow}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "User-UnFollowUser-Administrator",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "cbc14537-1217-48c8-a8e9-78c33da78a8f",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{administratorUserIdentityId}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/User/follow/{{userIdToFollow}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"User",
												"follow",
												"{{userIdToFollow}}"
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "c01d579b-7136-4967-b10e-92b1786ff456",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "94cc2e7e-f16d-418d-a588-43a78980526e",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Project",
							"item": [
								{
									"name": "Project-CreateProject-Administrator",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a1c8ed09-3647-4aae-9d9e-15a6187a1709",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"var administratorUserId = parseInt(pm.environment.get(\"administratorUserId\"));",
													"var projectName = pm.environment.get(\"projectName\");",
													"var adminUserName = pm.environment.get(\"adminUserName\");",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.environment.set(\"projectId\", jsonData.id);",
													"",
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.success;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});",
													"",
													"pm.test(\"Project Name is set correctly and matching: \" + projectName, function () {",
													"    pm.expect(jsonData.name).to.eql(projectName);",
													"});",
													"",
													"pm.test(\"User Name is correct and matching: \" + adminUserName, function () {",
													"    pm.expect(jsonData.user.name).to.eql(adminUserName);",
													"});",
													"",
													"pm.test(\"Identity ID is correct and matching: \" + administratorUserId, function () {",
													"    pm.expect(parseInt(jsonData.user.id)).to.eql(administratorUserId);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{administratorUserIdentityId}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"name\": \"{{projectName}}\",\r\n  \"description\": \"postmantest_description\",\r\n  \"shortDescription\": \"postmantest_shortdesc\",\r\n  \"uri\": \"postmantest_uri\",\r\n  \"collaborators\": [\r\n    {\r\n      \"fullName\": \"postmantest_collfullname\",\r\n      \"role\": \"postmantest_collrole\"\r\n    }\r\n  ],\r\n  \"created\": \"2020-04-20T08:24:26.693Z\",\r\n  \"updated\": \"2020-04-20T08:24:26.693Z\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/Project",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Project"
											]
										}
									},
									"response": []
								},
								{
									"name": "Project-GetAllProjects-Administrator",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "94026def-b61a-42db-86c7-f6b57752e23b",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"var projectName = pm.environment.get(\"projectName\");",
													"",
													"var jsonData = pm.response.json();",
													"",
													"var foundAt;",
													"",
													"function findProject(jsonData, name) {",
													"    for (var i = 0; i < jsonData.results.length; i++) {",
													"        if (jsonData.results[i].name == name) {",
													"            return i;",
													"        }",
													"    }",
													"    return -1;",
													"}",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Project: \" + projectName + \" is in list\", function () {",
													"    foundAt = findProject(jsonData, projectName);",
													"    pm.expect(foundAt).to.not.eql(-1);",
													"});",
													"",
													"pm.test(\"Project Name is set correctly and matching: \" + projectName, function () {",
													"    pm.expect(jsonData.results[foundAt].name).to.eql(projectName);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{administratorUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Project",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Project"
											]
										}
									},
									"response": []
								},
								{
									"name": "Project-GetProject-Administrator",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "7ce82184-5fec-4afc-a491-7e6f30eb9cb9",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"var projectId = parseInt(pm.environment.get(\"projectId\"));",
													"var projectName = pm.environment.get(\"projectName\");",
													"var administratorUserId = parseInt(pm.environment.get(\"administratorUserId\"));",
													"var adminUserName = pm.environment.get(\"adminUserName\");",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"ProjectName is set correctly and matching: \" + projectName, function () {",
													"    pm.expect(jsonData.name).to.eql(projectName);",
													"});",
													"",
													"pm.test(\"User Name is correct and matching: \" + adminUserName, function () {",
													"    pm.expect(jsonData.user.name).to.eql(adminUserName);",
													"});",
													"",
													"pm.test(\"Identity ID is correct and matching: \" + administratorUserId, function () {",
													"    pm.expect(parseInt(jsonData.user.id)).to.eql(administratorUserId);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{administratorUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Project/{{projectId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Project",
												"{{projectId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Project-UpdateProject-Administrator",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f885b377-7692-46b2-9dbc-b38c2527154d",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"var projectName = pm.environment.get(\"projectNameUpdated\");",
													"pm.environment.set(\"projectName\", projectName);",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.ok;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Project Name is set correctly and matching: \" + projectName, function () {",
													"    pm.expect(jsonData.name).to.eql(projectName);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{administratorUserIdentityId}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"name\": \"{{projectNameUpdated}}\",\r\n  \"description\": \"postmantest_description\",\r\n  \"shortDescription\": \"postmantest_shortdesc\",\r\n  \"uri\": \"postmantest_uri\",\r\n  \"collaborators\": [\r\n    {\r\n      \"fullName\": \"postmantest_collfullname\",\r\n      \"role\": \"postmantest_collrole\"\r\n    }\r\n  ],\r\n  \"created\": \"2020-04-20T08:24:26.693Z\",\r\n  \"updated\": \"2020-04-20T08:24:26.693Z\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/Project/{{projectId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Project",
												"{{projectId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Project-GetUpdatedProject-Administrator",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "58443f79-08cf-41d0-9346-d1e9770b10f0",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"var administratorUserId = parseInt(pm.environment.get(\"administratorUserId\"));",
													"var projectName = pm.environment.get(\"projectName\");",
													"var adminUserName = pm.environment.get(\"adminUserName\");",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"ProjectName is set correctly and matching: \" + projectName, function () {",
													"    pm.expect(jsonData.name).to.eql(projectName);",
													"});",
													"",
													"pm.test(\"User Name is correct and matching: \" + adminUserName, function () {",
													"    pm.expect(jsonData.user.name).to.eql(adminUserName);",
													"});",
													"",
													"pm.test(\"Identity ID is correct and matching: \" + administratorUserId, function () {",
													"    pm.expect(parseInt(jsonData.user.id)).to.eql(administratorUserId);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{administratorUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Project/{{projectId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Project",
												"{{projectId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Project-GetProject-NonExisting-Administrator",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "20cee7c5-6a03-4513-87aa-67a91e785e2b",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 404\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"    pm.response.to.be.notFound;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{administratorUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Project/98989",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Project",
												"98989"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "FollowProject",
							"item": [
								{
									"name": "Project-CreateProjectToFollow-Administrator",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f7959af5-b012-4667-8fca-01d0328cc157",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"var administratorUserId = parseInt(pm.environment.get(\"administratorUserId\"));",
													"var projectName = pm.environment.get(\"projectName\");",
													"var adminUserName = pm.environment.get(\"adminUserName\");",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.environment.set(\"projectIdToFollow\", jsonData.id);",
													"",
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.success;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});",
													"",
													"pm.test(\"Project Name is set correctly and matching: \" + projectName, function () {",
													"    pm.expect(jsonData.name).to.eql(projectName);",
													"});",
													"",
													"pm.test(\"User Name is correct and matching: \" + adminUserName, function () {",
													"    pm.expect(jsonData.user.name).to.eql(adminUserName);",
													"});",
													"",
													"pm.test(\"Identity ID is correct and matching: \" + administratorUserId, function () {",
													"    pm.expect(parseInt(jsonData.user.id)).to.eql(administratorUserId);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{administratorUserIdentityId}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"name\": \"{{projectName}}\",\r\n  \"description\": \"postmantest_description\",\r\n  \"shortDescription\": \"postmantest_shortdesc\",\r\n  \"uri\": \"postmantest_uri\",\r\n  \"collaborators\": [\r\n    {\r\n      \"fullName\": \"postmantest_collfullname\",\r\n      \"role\": \"postmantest_collrole\"\r\n    }\r\n  ],\r\n  \"created\": \"2020-04-20T08:24:26.693Z\",\r\n  \"updated\": \"2020-04-20T08:24:26.693Z\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/Project",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Project"
											]
										}
									},
									"response": []
								},
								{
									"name": "Project-FollowProject-Administrator",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2a9d907f-5454-417b-9b08-1877a807b05e",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"",
													"var jsonData = pm.response.json();",
													"var projectId = pm.environment.get(\"projectIdToFollow\");",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.success;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});",
													"",
													"pm.test(\"Check if created Username matches: \" + projectId, function () {",
													"    pm.expect(jsonData.id).to.eql(projectId);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{administratorUserIdentityId}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/project/follow/{{projectIdToFollow}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"project",
												"follow",
												"{{projectIdToFollow}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Project-UnFollowProject-Administrator",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "78550301-2e51-421d-ab34-5210ab422e22",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{administratorUserIdentityId}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/project/follow/{{projectIdToFollow}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"project",
												"follow",
												"{{projectIdToFollow}}"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Highlight",
							"item": [
								{
									"name": "Highlight-CreateHighlight-Administrator",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e952cda7-7d65-4fed-a15f-cf37ddfddbd9",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"var identityId = parseInt(pm.environment.get(\"identityId\"));",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.environment.set(\"highlightId\", jsonData.id);",
													"",
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.success;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "916e4762-1200-425e-8029-744ec39d84b3",
												"exec": [
													"var current_timestamp = new Date();\r",
													"postman.setEnvironmentVariable(\"current_timestamp\", current_timestamp.toISOString());\r",
													"\r",
													"var future_timestamp = new Date(Date.now() +(2 * 86400000));\r",
													"postman.setEnvironmentVariable(\"future_timestamp\", future_timestamp.toISOString());\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{administratorUserIdentityId}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"projectId\": {{projectId}},\r\n  \"startDate\": \"{{current_timestamp}}\",\r\n  \"endDate\": \"{{future_timestamp}}\",\r\n  \"description\" : \"Lorem Ipsum\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/Highlight",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Highlight"
											]
										}
									},
									"response": []
								},
								{
									"name": "Highlight-GetAllActiveHighlights-Administrator",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4065fee5-cb85-41d7-a300-8ab4680d74e1",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"var projectId = pm.environment.get(\"projectId\");",
													"",
													"var jsonData = pm.response.json();",
													"",
													"var foundAt;",
													"",
													"function findItem(jsonData, item) {",
													"    for (var i = 0; i < jsonData.length; i++) {",
													"        if (jsonData[i].projectId == item) {",
													"            return i;",
													"        }",
													"    }",
													"    return -1;",
													"}",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Highlight is in list and matching: \" + projectId, function () {",
													"    foundAt = findItem(jsonData, projectId);",
													"    pm.expect(foundAt).to.not.eql(-1);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"value": "{{administratorUserIdentityId}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Highlight",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Highlight"
											]
										}
									},
									"response": []
								},
								{
									"name": "Highlight-GetHighlight-Administrator",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3a7af3c5-01e4-4985-9b3f-e0861156c0e0",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"var identityId = parseInt(pm.environment.get(\"identityId\"));",
													"var highlightId = parseInt(pm.environment.get(\"highlightId\"));",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.environment.set(\"highlightStartDate\", jsonData.startDate);",
													"pm.environment.set(\"highlightEndDate\", jsonData.endDate);",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Highlight Id matches: \" + highlightId, function () {",
													"    pm.expect(jsonData.id).to.eql(highlightId);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"value": "{{administratorUserIdentityId}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Highlight/{{highlightId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Highlight",
												"{{highlightId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Highlight-GetHighlight-ByProject-Administrator",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6a0798fe-e006-42f6-9d16-bf63df2a883f",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"var identityId = parseInt(pm.environment.get(\"identityId\"));",
													"var projectId = parseInt(pm.environment.get(\"projectId\"));",
													"var highlightId = parseInt(pm.environment.get(\"highlightId\"));",
													"",
													"var jsonData = pm.response.json();",
													"",
													"var foundAt;",
													"",
													"function findHighlightId(jsonData, item) {",
													"    for (var i = 0; i < jsonData.length; i++) {",
													"        if (jsonData[i].id == item) {",
													"            return i;",
													"        }",
													"    }",
													"    return -1;",
													"}",
													"",
													"function findProjectId(jsonData, item) {",
													"    for (var i = 0; i < jsonData.length; i++) {",
													"        if (jsonData[i].projectId == item) {",
													"            return i;",
													"        }",
													"    }",
													"    return -1;",
													"}",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Project is in list and matching: \" + projectId, function () {",
													"    foundAt = findProjectId(jsonData, projectId);",
													"    pm.expect(foundAt).to.not.eql(-1);",
													"});",
													"",
													"pm.test(\"Highlight is in list and matching:\" + highlightId, function () {",
													"    foundAt = findHighlightId(jsonData, highlightId);",
													"    pm.expect(foundAt).to.not.eql(-1);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{administratorUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Highlight/Project/{{projectId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Highlight",
												"Project",
												"{{projectId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Highlight-UpdateHighlight-Administrator",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6d25567a-c2c4-4c69-907d-127bcb41c1c6",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"var highlightStartDate = pm.environment.get(\"highlightStartDate\");",
													"var highlightId = parseInt(pm.environment.get(\"highlightId\"));",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.ok;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Highlight Id matches: \" + highlightId, function () {",
													"    pm.expect(jsonData.id).to.eql(highlightId);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "daefa6fd-7b6a-4f46-b05e-da6b102e8bbd",
												"exec": [
													"var current_timestamp = new Date();\r",
													"postman.setEnvironmentVariable(\"current_timestamp\", current_timestamp.toISOString());"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{administratorUserIdentityId}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"projectId\": \"{{projectId}}\",\r\n  \"startDate\": \"{{current_timestamp}}\",\r\n  \"endDate\": \"{{future_timestamp}}\",\r\n  \"description\" : \"Lorem Ipsum\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/Highlight/{{highlightId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Highlight",
												"{{highlightId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Highlight-GetUpdatedHighlight-Administrator",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "18b2cbb8-5195-4362-8954-206ba862446a",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"var highlightUpdateTimestamp = pm.environment.get(\"current_timestamp\");",
													"var highlightEndDate = pm.environment.get(\"highlightEndDate\");",
													"var highlightId = pm.environment.get(\"highlightId\");",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Highlight Id matches: \" + highlightId, function () {",
													"    pm.expect(jsonData.id).to.eql(highlightId);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"value": "{{administratorUserIdentityId}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Highlight/{{highlightId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Highlight",
												"{{highlightId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Highlight-GetHighlight-NonExisting-Administrator",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "026f5ecd-7e1d-4d5d-b986-d2611530c4c8",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 404\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"    pm.response.to.be.notFound;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json;",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{administratorUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Highlight/98989",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Highlight",
												"98989"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Embed",
							"item": [
								{
									"name": "Embed-CreateEmbed-Administrator",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d3fbffec-c595-4548-97dc-26a7748898bd",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.environment.set(\"embedGuid\", jsonData.guid);",
													"pm.environment.set(\"embeddedProjectId\", jsonData.project.id);",
													"",
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.success;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{administratorUserIdentityId}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"projectId\": {{projectId}}\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/Embed",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Embed"
											]
										}
									},
									"response": []
								},
								{
									"name": "Embed-GetAllEmbeds-Administrator",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "67ca4807-10fe-4de1-bd7b-470ba1cf6b4e",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"var embedGuid = pm.environment.get(\"embedGuid\");",
													"",
													"var jsonData = pm.response.json();",
													"",
													"var foundAt;",
													"",
													"function findItem(jsonData, item) {",
													"    for (var i = 0; i < jsonData.length; i++) {",
													"        if (jsonData[i].guid == item) {",
													"            return i;",
													"        }",
													"    }",
													"    return -1;",
													"}",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Embed is in list and matches: \" + embedGuid, function () {",
													"    foundAt = findItem(jsonData, embedGuid);",
													"    pm.expect(foundAt).to.not.eql(-1);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{administratorUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Embed",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Embed"
											]
										}
									},
									"response": []
								},
								{
									"name": "Embed-GetEmbed-Administrator",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "9924fade-3b96-4698-b70a-18a1523a1aa4",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"var embeddedProjectId = parseInt(pm.environment.get(\"embeddedProjectId\"))",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Embed matches: \" + embeddedProjectId, function () {",
													"    pm.expect(jsonData.id).to.eql(embeddedProjectId);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{administratorUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Embed/{{embedGuid}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Embed",
												"{{embedGuid}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Embed-GetEmbed-NonExisting-Administrator",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "584c2a1d-3bd2-410a-85e1-d22ed155cf89",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 404\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"    pm.response.to.be.notFound;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json;",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{administratorUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Embed/cdaadc49-b4b9-4c11-8937-e602174cba30",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Embed",
												"cdaadc49-b4b9-4c11-8937-e602174cba30"
											]
										}
									},
									"response": []
								},
								{
									"name": "Embed-GetEmbed-NonExisting-NoGUID-Administrator",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e6867a6d-907d-41e2-8ab5-e02252a4375a",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 404\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"    pm.response.to.be.notFound;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json;",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{administratorUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Embed/98989",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Embed",
												"98989"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Role",
							"item": [
								{
									"name": "Role-CreateRole-Administrator",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6e167995-9c19-4495-a99c-30f401f6ebf2",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"var scopeName = pm.environment.get(\"scopeName\");",
													"var roleName = pm.environment.get(\"roleName\");",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.environment.set(\"roleId\", jsonData.id);",
													"",
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.success;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});",
													"",
													"pm.test(\"Role Name is set correctly and matching: \" + roleName, function () {",
													"    pm.expect(jsonData.name).to.eql(roleName);",
													"});",
													"",
													"pm.test(\"Scope is correct and matching: \" + scopeName, function () {",
													"    pm.expect(jsonData.scopes.scope).to.eql(scopeName);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{administratorUserIdentityId}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"name\": \"{{roleName}}\",\r\n  \"scopes\": [\r\n    {\r\n      \"scope\": \"EmbedWrite\"\r\n    }\r\n  ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/Role",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Role"
											]
										}
									},
									"response": []
								},
								{
									"name": "Role-GetAllRoles-Administrator",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3da32d45-6271-49af-b33f-9b8821d30974",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"var roleName = pm.environment.get(\"roleName\");",
													"",
													"var jsonData = pm.response.json();",
													"",
													"var foundAt;",
													"",
													"function findProject(jsonData, name) {",
													"    for (var i = 0; i < jsonData.length; i++) {",
													"        if (jsonData[i].name == name) {",
													"            return i;",
													"        }",
													"    }",
													"    return -1;",
													"}",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Role: \" + roleName + \" is in list\", function () {",
													"    foundAt = findProject(jsonData, roleName);",
													"    pm.expect(foundAt).to.not.eql(-1);",
													"});",
													"",
													"pm.test(\"Role Name is set correctly with matching: \" + roleName, function () {",
													"    pm.expect(jsonData[foundAt].name).to.eql(roleName);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{administratorUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Role",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Role"
											]
										}
									},
									"response": []
								},
								{
									"name": "Scope-GetAllScopes-Administrator",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "99f8b3e7-c14c-4609-a8e6-82fbf26edf8b",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"var identityId = parseInt(pm.environment.get(\"identityId\"));",
													"var projectName = pm.environment.get(\"projectName\");",
													"",
													"var jsonData = pm.response.json();",
													"",
													"var foundAt;",
													"",
													"function findProject(jsonData, name) {",
													"    for (var i = 0; i < jsonData.length; i++) {",
													"        if (jsonData[i].name == name) {",
													"            return i;",
													"        }",
													"    }",
													"    return -1;",
													"}",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{administratorUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Role/Scopes",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Role",
												"Scopes"
											]
										}
									},
									"response": []
								},
								{
									"name": "Role-GetRole-Administrator",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "9596fbd6-6b4f-4cd0-93be-63cf3961e83e",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"var roleId = parseInt(pm.environment.get(\"roleId\"));",
													"var roleName = pm.environment.get(\"roleName\");",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Role Name is set correctly\", function () {",
													"    pm.expect(jsonData.name).to.eql(roleName);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{administratorUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Role/{{roleId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Role",
												"{{roleId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Role-UpdateRole-Administrator",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2e2076b3-5a3c-4551-9da4-b63b63f4f208",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"var updatedRoleName = pm.environment.get(\"updatedRoleName\");",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.ok;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Role Name is set correctly\", function () {",
													"    pm.expect(jsonData.name).to.eql(updatedRoleName);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{administratorUserIdentityId}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"name\": \"{{updatedRoleName}}\",\r\n  \"scopes\": [\r\n    {\r\n      \"scope\": \"EmbedWrite\"\r\n    }\r\n  ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/Role/{{roleId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Role",
												"{{roleId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Role-GetUpdatedRole-Administrator",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "25301aa5-ed7a-4c87-a210-40bc0026d2d4",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"var updatedRoleName = pm.environment.get(\"updatedRoleName\");",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Role Name is set correctly and matches: \" + updatedRoleName, function () {",
													"    pm.expect(jsonData.name).to.eql(updatedRoleName);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{administratorUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Role/{{roleId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Role",
												"{{roleId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Role-SetRole-Administrator",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "fda469be-b858-42f4-9c31-310a1a2cbeea",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"var roleId = parseInt(pm.environment.get(\"roleId\"));",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.ok;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Role is set correctly and matches: \" + roleId, function () {",
													"    pm.expect(jsonData.role.id).to.eql(roleId);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{administratorUserIdentityId}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"createdUserId\": {{createdUserId}},\r\n  \"name\": \"{{projectNameUpdated}}\",\r\n  \"description\": \"postmantest_description\",\r\n  \"shortDescription\": \"postmantest_shortdesc\",\r\n  \"uri\": \"postmantest_uri\",\r\n  \"collaborators\": [\r\n    {\r\n      \"fullName\": \"postmantest_collfullname\",\r\n      \"role\": \"postmantest_collrole\"\r\n    }\r\n  ],\r\n  \"created\": \"2020-04-20T08:24:26.693Z\",\r\n  \"updated\": \"2020-04-20T08:24:26.693Z\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/Role/setRole?userId={{createdUserId}}&roleId={{roleId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Role",
												"setRole"
											],
											"query": [
												{
													"key": "userId",
													"value": "{{createdUserId}}",
													"description": "Id of the user that we want to update"
												},
												{
													"key": "roleId",
													"value": "{{roleId}}",
													"description": "Id of the role that you want to update the user with"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "User-GetRole-Administrator",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "dfce0b6a-5bba-4e82-a476-ba751b3555fa",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"var roleId = parseInt(pm.environment.get(\"roleId\"));",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Check if user has role that matches: \" + roleId, function () {",
													"    pm.expect(jsonData.role.id).to.eql(roleId);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{administratorUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/User/{{createdUserId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"User",
												"{{createdUserId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Role-GetRole-NonExisting-Administrator",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "aedb03af-bef7-4511-b6b1-953d75d0d1c4",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 404\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"    pm.response.to.be.notFound;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json;",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{administratorUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Role/98989",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Role",
												"98989"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Search",
							"item": [
								{
									"name": "Search-SearchInternal-Administrator",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "1007673c-7eac-4a67-9c97-04de953c9463",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"var projectName = pm.environment.get(\"projectName\");",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.ok;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Project Name is set correctly and matching: \" + projectName, function () {",
													"    pm.expect(jsonData.results[0].name).to.eql(projectName);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{administratorUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Search/internal/{{projectId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Search",
												"internal",
												"{{projectId}}"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Wizard",
							"item": [
								{
									"name": "Wizard-GetWizard-Administrator",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "95160898-ddb9-433c-8759-d5fbdc96ce4e",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\")) + 1000;",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{administratorUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Wizard?sourceURI={{wizardSourceUri}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Wizard"
											],
											"query": [
												{
													"key": "sourceURI",
													"value": "{{wizardSourceUri}}",
													"description": "This is the URI that the wizard will use to fetch the source."
												}
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Institution",
							"item": [
								{
									"name": "Institution-CreateInstitution-Administrator",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3a104b27-c46e-4685-b0a2-2ca6cefe3ffb",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"var institutionName = pm.environment.get(\"institutionName\");",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.environment.set(\"createdInstitutionId\", jsonData.id);",
													"",
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.success;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});",
													"",
													"pm.test(\"Check if created Name matches: \" + institutionName, function () {",
													"    pm.expect(jsonData.name).to.eql(institutionName);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{administratorUserIdentityId}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"{{institutionName}}\",\n    \"description\": \"postmantest_initial_description\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/Institution",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Institution"
											]
										}
									},
									"response": []
								},
								{
									"name": "Institution-GetInstitution-Administrator",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "aa1765ae-d672-4311-af5d-3f053176af9c",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"var createdInstitutionId = parseInt(pm.environment.get(\"createdInstitutionId\"));",
													"var institutionName = pm.environment.get(\"institutionName\");",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Check if updated Id matches: \" + createdInstitutionId, function () {",
													"    pm.expect(jsonData.id).to.eql(createdInstitutionId);",
													"});",
													"",
													"pm.test(\"Check previously created UserName with id \" + institutionName, function () {",
													"    pm.expect(jsonData.name).to.eql(institutionName);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{administratorUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Institution/{{createdInstitutionId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Institution",
												"{{createdInstitutionId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Institution-UpdateInstitution-Administrator",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a92e459b-dce7-44d2-9cda-9922f68cecda",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"var institutionName = pm.environment.get(\"updatedInstitutionName\");",
													"pm.environment.set(\"institutionName\", institutionName);",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.ok;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Check if updated Institution Name matches: \" + institutionName, function () {",
													"    pm.expect(jsonData.name).to.eql(institutionName);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{administratorUserIdentityId}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"name\": \"{{updatedInstitutionName}}\",\r\n  \"description\": \"postmantest_updated_description\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/Institution/{{createdInstitutionId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Institution",
												"{{createdInstitutionId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Institution-GetUpdatedInstitution-Administrator",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c8b7dc36-296a-445b-bda8-7dd6fc50b4ad",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"var createdInstitutionId = parseInt(pm.environment.get(\"createdInstitutionId\"));",
													"var institutionName = pm.environment.get(\"institutionName\")",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Check if updated Institution Id matches: \" + createdInstitutionId, function () {",
													"    pm.expect(jsonData.id).to.eql(createdInstitutionId);",
													"});",
													"",
													"pm.test(\"Check if updated institution matches: \" + institutionName, function () {",
													"    pm.expect(jsonData.name).to.eql(institutionName);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{administratorUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Institution/{{createdInstitutionId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Institution",
												"{{createdInstitutionId}}"
											],
											"query": [
												{
													"key": "",
													"value": "",
													"disabled": true
												}
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Cleanup",
							"item": [
								{
									"name": "Embed-DeleteEmbed-Administrator",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "38abb9ff-4437-4683-b723-46b0fde9574d",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{administratorUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Embed/{{embedGuid}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Embed",
												"{{embedGuid}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Highlight-DeleteHighlight-Administrator",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "85f2e33f-bda8-4f9c-b092-ce2c48b1c15e",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{administratorUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Highlight/{{highlightId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Highlight",
												"{{highlightId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Project-DeleteProject-Administrator",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "fb624a60-834d-4440-964d-960c2d11ec80",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{administratorUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Project/{{projectId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Project",
												"{{projectId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Institution-DeleteInstitution-Administrator",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3186b9b0-3e88-4136-b75a-4ebec3ed6f2a",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{administratorUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Institution/{{createdInstitutionId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Institution",
												"{{createdInstitutionId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Role-DeleteRole-WithUsers-Administrator",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "697f307a-1ab9-420d-9bbf-847a8c4f98e4",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"",
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{administratorUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Role/{{roleId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Role",
												"{{roleId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "User-DeleteUser-Administrator",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "69cfbfdf-57d3-4f1c-8eb5-ebb39283d0d1",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{administratorUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/User/{{createdUserId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"User",
												"{{createdUserId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Role-DeleteRole-Administrator",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b282d1e5-99a5-4dbb-bc4a-cd0208f8683f",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{administratorUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Role/{{roleId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Role",
												"{{roleId}}"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Checkup-on-Cleanup",
							"item": [
								{
									"name": "Project-Get-Deleted-Project-Administrator",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "84142424-9dcc-4757-9a20-eb5009520c33",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"",
													"pm.test(\"Status code is 404\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"    pm.response.to.be.notFound;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{administratorUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Project/{{projectId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Project",
												"{{projectId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "User-Get-Deleted-User-Administrator",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f0d2c65d-2f1d-4f20-b938-99d965b80f32",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"",
													"pm.test(\"Status code is 404\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"    pm.response.to.be.notFound;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{administratorUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/User/{{createdUserId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"User",
												"{{createdUserId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Role-Get-Deleted-Role-Administrator",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "623b9990-cd8d-45a4-a4bf-c35b6cf90bcd",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"",
													"pm.test(\"Status code is 404\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"    pm.response.to.be.notFound;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{administratorUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Role/{{roleId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Role",
												"{{roleId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Embed-Get-Deleted-Embed-Administrator",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "efa699d9-6fba-4eac-80fc-70cbf17fda4e",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"",
													"pm.test(\"Status code is 404\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"    pm.response.to.be.notFound;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{administratorUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Embed/{{embedGuid}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Embed",
												"{{embedGuid}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Highlight-Get-Deleted-Highlight-Administrator",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b7fe21c4-cc5b-4d44-ba70-d4f47fdbe217",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"",
													"pm.test(\"Status code is 404\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"    pm.response.to.be.notFound;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{administratorUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Highlight/{{highlightId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Highlight",
												"{{highlightId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Institution-Get-Deleted-Institution-Administrator",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4c228ff7-2353-4339-b351-a3d1a5d6bca3",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"",
													"pm.test(\"Status code is 404\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"    pm.response.to.be.notFound;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{administratorUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Institution/{{createdInstitutionId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Institution",
												"{{createdInstitutionId}}"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "File",
							"item": [
								{
									"name": "File-CreateFile-Administrator",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "66749d15-2f76-475d-9865-e78c4dc16234",
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.environment.set(\"adminFileId\", jsonData.id)\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Response time is less than 800ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(800);\r",
													"});\r",
													"\r",
													"pm.test(\"Response must be valid and have a json body\", function () {\r",
													"     pm.response.to.be.success;\r",
													"     pm.response.to.be.withBody;\r",
													"     pm.response.to.be.json;\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "IdentityId",
												"value": "{{administratorUserIdentityId}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "File",
													"type": "file",
													"src": "Postman/testimage.png"
												}
											]
										},
										"url": {
											"raw": "{{apiUrl}}/api/File",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"File"
											]
										}
									},
									"response": []
								},
								{
									"name": "Files-GetAll-Adminstrator",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "8c163365-f6e0-4688-818e-7ffad7495ac2",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);\r",
													"});\r",
													"\r",
													"pm.test(\"Response must be valid and have a json body\", function () {\r",
													"     pm.response.to.be.success;\r",
													"     pm.response.to.be.withBody;\r",
													"     pm.response.to.be.json;\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{administratorUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/File",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"File"
											]
										}
									},
									"response": []
								},
								{
									"name": "File-Delete-Administrator",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "25bdb9d1-c6e9-4829-9fb0-0a9d8a9b40fb",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);\r",
													"});\r",
													"\r",
													"pm.test(\"Response must be valid\", function () {\r",
													"     pm.response.to.be.ok;\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "IdentityId",
												"value": "{{administratorUserIdentityId}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/File/{{adminFileId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"File",
												"{{adminFileId}}"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Guest",
					"item": [
						{
							"name": "Preparation",
							"item": [
								{
									"name": "Project-CreateProject",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "bce26163-3ab3-42e7-a661-07111d2da060",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"var administratorUserId = parseInt(pm.environment.get(\"administratorUserId\"));",
													"var projectName = pm.environment.get(\"projectName\");",
													"var adminUserName = pm.environment.get(\"adminUserName\");",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.environment.set(\"projectId\", jsonData.id);",
													"",
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.success;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});",
													"",
													"pm.test(\"Project Name is set correctly and matching: \" + projectName, function () {",
													"    pm.expect(jsonData.name).to.eql(projectName);",
													"});",
													"",
													"pm.test(\"User Name is correct and matching: \" + adminUserName, function () {",
													"    pm.expect(jsonData.user.name).to.eql(adminUserName);",
													"});",
													"",
													"pm.test(\"Identity ID is correct and matching: \" + administratorUserId, function () {",
													"    pm.expect(parseInt(jsonData.user.id)).to.eql(administratorUserId);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{administratorUserIdentityId}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"name\": \"{{projectName}}\",\r\n  \"description\": \"postmantest_description\",\r\n  \"shortDescription\": \"postmantest_shortdesc\",\r\n  \"uri\": \"postmantest_uri\",\r\n  \"collaborators\": [\r\n    {\r\n      \"fullName\": \"postmantest_collfullname\",\r\n      \"role\": \"postmantest_collrole\"\r\n    }\r\n  ],\r\n  \"created\": \"2020-04-20T08:24:26.693Z\",\r\n  \"updated\": \"2020-04-20T08:24:26.693Z\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/Project",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Project"
											]
										}
									},
									"response": []
								},
								{
									"name": "Highlight-CreateHighlight",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "7a43918a-5d77-4c7a-bece-a2c743611f26",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"var identityId = parseInt(pm.environment.get(\"identityId\"));",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.environment.set(\"highlightId\", jsonData.id);",
													"",
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.success;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "593bb72f-bf4f-4351-95f7-6c229f16bb85",
												"exec": [
													"var current_timestamp = new Date();\r",
													"postman.setEnvironmentVariable(\"current_timestamp\", current_timestamp.toISOString());\r",
													"\r",
													"var future_timestamp = new Date(Date.now() +(2 * 86400000));\r",
													"postman.setEnvironmentVariable(\"future_timestamp\", future_timestamp.toISOString());\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{administratorUserIdentityId}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"projectId\": {{projectId}},\r\n  \"startDate\": \"{{current_timestamp}}\",\r\n  \"endDate\": \"{{future_timestamp}}\",\r\n  \"description\" : \"Lorem Ipsum\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/Highlight",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Highlight"
											]
										}
									},
									"response": []
								},
								{
									"name": "Embed-CreateEmbed",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b9f50070-0b31-4ad1-a112-0f4d94d5cb65",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.environment.set(\"embedGuid\", jsonData.guid);",
													"pm.environment.set(\"embeddedProjectId\", jsonData.project.id);",
													"",
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.success;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{administratorUserIdentityId}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"projectId\": {{projectId}}\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/Embed",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Embed"
											]
										}
									},
									"response": []
								}
							],
							"description": "For some requests, we need to have data available. The variables need to be filled so the request can succeed. We put these preparation requests in this folder. We will clean them up in the cleanup folder.",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "08b9dc52-f2da-4595-ac04-0bae21d44d57",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "6fd3533b-5c73-4eb8-b618-ded598a8dd9f",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "User",
							"item": [
								{
									"name": "User-CreateUser-Guest",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "bc09e12d-f8bb-45e1-8587-be0313a44344",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 401\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.unauthorized;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"identityId\": \"98764342123\",\n    \"name\": \"mycooltestusername\",\n    \"email\": \"postmantest_email@example.com\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/User",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"User"
											]
										}
									},
									"response": []
								},
								{
									"name": "User-GetUser-Guest",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c3cdaf16-d5b6-49cd-9714-3790d116dc31",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 401\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.unauthorized;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{apiUrl}}/api/User/1",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"User",
												"1"
											]
										}
									},
									"response": []
								},
								{
									"name": "User-UpdateUser-Guest",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6596745e-9e2b-4beb-a32b-3bf6d3254d63",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 401\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.unauthorized;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"name\": \"bobz\",\r\n  \"email\": \"BobSmith@email.com\",\r\n  \"identityId\": {{administratorUserIdentityId}}\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/User/1",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"User",
												"1"
											]
										}
									},
									"response": []
								},
								{
									"name": "User-DeleteUser-Guest",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e0d67621-4520-4910-bcfe-62348d9147b8",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 401\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.unauthorized;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{apiUrl}}/api/User/1",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"User",
												"1"
											]
										}
									},
									"response": []
								}
							],
							"auth": {
								"type": "noauth"
							},
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "e9758d59-df21-4fba-99b2-e8eee5c09ac4",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "1e5c91df-587d-4d75-b769-b924b193e3d0",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "FollowUser",
							"item": [
								{
									"name": "User-FollowUser-Guest",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e9fdea24-051d-4cac-ad39-5a01f3e00264",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 401\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/User/follow/{{userIdToFollow}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"User",
												"follow",
												"{{userIdToFollow}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "User-UnFollowUser-Guest",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b77b463b-6131-4648-acab-f1cb66ec8509",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"",
													"pm.test(\"Status code is 401\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "DELETE",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/User/follow/{{userIdToFollow}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"User",
												"follow",
												"{{userIdToFollow}}"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Project",
							"item": [
								{
									"name": "Project-CreateProject-Guest",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "32948881-1b70-4860-acc6-8d6e3f4a1faa",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 401\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"    pm.response.to.be.unauthorized;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json;",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"name\": \"{{projectName}}\",\r\n  \"description\": \"postmantest_description\",\r\n  \"shortDescription\": \"postmantest_shortdesc\",\r\n  \"uri\": \"postmantest_uri\",\r\n  \"collaborators\": [\r\n    {\r\n      \"fullName\": \"postmantest_collfullname\",\r\n      \"role\": \"postmantest_collrole\"\r\n    }\r\n  ],\r\n  \"created\": \"2020-04-20T08:24:26.693Z\",\r\n  \"updated\": \"2020-04-20T08:24:26.693Z\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/Project",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Project"
											]
										}
									},
									"response": []
								},
								{
									"name": "Project-GetAllProjects-Guest",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "609a0246-5050-45e7-a727-4acaecbe4801",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"var projectName = pm.environment.get(\"projectName\");",
													"",
													"var jsonData = pm.response.json();",
													"",
													"var foundAt;",
													"",
													"function findProject(jsonData, name) {",
													"    for (var i = 0; i < jsonData.results.length; i++) {",
													"        if (jsonData.results[i].name == name) {",
													"            return i;",
													"        }",
													"    }",
													"    return -1;",
													"}",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Project: \" + projectName + \" is in list\", function () {",
													"    foundAt = findProject(jsonData, projectName);",
													"    pm.expect(foundAt).to.not.eql(-1);",
													"});",
													"",
													"pm.test(\"Project name is set correctly and matching: \" + projectName, function () {",
													"    pm.expect(jsonData.results[foundAt].name).to.eql(projectName);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{apiUrl}}/api/Project",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Project"
											]
										}
									},
									"response": []
								},
								{
									"name": "Project-GetProject-Guest",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ba387eab-8ee7-4783-be08-3d432c4f5151",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"var projectName = pm.environment.get(\"projectName\");",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Project name is set correctly and matches: \" + projectName, function () {",
													"    pm.expect(jsonData.name).to.eql(projectName);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{apiUrl}}/api/Project/{{projectId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Project",
												"{{projectId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Project-UpdateProject-Guest",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "41864144-8373-48a5-bf8b-dc649e48ebc4",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"",
													"pm.test(\"Status code is 401\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"    pm.response.to.be.unauthorized;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"name\": \"{{projectNameUpdated}}\",\r\n  \"description\": \"postmantest_description\",\r\n  \"shortDescription\": \"postmantest_shortdesc\",\r\n  \"uri\": \"postmantest_uri\",\r\n  \"collaborators\": [\r\n    {\r\n      \"fullName\": \"postmantest_collfullname\",\r\n      \"role\": \"postmantest_collrole\"\r\n    }\r\n  ],\r\n  \"created\": \"2020-04-20T08:24:26.693Z\",\r\n  \"updated\": \"2020-04-20T08:24:26.693Z\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/Project/1",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Project",
												"1"
											]
										}
									},
									"response": []
								},
								{
									"name": "Project-DeleteProject-Guest",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "02adebda-825b-4887-a985-40e226d76cd2",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 401\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.unauthorized;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{apiUrl}}/api/Project/1",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Project",
												"1"
											]
										}
									},
									"response": []
								}
							],
							"auth": {
								"type": "noauth"
							},
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "ee1b7faa-ef33-4f0b-8bea-0140789c0e9e",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "0747b452-a4cf-4155-852d-ab44eb592de2",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "FollowProject",
							"item": [
								{
									"name": "Project-FollowProject-Guest",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "aedf2118-0dd4-400c-a97d-57067333c8f2",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 401\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/project/follow/{{projectIdToFollow}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"project",
												"follow",
												"{{projectIdToFollow}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Project-UnFollowProject-Guest",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "8af1d5fd-876c-4315-97fa-81153d5f4ea9",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"",
													"pm.test(\"Status code is 401\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "DELETE",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/project/follow/{{projectIdToFollow}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"project",
												"follow",
												"{{projectIdToFollow}}"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Highlight",
							"item": [
								{
									"name": "Highlight-CreateHighlight-Guest",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ddb959a9-bd05-4aa9-8196-37fd51a164df",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 401\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"    pm.response.to.be.unauthorized;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json;",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "ebfe798f-8fb0-498c-a43f-d9307f2ff33e",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"projectId\": {{projectId}},\r\n  \"startDate\": \"{{current_timestamp}}\",\r\n  \"endDate\": \"{{future_timestamp}}\",\r\n  \"description\" : \"Lorem Ipsum\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/Highlight",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Highlight"
											]
										}
									},
									"response": []
								},
								{
									"name": "Highlight-GetAllActiveHighlights-Guest",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b779335a-69e9-4274-9522-33f65e0efe29",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{apiUrl}}/api/Highlight",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Highlight"
											]
										}
									},
									"response": []
								},
								{
									"name": "Highlight-GetHighlight-Guest",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c9caca1a-6c0f-4c0f-8c27-257bf50698b0",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"var highlightId = parseInt(pm.environment.get(\"highlightId\"));",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.environment.set(\"highlightStartDate\", jsonData.startDate);",
													"pm.environment.set(\"highlightEndDate\", jsonData.endDate);",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Highlight Id matches: \" + highlightId, function () {",
													"    pm.expect(jsonData.id).to.eql(highlightId);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{apiUrl}}/api/Highlight/{{highlightId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Highlight",
												"{{highlightId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Highlight-GetHighlight-ByProject-Guest",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4236a3b2-6826-4d06-84db-f19a9c19b16c",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 401\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"    pm.response.to.be.unauthorized;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json;",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{apiUrl}}/api/Highlight/Project/{{projectId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Highlight",
												"Project",
												"{{projectId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Highlight-UpdateHighlight-Guest",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "38fabf1f-bce5-4608-b297-e34137a0d5b3",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 401\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"    pm.response.to.be.unauthorized;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json;",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "6b2ce622-7427-48c5-91a6-9ae2a39e2987",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"projectId\": \"{{projectId}}\",\r\n  \"startDate\": \"{{current_timestamp}}\",\r\n  \"endDate\": \"{{highlightEndDate}}\",\r\n  \"description\" : \"Lorem Ipsum\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/Highlight/{{highlightId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Highlight",
												"{{highlightId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Highlight-DeleteHighlight-Guest",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5278d1ed-ebfd-4717-9aaa-ac91f17af8c6",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 401\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.unauthorized;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{apiUrl}}/api/Highlight/{{highlightId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Highlight",
												"{{highlightId}}"
											]
										}
									},
									"response": []
								}
							],
							"auth": {
								"type": "noauth"
							},
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "ff8e51b9-18bf-4913-bc0d-a6a6b6514742",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "96cfdfba-1fe3-4059-83fc-f9b4bb080f75",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Embed",
							"item": [
								{
									"name": "Embed-CreateEmbed-Guest",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "08126be3-562b-4669-b956-d71820eaeafd",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 401\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.unauthorized;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"projectId\": {{projectId}}\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/Embed",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Embed"
											]
										}
									},
									"response": []
								},
								{
									"name": "Embed-GetAllEmbeds-Guest",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4f9e6e69-eecf-40ec-93e9-bdba0e194e50",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 401\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.unauthorized;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{apiUrl}}/api/Embed",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Embed"
											]
										}
									},
									"response": []
								},
								{
									"name": "Embed-GetEmbed-Guest",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c850eee7-f60e-4bf0-8030-91c3450fa6ed",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.ok;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{apiUrl}}/api/Embed/{{embedGuid}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Embed",
												"{{embedGuid}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Embed-DeleteEmbed-Guest",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a300a84a-4da0-419c-9370-17a0271c4913",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 401\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.unauthorized;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{apiUrl}}/api/Embed/{{embedGuid}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Embed",
												"{{embedGuid}}"
											]
										}
									},
									"response": []
								}
							],
							"auth": {
								"type": "noauth"
							},
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "7d592043-ce85-4413-b680-f04da58c2d08",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "d48664f6-f605-4807-8784-d292bb7a217e",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Role",
							"item": [
								{
									"name": "Role-CreateRole-Guest",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f3019ad5-0c7f-49ee-9e60-878ba953afbe",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 401\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"    pm.response.to.be.unauthorized;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json;",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"name\": \"{{roleName}}\",\r\n  \"scopes\": [\r\n    {\r\n      \"scope\": \"EmbedWrite\"\r\n    }\r\n  ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/Role",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Role"
											]
										}
									},
									"response": []
								},
								{
									"name": "Role-GetAllRoles-Guest",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "9f02b6c4-358c-499c-935b-8941d3ce4aaa",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 401\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"    pm.response.to.be.unauthorized;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json;",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{apiUrl}}/api/Role",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Role"
											]
										}
									},
									"response": []
								},
								{
									"name": "Scope-GetAllScopes-Guest",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f86b8676-5a7b-4b8e-b3b9-ff3f08e0230c",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 401\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"    pm.response.to.be.unauthorized;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json;",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{apiUrl}}/api/Role/Scopes",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Role",
												"Scopes"
											]
										}
									},
									"response": []
								},
								{
									"name": "Role-GetRole-Guest",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f8313542-6f22-483d-b9c2-1a410c92cf45",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 401\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"    pm.response.to.be.unauthorized;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json;",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{apiUrl}}/api/Role/1",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Role",
												"1"
											]
										}
									},
									"response": []
								},
								{
									"name": "Role-UpdateRole-Guest",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6f0104ed-a998-42e9-8d6b-8b435d469bb6",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 401\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"    pm.response.to.be.unauthorized;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json;",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"name\": \"{{updatedRoleName}}\",\r\n  \"scopes\": [\r\n    {\r\n      \"scope\": \"EmbedWrite\"\r\n    }\r\n  ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/Role/1",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Role",
												"1"
											]
										}
									},
									"response": []
								},
								{
									"name": "Role-SetRole-Guest",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "1392cbbb-7aa4-484f-b723-d6ad2f698052",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 401\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"    pm.response.to.be.unauthorized;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json;",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"createdUserId\": {{createdUserId}},\r\n  \"name\": \"{{projectNameUpdated}}\",\r\n  \"description\": \"postmantest_description\",\r\n  \"shortDescription\": \"postmantest_shortdesc\",\r\n  \"uri\": \"postmantest_uri\",\r\n  \"collaborators\": [\r\n    {\r\n      \"fullName\": \"postmantest_collfullname\",\r\n      \"role\": \"postmantest_collrole\"\r\n    }\r\n  ],\r\n  \"created\": \"2020-04-20T08:24:26.693Z\",\r\n  \"updated\": \"2020-04-20T08:24:26.693Z\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/Role/setRole?createdUserId={{createdUserId}}&roleId=1",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Role",
												"setRole"
											],
											"query": [
												{
													"key": "createdUserId",
													"value": "{{createdUserId}}",
													"description": "Id of the user that we want to update"
												},
												{
													"key": "roleId",
													"value": "1",
													"description": "Id of the role that you want to update the user with"
												}
											]
										}
									},
									"response": []
								}
							],
							"auth": {
								"type": "noauth"
							},
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "a5ba1369-b7f5-4acd-9232-fc365f847ed8",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "079e8399-24c6-4995-a79f-479efbfd25a0",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Search",
							"item": [
								{
									"name": "Search-SearchInternal-Guest",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f990247c-4015-4c87-824b-0c095014ece0",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.ok;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{apiUrl}}/api/Search/internal/1",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Search",
												"internal",
												"1"
											]
										}
									},
									"response": []
								}
							],
							"auth": {
								"type": "noauth"
							},
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "2a749efa-b3d5-4476-bc78-521b840b62dd",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "120428dc-98c0-4712-9497-5e3ef2c2deec",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Wizard",
							"item": [
								{
									"name": "Wizard-GetWizard-Guest",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ea99c502-5412-443f-81ca-d7a4654b3bf3",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 401\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"    pm.response.to.be.unauthorized;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json;",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{apiUrl}}/api/Wizard?sourceURI={{wizardSourceUri}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Wizard"
											],
											"query": [
												{
													"key": "sourceURI",
													"value": "{{wizardSourceUri}}",
													"description": "This is the URI that the wizard will use to fetch the source."
												}
											]
										}
									},
									"response": []
								}
							],
							"auth": {
								"type": "noauth"
							},
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "a2c2683f-b10a-45a1-bb2a-443d4590ae5e",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "2dc2d7ab-659d-4f08-aaf8-8bc46b0e19b2",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Institution",
							"item": [
								{
									"name": "Institution-CreateInstitution-Guest",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ab092b72-b557-413b-9332-2dd118c325b9",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 401\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.unauthorized;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"{{institutionName}}\",\n    \"description\": \"postmantest_initial_description\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/Institution",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Institution"
											]
										}
									},
									"response": []
								},
								{
									"name": "Institution-GetInstitution-Guest",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "786b3c68-3471-4afb-88e5-c4752430bf77",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 401\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.unauthorized;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{apiUrl}}/api/Institution/1",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Institution",
												"1"
											]
										}
									},
									"response": []
								},
								{
									"name": "Institution-UpdateInstitution-Guest",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "29211e23-cb59-4650-8925-9dbecbc71f23",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 401\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.unauthorized;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"name\": \"{{institutionName}}\",\r\n    \"description\": \"postmantest_initial_description\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/Institution/1",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Institution",
												"1"
											]
										}
									},
									"response": []
								},
								{
									"name": "Instituiton-DeleteInstitution-Guest",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2d4945f0-2223-43b5-a506-c71bf44e5c3d",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 401\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.unauthorized;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{apiUrl}}/api/Institution/1",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Institution",
												"1"
											]
										}
									},
									"response": []
								}
							],
							"auth": {
								"type": "noauth"
							},
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "d1ef1aa1-d1a9-4b6f-a2f7-9efa9270e2b5",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "53ce9ec1-48e3-40c2-b234-b50edafc49d8",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "File",
							"item": [
								{
									"name": "Post-File-Guest",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "8703f7db-e67f-4220-b87c-ed226ab90473",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));\r",
													"\r",
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Status code is 401\", function () {\r",
													"    pm.response.to.have.status(401);\r",
													"});\r",
													"\r",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);\r",
													"});\r",
													"\r",
													"pm.test(\"Response must be valid and have a json body\", function () {\r",
													"    pm.response.to.be.unauthorized;\r",
													"    pm.response.to.be.withBody;\r",
													"    pm.response.to.be.json;\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "File",
													"type": "file",
													"src": "Postman/testimage.png"
												}
											]
										},
										"url": {
											"raw": "{{apiUrl}}/api/File",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"File"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get-Files-Guest",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "654804e6-91c6-4840-acdf-2477dc7e4341",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));\r",
													"\r",
													"pm.test(\"Status code is 401\", function () {\r",
													"    pm.response.to.have.status(401);\r",
													"});\r",
													"\r",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{apiUrl}}/api/File",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"File"
											]
										}
									},
									"response": []
								},
								{
									"name": "File-Delete-Guest",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "dd7278cf-6038-4c95-8814-d60227e5d6f8",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));\r",
													"\r",
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Status code is 401\", function () {\r",
													"    pm.response.to.have.status(401);\r",
													"});\r",
													"\r",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);\r",
													"});\r",
													"\r",
													"pm.test(\"Response must be valid and have a json body\", function () {\r",
													"     pm.response.to.be.unauthorized;\r",
													"     pm.response.to.be.withBody;\r",
													"     pm.response.to.be.json;\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{apiUrl}}/api/File/1",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"File",
												"1"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "70414a7c-6ae9-40cb-9c51-608b39e2b9df",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "653fc8a1-0923-4345-94dd-45f3e761533a",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Registered",
					"item": [
						{
							"name": "Preparation",
							"item": [
								{
									"name": "User-CreateUser",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4ac87e1f-d7cf-46a1-b4b4-a5e72448ea7b",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"var userName = pm.environment.get(\"userName\");",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.environment.set(\"createdUserId\", jsonData.id);",
													"pm.environment.set(\"identityId\", jsonData.id);",
													"",
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.success;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});",
													"",
													"pm.test(\"Check if created Username matches: \" + userName, function () {",
													"    pm.expect(jsonData.name).to.eql(userName);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{administratorUserIdentityId}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"identityId\": \"9996\",\n    \"name\": \"{{userName}}\",\n    \"email\": \"postmantest_email@example.com\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/User",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"User"
											]
										}
									},
									"response": []
								},
								{
									"name": "Project-CreateProject",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "033c9fc5-33c6-4ef3-abb1-d2b2666cb434",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"var administratorUserId = parseInt(pm.environment.get(\"administratorUserId\"));",
													"var projectName = pm.environment.get(\"projectName\");",
													"var adminUserName = pm.environment.get(\"adminUserName\");",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.environment.set(\"projectId\", jsonData.id);",
													"pm.environment.set(\"adminProjectId\", jsonData.id);",
													"",
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.success;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});",
													"",
													"pm.test(\"Project Name is set correctly and matching: \" + projectName, function () {",
													"    pm.expect(jsonData.name).to.eql(projectName);",
													"});",
													"",
													"pm.test(\"User Name is correct and matching: \" + adminUserName, function () {",
													"    pm.expect(jsonData.user.name).to.eql(adminUserName);",
													"});",
													"",
													"pm.test(\"Identity ID is correct and matching: \" + administratorUserId, function () {",
													"    pm.expect(parseInt(jsonData.user.id)).to.eql(administratorUserId);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{administratorUserIdentityId}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"name\": \"{{projectName}}\",\r\n  \"description\": \"postmantest_description\",\r\n  \"shortDescription\": \"postmantest_shortdesc\",\r\n  \"uri\": \"postmantest_uri\",\r\n  \"collaborators\": [\r\n    {\r\n      \"fullName\": \"postmantest_collfullname\",\r\n      \"role\": \"postmantest_collrole\"\r\n    }\r\n  ],\r\n  \"created\": \"2020-04-20T08:24:26.693Z\",\r\n  \"updated\": \"2020-04-20T08:24:26.693Z\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/Project",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Project"
											]
										}
									},
									"response": []
								},
								{
									"name": "Highlight-CreateHighlight",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "19014dca-ef6d-4a59-a3ab-0ce689c52e90",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"var identityId = parseInt(pm.environment.get(\"identityId\"));",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.environment.set(\"highlightId\", jsonData.id);",
													"",
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.success;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "f51cc44b-70e2-4187-b43f-71d53b6b054c",
												"exec": [
													"var current_timestamp = new Date();\r",
													"postman.setEnvironmentVariable(\"current_timestamp\", current_timestamp.toISOString());\r",
													"\r",
													"var future_timestamp = new Date(Date.now() +(2 * 86400000));\r",
													"postman.setEnvironmentVariable(\"future_timestamp\", future_timestamp.toISOString());\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{administratorUserIdentityId}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"projectId\": {{projectId}},\r\n  \"startDate\": \"{{current_timestamp}}\",\r\n  \"endDate\": \"{{future_timestamp}}\",\r\n  \"description\" : \"Lorem Ipsum\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/Highlight",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Highlight"
											]
										}
									},
									"response": []
								},
								{
									"name": "Embed-CreateEmbed",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d8f27be7-5e99-45ce-a3ad-b84701be4c22",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.environment.set(\"embedGuid\", jsonData.guid);",
													"pm.environment.set(\"adminEmbedGuid\", jsonData.guid);",
													"pm.environment.set(\"embeddedProjectId\", jsonData.project.id);",
													"",
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.success;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{administratorUserIdentityId}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"projectId\": {{projectId}}\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/Embed",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Embed"
											]
										}
									},
									"response": []
								},
								{
									"name": "Role-CreateRole",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5939557f-80f4-401c-9496-39284a1130f6",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"var scopeName = pm.environment.get(\"scopeName\");",
													"var roleName = pm.environment.get(\"roleName\");",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.environment.set(\"roleId\", jsonData.id);",
													"",
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.success;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});",
													"",
													"pm.test(\"Role Name is set correctly and matching: \" + roleName, function () {",
													"    pm.expect(jsonData.name).to.eql(roleName);",
													"});",
													"",
													"pm.test(\"Scope is correct and matching: \" + scopeName, function () {",
													"    pm.expect(jsonData.scopes.scope).to.eql(scopeName);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{administratorUserIdentityId}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"name\": \"{{roleName}}\",\r\n  \"scopes\": [\r\n    {\r\n      \"scope\": \"EmbedWrite\"\r\n    }\r\n  ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/Role",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Role"
											]
										}
									},
									"response": []
								}
							],
							"description": "For some requests, we need to have data available. The variables need to be filled so the request can succeed. We put these preparation requests in this folder. We will clean them up in the cleanup folder.",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "8f9e890c-67a7-4bb1-9521-ecd474375c60",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "bd01da93-826b-4e3c-8a2a-eba9d7f67246",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "User",
							"item": [
								{
									"name": "User-CreateUser-Registered",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "9b28a358-6d2e-4649-9e66-7a8ee0b7603a",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 403\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.forbidden;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{registeredUserIdentityId}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"identityId\": \"{{createdUserId}}\",\n    \"name\": \"{{userName}}\",\n    \"email\": \"postmantest_email@example.com\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/User",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"User"
											]
										}
									},
									"response": []
								},
								{
									"name": "User-GetUser-Other-Registered",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "fbcebdf0-dbbf-4e30-a83d-53e5bda06d8d",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 403\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.forbidden;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{registeredUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/User/{{createdUserId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"User",
												"{{createdUserId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "User-GetUser-Self-Registered",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "94e2d3f0-8718-4956-842c-e04ad2f309d9",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"var aliceIdentityId = parseInt(pm.environment.get(\"registeredUserIdentityId\"));",
													"",
													"var jsonData = pm.response.json();",
													"pm.environment.set(\"registeredUserId\", jsonData.id);",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.ok;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});",
													"",
													"pm.test(\"Identity ID is correct and matching: \" + aliceIdentityId, function () {",
													"    pm.expect(parseInt(jsonData.identityId)).to.eql(aliceIdentityId);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{registeredUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/User",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"User"
											]
										}
									},
									"response": []
								},
								{
									"name": "User-UpdateUser-Self-Registered",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6520ec95-ecc7-42b5-9e4c-0b204c11dacd",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"var updatedAliceEmail = pm.environment.get(\"updatedAliceEmail\");",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.ok;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Check if email update matches: \" + updatedAliceEmail, function () {",
													"    pm.expect(jsonData.email).to.eql(updatedAliceEmail);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{registeredUserIdentityId}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"name\": \"alicez\",\r\n  \"email\": \"{{updatedAliceEmail}}\",\r\n  \"identityId\": \"{{registeredUserIdentityId}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/User/{{registeredUserId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"User",
												"{{registeredUserId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "User-UpdateUser-Other-Registered",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f5292c4d-662c-4cb5-9c25-28fe2e362f31",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 401\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.unauthorized;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{registeredUserIdentityId}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"name\": \"bobz\",\r\n  \"email\": \"BobSmith@email.com\",\r\n  \"identityId\": {{administratorUserIdentityId}}\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/User/{{createdUserId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"User",
												"{{createdUserId}}"
											]
										}
									},
									"response": []
								}
							],
							"description": "Requests executed as the Alice user with the registered role.",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "fc74b017-4ef3-46ec-adc2-3ce7e7ba1a92",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "41c71b24-8540-4c2e-bbcc-13d5d92c7a00",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "FollowUser",
							"item": [
								{
									"name": "User-FollowUser-Registered",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "17c77de0-b68c-4f51-aa73-5ce56e5c674f",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"",
													"var jsonData = pm.response.json();",
													"var userId = pm.environment.get(\"userIdToFollow\");",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.success;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});",
													"",
													"pm.test(\"Check if created Username matches: \" + userId, function () {",
													"    pm.expect(jsonData.id).to.eql(userId);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{registeredUserIdentityId}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/User/follow/{{userIdToFollow}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"User",
												"follow",
												"{{userIdToFollow}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "User-UnFollowUser-Registered",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "0481a5be-3ce7-4a52-bea0-fa61e62c2561",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{registeredUserIdentityId}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/User/follow/{{userIdToFollow}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"User",
												"follow",
												"{{userIdToFollow}}"
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "6d05de55-eda6-4592-8fa0-feb693934bf5",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "978cb841-4a11-47de-ad25-d518d128a3c5",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Project",
							"item": [
								{
									"name": "Project-CreateProject-Registered",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ec3ab0bf-91f1-4fbf-bab1-a6abec4d00b7",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"var registeredUserId = pm.environment.get(\"registeredUserId\");",
													"var projectName = pm.environment.get(\"projectName\");",
													"",
													"var jsonData = pm.response.json();",
													"pm.environment.set(\"projectId\", jsonData.id);",
													"",
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});",
													"",
													"pm.test(\"Project Name is set correctly and matches: \" + projectName, function () {",
													"    pm.expect(jsonData.name).to.eql(projectName);",
													"});",
													"",
													"pm.test(\"Identity Id is set correctly and matches: \" + registeredUserId, function () {",
													"    pm.expect(jsonData.user.id).to.eql(registeredUserId);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{registeredUserIdentityId}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"name\": \"{{projectName}}\",\r\n  \"description\": \"postmantest_description\",\r\n  \"shortDescription\": \"postmantest_shortdesc\",\r\n  \"uri\": \"postmantest_uri\",\r\n  \"collaborators\": [\r\n    {\r\n      \"fullName\": \"postmantest_collfullname\",\r\n      \"role\": \"postmantest_collrole\"\r\n    }\r\n  ],\r\n  \"created\": \"2020-04-20T08:24:26.693Z\",\r\n  \"updated\": \"2020-04-20T08:24:26.693Z\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/Project",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Project"
											]
										}
									},
									"response": []
								},
								{
									"name": "Project-GetAllProjects-Registered",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a600fb80-7677-4f71-b154-ab623a75a4b1",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"var projectName = pm.environment.get(\"projectName\");",
													"",
													"var jsonData = pm.response.json();",
													"",
													"var foundAt;",
													"",
													"function findProject(jsonData, name) {",
													"    for (var i = 0; i < jsonData.results.length; i++) {",
													"        if (jsonData.results[i].name == name) {",
													"            return i;",
													"        }",
													"    }",
													"    return -1;",
													"}",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Project: \" + projectName + \" is in list\", function () {",
													"    foundAt = findProject(jsonData, projectName);",
													"    pm.expect(foundAt).to.not.eql(-1);",
													"});",
													"",
													"pm.test(\"Project Name is set correctly and matching: \" + projectName, function () {",
													"    pm.expect(jsonData.results[foundAt].name).to.eql(projectName);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{registeredUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Project",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Project"
											]
										}
									},
									"response": []
								},
								{
									"name": "Project-GetProject-Self-Registered",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6a891df3-4c95-4c38-97b6-58b619bf416f",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"var projectName = pm.environment.get(\"projectName\");",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Project Name is set correctly and matches: \" + projectName, function () {",
													"    pm.expect(jsonData.name).to.eql(projectName);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{registeredUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Project/{{projectId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Project",
												"{{projectId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Project-GetProject-Other-Registered",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "520f7c31-6f76-4e85-9eb1-a058ff880ac7",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{registeredUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Project/{{adminProjectId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Project",
												"{{adminProjectId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Project-UpdateProject-Self-Registered",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4e94841b-07c6-420d-a9e7-1bfa3258eb6b",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"var projectName = pm.environment.get(\"projectNameUpdated\");",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.ok;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Project Name is set correctly and matches: \" + projectName, function () {",
													"    pm.expect(jsonData.name).to.eql(projectName);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{registeredUserIdentityId}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"name\": \"{{projectNameUpdated}}\",\r\n  \"description\": \"postmantest_description\",\r\n  \"shortDescription\": \"postmantest_shortdesc\",\r\n  \"uri\": \"postmantest_uri\",\r\n  \"collaborators\": [\r\n    {\r\n      \"fullName\": \"postmantest_collfullname\",\r\n      \"role\": \"postmantest_collrole\"\r\n    }\r\n  ],\r\n  \"created\": \"2020-04-20T08:24:26.693Z\",\r\n  \"updated\": \"2020-04-20T08:24:26.693Z\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/Project/{{projectId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Project",
												"{{projectId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Project-UpdateProject-Other-Registered",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "0b95a438-3ee0-49e7-8d71-e87055463ad0",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"",
													"pm.test(\"Status code is 401\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"    pm.response.to.be.unauthorized;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{registeredUserIdentityId}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"name\": \"{{projectNameUpdated}}\",\r\n  \"description\": \"postmantest_description\",\r\n  \"shortDescription\": \"postmantest_shortdesc\",\r\n  \"uri\": \"postmantest_uri\",\r\n  \"collaborators\": [\r\n    {\r\n      \"fullName\": \"postmantest_collfullname\",\r\n      \"role\": \"postmantest_collrole\"\r\n    }\r\n  ],\r\n  \"created\": \"2020-04-20T08:24:26.693Z\",\r\n  \"updated\": \"2020-04-20T08:24:26.693Z\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/Project/{{adminProjectId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Project",
												"{{adminProjectId}}"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "FollowProject",
							"item": [
								{
									"name": "Project-FollowProject-Registered",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4d5f2d20-5e65-4f41-98bd-89f961389f4a",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"var projectId = pm.environment.get(\"projectIdToFollow\");",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.success;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});",
													"",
													"pm.test(\"Check if created Username matches: \" + projectId, function () {",
													"    pm.expect(jsonData.id).to.eql(projectId);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{administratorUserIdentityId}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/project/follow/{{projectIdToFollow}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"project",
												"follow",
												"{{projectIdToFollow}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Project-UnFollowProject-Registered",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "93debfb8-2f78-48d4-b7a4-04a2af516098",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{administratorUserIdentityId}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/project/follow/{{projectIdToFollow}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"project",
												"follow",
												"{{projectIdToFollow}}"
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "b3543f3a-dcff-4104-b7fa-a53495805876",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "c1f926a5-c259-47df-9c14-1c55d2cbc700",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Embed",
							"item": [
								{
									"name": "Embed-CreateEmbed-Self-Registered",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "01bb6ec4-454a-4f95-880b-32fc2a545630",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.environment.set(\"embedGuid\", jsonData.guid);",
													"pm.environment.set(\"embeddedProjectId\", jsonData.project.id);",
													"",
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.success;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{registeredUserIdentityId}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"projectId\": {{projectId}}\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/Embed",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Embed"
											]
										}
									},
									"response": []
								},
								{
									"name": "Embed-CreateEmbed-Other-Registered",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "441fb0e6-c471-48cf-bfe8-1f644ec7769a",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 401\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.unauthorized;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{registeredUserIdentityId}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"projectId\": {{adminProjectId}}\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/Embed",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Embed"
											]
										}
									},
									"response": []
								},
								{
									"name": "Embed-GetAllEmbeds-Registered",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "024542bc-3a04-4dea-b337-2fea13679c2f",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 403\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.forbidden;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{registeredUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Embed",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Embed"
											]
										}
									},
									"response": []
								},
								{
									"name": "Embed-GetEmbed-Registered",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f79b2c11-a35a-4aaa-b859-83d9108c8510",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"var embeddedProjectId = parseInt(pm.environment.get(\"embeddedProjectId\"))",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Embed matches: \" + embeddedProjectId, function () {",
													"    pm.expect(jsonData.id).to.eql(embeddedProjectId);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{registeredUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Embed/{{embedGuid}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Embed",
												"{{embedGuid}}"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Highlight",
							"item": [
								{
									"name": "Highlight-CreateHighlight-Registered",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a16d8955-af8c-47e4-adeb-a57227bc6734",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 403\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.forbidden;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "c726a6a4-22e2-4af9-a669-1d14aaf24327",
												"exec": [
													"var current_timestamp = new Date();\r",
													"postman.setEnvironmentVariable(\"current_timestamp\", current_timestamp.toISOString());\r",
													"\r",
													"var future_timestamp = new Date(Date.now() +(2 * 86400000));\r",
													"postman.setEnvironmentVariable(\"future_timestamp\", future_timestamp.toISOString());\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{registeredUserIdentityId}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"projectId\": {{projectId}},\r\n  \"startDate\": \"{{current_timestamp}}\",\r\n  \"endDate\": \"{{future_timestamp}}\",\r\n  \"description\" : \"Lorem Ipsum\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/Highlight",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Highlight"
											]
										}
									},
									"response": []
								},
								{
									"name": "Highlight-GetAllActiveHighlights-Registered",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "9261690c-98e6-4238-9de8-9910fe321a1b",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"var projectId = pm.environment.get(\"adminProjectId\");",
													"",
													"var jsonData = pm.response.json();",
													"",
													"var foundAt;",
													"",
													"function findItem(jsonData, item) {",
													"    for (var i = 0; i < jsonData.length; i++) {",
													"        if (jsonData[i].projectId == item) {",
													"            return i;",
													"        }",
													"    }",
													"    return -1;",
													"}",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Highlight is in list and matching: \" + projectId, function () {",
													"    foundAt = findItem(jsonData, projectId);",
													"    pm.expect(foundAt).to.not.eql(-1);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{registeredUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Highlight",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Highlight"
											]
										}
									},
									"response": []
								},
								{
									"name": "Highlight-GetHighlight-Registered",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "89248ad8-f08a-4bfc-a78f-63cd86a4ce19",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"var identityId = parseInt(pm.environment.get(\"identityId\"));",
													"var highlightId = parseInt(pm.environment.get(\"highlightId\"));",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.environment.set(\"highlightStartDate\", jsonData.startDate);",
													"pm.environment.set(\"highlightEndDate\", jsonData.endDate);",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Highlight Id matches: \" + highlightId, function () {",
													"    pm.expect(jsonData.id).to.eql(highlightId);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{registeredUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Highlight/{{highlightId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Highlight",
												"{{highlightId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Highlight-GetHighlight-ByProject-Registered",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "7f8b4375-ed11-4d0f-a694-5e966b296ba8",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 403\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"    pm.response.to.be.forbidden;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json;",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{registeredUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Highlight/Project/{{projectId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Highlight",
												"Project",
												"{{projectId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Highlight-UpdateHighlight-Registered",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "bdccd1ac-51a5-411c-9674-7b41c7abe935",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 403\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.forbidden;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "IdentityId",
												"value": "{{registeredUserIdentityId}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"projectId\": \"{{projectId}}\",\r\n  \"startDate\": \"{{current_timestamp}}\",\r\n  \"endDate\": \"{{highlightEndDate}}\",\r\n  \"description\" : \"Lorem Ipsum\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/Highlight/{{highlightId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Highlight",
												"{{highlightId}}"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Role",
							"item": [
								{
									"name": "Role-CreateRole-Registered",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "768416fb-d672-420c-8afa-8e0d63e44bc1",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 403\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.forbidden;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{registeredUserIdentityId}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"name\": \"{{roleName}}\",\r\n  \"scopes\": [\r\n    {\r\n      \"scope\": \"EmbedWrite\"\r\n    }\r\n  ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/Role",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Role"
											]
										}
									},
									"response": []
								},
								{
									"name": "Role-GetAllRoles-Registered",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "13e41012-3363-4e42-b40c-079383301e50",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 403\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.forbidden;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{registeredUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Role",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Role"
											]
										}
									},
									"response": []
								},
								{
									"name": "Scope-GetAllScopes-Registered",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ab5398b8-9222-4c0c-955f-ba3a5bb4320d",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 403\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.forbidden;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{registeredUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Role/Scopes",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Role",
												"Scopes"
											]
										}
									},
									"response": []
								},
								{
									"name": "Role-GetRole-Registered",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "359cf7a0-3e5e-4a03-8ee0-3c132f721d74",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 403\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.forbidden;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{registeredUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Role/{{roleId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Role",
												"{{roleId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Role-UpdateRole-Registered",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ed44dba8-c0ce-4a4c-81f9-74bdfdc1bdba",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 403\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.forbidden;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{registeredUserIdentityId}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"name\": \"{{updatedRoleName}}\",\r\n  \"scopes\": [\r\n    {\r\n      \"scope\": \"EmbedWrite\"\r\n    }\r\n  ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/Role/{{roleId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Role",
												"{{roleId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Role-SetRole-Registered",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e2ad842f-3861-4674-9545-7f9b6cb3465f",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 403\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.forbidden;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{registeredUserIdentityId}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"createdUserId\": {{createdUserId}},\r\n  \"name\": \"{{projectNameUpdated}}\",\r\n  \"description\": \"postmantest_description\",\r\n  \"shortDescription\": \"postmantest_shortdesc\",\r\n  \"uri\": \"postmantest_uri\",\r\n  \"collaborators\": [\r\n    {\r\n      \"fullName\": \"postmantest_collfullname\",\r\n      \"role\": \"postmantest_collrole\"\r\n    }\r\n  ],\r\n  \"created\": \"2020-04-20T08:24:26.693Z\",\r\n  \"updated\": \"2020-04-20T08:24:26.693Z\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/Role/setRole?createdUserId={{createdUserId}}&roleId={{roleId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Role",
												"setRole"
											],
											"query": [
												{
													"key": "createdUserId",
													"value": "{{createdUserId}}",
													"description": "Id of the user that we want to update"
												},
												{
													"key": "roleId",
													"value": "{{roleId}}",
													"description": "Id of the role that you want to update the user with"
												}
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Search",
							"item": [
								{
									"name": "Search-SearchInternal-Registered",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4d99ad8d-893d-4c50-b738-16c8e743fce9",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.ok;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{administratorUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Search/internal/{{projectName}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Search",
												"internal",
												"{{projectName}}"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Wizard",
							"item": [
								{
									"name": "Wizard-GetWizard-Registered",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e9bacc49-b55a-455c-b62e-322bf4f2520f",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\")) + 1000;",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{registeredUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Wizard?sourceURI={{wizardSourceUri}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Wizard"
											],
											"query": [
												{
													"key": "sourceURI",
													"value": "{{wizardSourceUri}}",
													"description": "This is the URI that the wizard will use to fetch the source."
												}
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Institution",
							"item": [
								{
									"name": "Institution-CreateInstitution-Registered",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "9776c12b-a571-4fdc-adef-e75c8fa0fcad",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 401\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.unauthorized;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"identityId\": \"98764342123\",\n    \"name\": \"mycooltestusername\",\n    \"email\": \"postmantest_email@example.com\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/User",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"User"
											]
										}
									},
									"response": []
								},
								{
									"name": "Institution-GetInstitution-Registered",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b53b6f91-2c95-4cec-a837-19564de774f9",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 401\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.unauthorized;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{apiUrl}}/api/User/1",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"User",
												"1"
											]
										}
									},
									"response": []
								},
								{
									"name": "Institution-UpdateInstitution-Registered",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d2ecd658-fb11-45eb-83a0-2b334a67d025",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 401\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.unauthorized;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"name\": \"bobz\",\r\n  \"email\": \"BobSmith@email.com\",\r\n  \"identityId\": {{administratorUserIdentityId}}\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/User/1",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"User",
												"1"
											]
										}
									},
									"response": []
								},
								{
									"name": "Instituiton-DeleteInstitution-Registered",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "66cdb902-afa2-478e-8db0-095ebaecc35b",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 401\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.unauthorized;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{apiUrl}}/api/User/1",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"User",
												"1"
											]
										}
									},
									"response": []
								}
							],
							"auth": {
								"type": "noauth"
							},
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "d152ebbf-40f0-4b92-a87d-e592d3ff118d",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "8b1a93a7-327b-4be6-ac28-381c8f82f5b0",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "ProjectIcon",
							"item": [
								{
									"name": "ProjectIcon-Post-File-Registered",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "7cbcbe30-48de-4c4a-8aad-ddb3149ea999",
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Response time is less than 800ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(800);\r",
													"});\r",
													"\r",
													"pm.test(\"Response includes fileId\", function () {\r",
													"    pm.expect(jsonData.id).to.exist;\r",
													"})\r",
													"\r",
													"pm.environment.set(\"ProjectIconRegisteredFileId\", jsonData.id);\r",
													"\r",
													"pm.test(\"Response must be valid and have a json body\", function () {\r",
													"     pm.response.to.be.success;\r",
													"     pm.response.to.be.withBody;\r",
													"     pm.response.to.be.json;\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "IdentityId",
												"value": "{{registeredUserIdentityId}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "File",
													"type": "file",
													"src": "Postman/testimage.png"
												}
											]
										},
										"url": {
											"raw": "{{apiUrl}}/api/File",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"File"
											]
										}
									},
									"response": []
								},
								{
									"name": "ProjectIcon-CreateProject-Registered",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b4ffd4c9-a43f-40a1-9585-a28d607521bc",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"var registeredUserId = pm.environment.get(\"registeredUserId\");",
													"var projectName = pm.environment.get(\"projectName\");",
													"",
													"var jsonData = pm.response.json();",
													"pm.environment.set(\"ProjectIconProjectId\", jsonData.id);",
													"",
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});",
													"",
													"pm.test(\"Project Name is set correctly and matches: \" + projectName, function () {",
													"    pm.expect(jsonData.name).to.eql(projectName);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{registeredUserIdentityId}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"name\": \"{{projectName}}\",\r\n  \"description\": \"postmantest_description\",\r\n  \"shortDescription\": \"postmantest_shortdesc\",\r\n  \"uri\": \"postmantest_uri\",\r\n  \"collaborators\": [\r\n    {\r\n      \"fullName\": \"postmantest_collfullname\",\r\n      \"role\": \"postmantest_collrole\"\r\n    }\r\n  ],\r\n  \"fileId\": {{ProjectIconRegisteredFileId}},\r\n  \"created\": \"2020-04-20T08:24:26.693Z\",\r\n  \"updated\": \"2020-04-20T08:24:26.693Z\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/Project",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Project"
											]
										}
									},
									"response": []
								},
								{
									"name": "ProjectIcon-GetProject-Registered",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2e9a4614-d0e3-4873-aecc-cfc7133490ac",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"var projectName = pm.environment.get(\"projectName\");",
													"var ProjectIconRegisteredFileId = pm.environment.get(\"ProjectIconRegisteredFileId\");",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Project Name is set correctly and matches: \" + projectName, function () {",
													"    pm.expect(jsonData.name).to.eql(projectName);",
													"});",
													"",
													"pm.test(\"ProjectIconId is set correctly and matches: \" + ProjectIconRegisteredFileId, function () {",
													"    pm.expect(jsonData.projectIcon.id).to.eql(ProjectIconRegisteredFileId)",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{registeredUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Project/{{ProjectIconProjectId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Project",
												"{{ProjectIconProjectId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "ProjectIcon-GetIcon-Registered",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c06b59ba-e53f-4c7b-9aa7-5be9d7af8925",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));\r",
													"\r",
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);\r",
													"});\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Response must be valid and have a json body\", function () {\r",
													"    pm.response.to.be.withBody;\r",
													"    pm.response.to.be.json;\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{registeredUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/file/{{ProjectIconRegisteredFileId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"file",
												"{{ProjectIconRegisteredFileId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "ProjectIcon-Post-New-File-Registered",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "598ec27b-117a-46cc-abb9-c456bedd3417",
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Response time is less than 800ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(800);\r",
													"});\r",
													"\r",
													"pm.test(\"Response includes fileId\", function () {\r",
													"    pm.expect(jsonData.id).to.exist;\r",
													"})\r",
													"\r",
													"pm.environment.set(\"newRegisteredFileId\", jsonData.id);\r",
													"\r",
													"pm.test(\"Response must be valid and have a json body\", function () {\r",
													"     pm.response.to.be.success;\r",
													"     pm.response.to.be.withBody;\r",
													"     pm.response.to.be.json;\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{registeredUserIdentityId}}"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "File",
													"type": "file",
													"src": "Postman/testimage2.png"
												}
											]
										},
										"url": {
											"raw": "{{apiUrl}}/api/File",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"File"
											]
										}
									},
									"response": []
								},
								{
									"name": "ProjectIcon-UpdateProject-Registered",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "bf3aab7c-3bf0-4a4d-8986-fa4db7b5d7a5",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"var projectName = pm.environment.get(\"projectNameUpdated\");",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.ok;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Project Name is set correctly and matches: \" + projectName, function () {",
													"    pm.expect(jsonData.name).to.eql(projectName);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{registeredUserIdentityId}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"name\": \"postmantest_projectname_updated\",\r\n  \"description\": \"postmantest_description\",\r\n  \"shortDescription\": \"postmantest_shortdesc\",\r\n  \"uri\": \"postmantest_uri\",\r\n  \"collaborators\": [\r\n    {\r\n      \"fullName\": \"postmantest_collfullname\",\r\n      \"role\": \"postmantest_collrole\"\r\n    }\r\n  ],\r\n  \"fileId\": {{newRegisteredFileId}},\r\n  \"created\": \"2020-04-20T08:24:26.693Z\",\r\n  \"updated\": \"2020-04-20T08:24:26.693Z\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/Project/{{ProjectIconProjectId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Project",
												"{{ProjectIconProjectId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "ProjectIcon-GetUpdatedProject-Registered",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ef22c78c-d214-42d6-a7d6-ce5ab0fab197",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"var projectName = pm.environment.get(\"projectName\");",
													"var newRegisteredFileId = pm.environment.get(\"newRegisteredFileId\");",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Project Name is set correctly and matches: \" + projectName, function () {",
													"    pm.expect(jsonData.name).to.eql(projectName);",
													"});",
													"",
													"pm.test(\"ProjectIconId is set correctly and matches: \" + newRegisteredFileId, function () {",
													"    pm.expect(jsonData.projectIcon.id).to.eql(newRegisteredFileId)",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{registeredUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Project/{{ProjectIconProjectId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Project",
												"{{ProjectIconProjectId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "ProjectIcon-GetDeletedIcon-Registered",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c275bf72-84a6-45b0-82c5-687bbb4bbd26",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));\r",
													"\r",
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);\r",
													"});\r",
													"\r",
													"pm.test(\"Status code is 404\", function () {\r",
													"    pm.response.to.have.status(404);\r",
													"});\r",
													"\r",
													"pm.test(\"Response must be valid and have a json body\", function () {\r",
													"    pm.response.to.be.withBody;\r",
													"    pm.response.to.be.json;\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{registeredUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/file/{{ProjectIconRegisteredFileId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"file",
												"{{ProjectIconRegisteredFileId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "ProjectIcon-GetNewIcon-Registered",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6b88c952-b559-45c8-a3b1-984514b4ee96",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));\r",
													"\r",
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);\r",
													"});\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Response must be valid and have a json body\", function () {\r",
													"    pm.response.to.be.withBody;\r",
													"    pm.response.to.be.json;\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{registeredUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/file/{{newRegisteredFileId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"file",
												"{{newRegisteredFileId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "ProjectIcon-DeleteProject-Registered",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c9503487-8f39-46f5-9cd1-87105b3099a0",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{registeredUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Project/{{ProjectIconProjectId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Project",
												"{{ProjectIconProjectId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "ProjectIcon-GetNewIcon-Registered Copy",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a0a19f12-46f4-4f2e-b518-d3182e255498",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));\r",
													"\r",
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);\r",
													"});\r",
													"\r",
													"pm.test(\"Status code is 404\", function () {\r",
													"    pm.response.to.have.status(404);\r",
													"});\r",
													"\r",
													"pm.test(\"Response must be valid and have a json body\", function () {\r",
													"    pm.response.to.be.withBody;\r",
													"    pm.response.to.be.json;\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{registeredUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/file/{{ProjectIconRegisteredFileId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"file",
												"{{ProjectIconRegisteredFileId}}"
											]
										}
									},
									"response": []
								}
							],
							"description": "Testing if the icons are accessible, and get deleted when they are supposed to ",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "b6905ffa-b67d-4ae9-a17d-46add4b2d566",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "fd4ff5b5-c66d-4e4f-b022-985572ea370e",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Cleanup",
							"item": [
								{
									"name": "Embed-DeleteEmbed-Self-Registered",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "cd2d4ec2-1028-4a4e-9c38-3c46b2d8fe24",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.ok;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{registeredUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Embed/{{embedGuid}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Embed",
												"{{embedGuid}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Embed-DeleteEmbed-Other-Registered",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "8054f064-9f14-4bf7-b4b0-1073ef1c5bd7",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"",
													"pm.test(\"Status code is 401\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.unauthorized;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{registeredUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Embed/{{adminEmbedGuid}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Embed",
												"{{adminEmbedGuid}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Highlight-DeleteHighlight-Other-Registered",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "47fd8095-9824-496c-ba3e-36abf8763d49",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"",
													"pm.test(\"Status code is 403\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.forbidden;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{registeredUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Highlight/{{highlightId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Highlight",
												"{{highlightId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Project-DeleteProject-Self-Registered",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b75c77cd-d2bd-427f-a6d8-f388dae79a9e",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{registeredUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Project/{{projectId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Project",
												"{{projectId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Project-DeleteProject-Other-Registered",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "989ce9f9-83e6-49d3-970f-40de925c305a",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"",
													"pm.test(\"Status code is 401\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.unauthorized;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{registeredUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Project/1",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Project",
												"1"
											]
										}
									},
									"response": []
								},
								{
									"name": "Role-DeleteRole-Registered",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f90050ed-f5e2-486b-a63b-3bda6f9b4659",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"",
													"pm.test(\"Status code is 403\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.forbidden;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{registeredUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Role/{{roleId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Role",
												"{{roleId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "User-DeleteUser-Other-Registered",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "1d597981-2c79-4900-801c-6abfd54a5eab",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"",
													"pm.test(\"Status code is 401\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.unauthorized;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{registeredUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/User/{{createdUserId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"User",
												"{{createdUserId}}"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "File",
							"item": [
								{
									"name": "Get-Files-Registered",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "69125cf3-792e-4a0b-a063-8217d0bf01eb",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));\r",
													"\r",
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);\r",
													"});\r",
													"\r",
													"pm.test(\"Response must be valid and have a json body\", function () {\r",
													"    pm.response.to.be.withBody;\r",
													"    pm.response.to.be.json;\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"value": "{{registeredUserIdentityId}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/File",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"File"
											]
										}
									},
									"response": []
								},
								{
									"name": "Post-File-Registered",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "197f6f56-e495-40da-b7ec-a5bbed378542",
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.environment.set(\"registeredFileId\", jsonData.id)\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Response time is less than 800ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(800);\r",
													"});\r",
													"\r",
													"pm.test(\"Response must be valid and have a json body\", function () {\r",
													"     pm.response.to.be.success;\r",
													"     pm.response.to.be.withBody;\r",
													"     pm.response.to.be.json;\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "IdentityId",
												"value": "{{registeredUserIdentityId}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "File",
													"type": "file",
													"src": "Postman/testimage.png"
												}
											]
										},
										"url": {
											"raw": "{{apiUrl}}/api/File",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"File"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete-File-Registered",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "55f2cd20-e7da-48c5-babf-8647bef540b0",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);\r",
													"});\r",
													"\r",
													"pm.test(\"Response must be valid\", function () {\r",
													"     pm.response.to.be.ok;\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "IdentityId",
												"value": "{{registeredUserIdentityId}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/File/{{registeredFileId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"File",
												"{{registeredFileId}}"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Data Officer",
					"item": [
						{
							"name": "Preparation",
							"item": [
								{
									"name": "Institution-CreateInstitution",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "73eb2f08-c0b6-45a4-ba1f-bd2f1c65f3c4",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"var institutionName = pm.environment.get(\"institutionName\");",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.environment.set(\"createdInstitutionId\", jsonData.id);",
													"",
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.success;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});",
													"",
													"pm.test(\"Check if created Name matches: \" + institutionName, function () {",
													"    pm.expect(jsonData.name).to.eql(institutionName);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{administratorUserIdentityId}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"{{institutionName}}\",\n    \"description\": \"postmantest_initial_description\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/Institution",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Institution"
											]
										}
									},
									"response": []
								},
								{
									"name": "User-CreateUserWithoutInstitution",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ea61132b-0238-4b23-b59b-8019a74cd74e",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"var userName = pm.environment.get(\"userName\");",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.environment.set(\"createdUserId\", jsonData.id);",
													"pm.environment.set(\"identityId\", jsonData.id);",
													"",
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.success;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});",
													"",
													"pm.test(\"Check if created Username matches: \" + userName, function () {",
													"    pm.expect(jsonData.name).to.eql(userName);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{administratorUserIdentityId}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"identityId\": \"9996\",\n    \"name\": \"{{userName}}\",\n    \"email\": \"postmantest_email@example.com\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/User",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"User"
											]
										}
									},
									"response": []
								},
								{
									"name": "User-CreateUserWithInstitution",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "9a3d8082-ac8e-4c49-84b5-066d03aded66",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"var userName = pm.environment.get(\"userName\");",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.environment.set(\"createdUserWithInstitutionId\", jsonData.id);",
													"",
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.success;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});",
													"",
													"pm.test(\"Check if created Username matches: \" + userName, function () {",
													"    pm.expect(jsonData.name).to.eql(userName);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{administratorUserIdentityId}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"identityId\": \"9996\",\n    \"name\": \"{{userName}}\",\n    \"email\": \"postmantest_email@example.com\",\n    \"institutionId\": {{institutionIdFromUser}}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/User",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"User"
											]
										}
									},
									"response": []
								},
								{
									"name": "Project-CreateProject-DifferentInstitution",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "9560c627-9c17-4411-8f59-bdeec0198167",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"var administratorUserId = parseInt(pm.environment.get(\"administratorUserId\"));",
													"var projectName = pm.environment.get(\"projectName\");",
													"var adminUserName = pm.environment.get(\"adminUserName\");",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.environment.set(\"projectId\", jsonData.id);",
													"pm.environment.set(\"adminProjectId\", jsonData.id);",
													"",
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.success;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});",
													"",
													"pm.test(\"Project Name is set correctly and matching: \" + projectName, function () {",
													"    pm.expect(jsonData.name).to.eql(projectName);",
													"});",
													"",
													"pm.test(\"User Name is correct and matching: \" + adminUserName, function () {",
													"    pm.expect(jsonData.user.name).to.eql(adminUserName);",
													"});",
													"",
													"pm.test(\"Identity ID is correct and matching: \" + administratorUserId, function () {",
													"    pm.expect(parseInt(jsonData.user.id)).to.eql(administratorUserId);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{administratorUserIdentityId}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"name\": \"{{projectName}}\",\r\n  \"description\": \"postmantest_description\",\r\n  \"shortDescription\": \"postmantest_shortdesc\",\r\n  \"uri\": \"postmantest_uri\",\r\n  \"collaborators\": [\r\n    {\r\n      \"fullName\": \"postmantest_collfullname\",\r\n      \"role\": \"postmantest_collrole\"\r\n    }\r\n  ],\r\n  \"created\": \"2020-04-20T08:24:26.693Z\",\r\n  \"updated\": \"2020-04-20T08:24:26.693Z\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/Project",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Project"
											]
										}
									},
									"response": []
								},
								{
									"name": "Project-CreateProject-SameInstitution",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "8c06b0d1-0d65-4dc0-827b-10c078921434",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.environment.set(\"projectIdWithInstitution\", jsonData.id);",
													"",
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.success;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "\"9996\""
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"name\": \"{{projectName}}\",\r\n  \"description\": \"postmantest_description\",\r\n  \"shortDescription\": \"postmantest_shortdesc\",\r\n  \"uri\": \"postmantest_uri\",\r\n  \"collaborators\": [\r\n    {\r\n      \"fullName\": \"postmantest_collfullname\",\r\n      \"role\": \"postmantest_collrole\"\r\n    }\r\n  ],\r\n  \"created\": \"2020-04-20T08:24:26.693Z\",\r\n  \"updated\": \"2020-04-20T08:24:26.693Z\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/Project",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Project"
											]
										}
									},
									"response": []
								},
								{
									"name": "Highlight-CreateHighlight",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "cd775fab-a918-4a6f-859e-2e72f17bcb77",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"var identityId = parseInt(pm.environment.get(\"identityId\"));",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.environment.set(\"highlightId\", jsonData.id);",
													"",
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.success;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "cb7eaf83-6433-4c52-8bc4-7532385314db",
												"exec": [
													"var current_timestamp = new Date();\r",
													"postman.setEnvironmentVariable(\"current_timestamp\", current_timestamp.toISOString());\r",
													"\r",
													"var future_timestamp = new Date(Date.now() +(2 * 86400000));\r",
													"postman.setEnvironmentVariable(\"future_timestamp\", future_timestamp.toISOString());\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{administratorUserIdentityId}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"projectId\": {{projectId}},\r\n  \"startDate\": \"{{current_timestamp}}\",\r\n  \"endDate\": \"{{future_timestamp}}\",\r\n  \"description\" : \"Lorem Ipsum\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/Highlight",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Highlight"
											]
										}
									},
									"response": []
								},
								{
									"name": "Embed-CreateEmbed-DifferentInstitution",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e84e035a-8530-478a-b7b5-a75adf459215",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.environment.set(\"embedGuid\", jsonData.guid);",
													"pm.environment.set(\"adminEmbedGuid\", jsonData.guid);",
													"pm.environment.set(\"embeddedProjectId\", jsonData.project.id);",
													"",
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.success;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{administratorUserIdentityId}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"projectId\": {{projectId}}\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/Embed",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Embed"
											]
										}
									},
									"response": []
								},
								{
									"name": "Embed-CreateEmbed-SameInstitution",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "fd70e169-6bba-4882-98e7-f8671adaa2a3",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.environment.set(\"embedGuidWithInstitution\", jsonData.guid);",
													"",
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.success;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "\"9996\""
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"projectId\": {{projectIdWithInstitution}}\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/Embed",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Embed"
											]
										}
									},
									"response": []
								},
								{
									"name": "Role-CreateRole",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e73e4925-951b-4d63-b77e-54d5ccb9e64e",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"var scopeName = pm.environment.get(\"scopeName\");",
													"var roleName = pm.environment.get(\"roleName\");",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.environment.set(\"roleId\", jsonData.id);",
													"",
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.success;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});",
													"",
													"pm.test(\"Role Name is set correctly and matching: \" + roleName, function () {",
													"    pm.expect(jsonData.name).to.eql(roleName);",
													"});",
													"",
													"pm.test(\"Scope is correct and matching: \" + scopeName, function () {",
													"    pm.expect(jsonData.scopes.scope).to.eql(scopeName);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{administratorUserIdentityId}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"name\": \"{{roleName}}\",\r\n  \"scopes\": [\r\n    {\r\n      \"scope\": \"EmbedWrite\"\r\n    }\r\n  ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/Role",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Role"
											]
										}
									},
									"response": []
								}
							],
							"description": "For some requests, we need to have data available. The variables need to be filled so the request can succeed. We put these preparation requests in this folder. We will clean them up in the cleanup folder.",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "00075fac-7f3a-40ff-9944-caf75faf4e89",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "c3534edf-5d66-4a1c-98f6-84f0a2e4a806",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "User",
							"item": [
								{
									"name": "User-CreateUser-DataOfficer",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b10a8a68-bb12-4dd2-96df-60b585d78697",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 403\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.forbidden;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{dataOfficerUserIdentityId}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"identityId\": \"{{createdUserId}}\",\n    \"name\": \"{{userName}}\",\n    \"email\": \"postmantest_email@example.com\",\n    \"institutionId\": {{createdInstitutionId}}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/User",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"User"
											]
										}
									},
									"response": []
								},
								{
									"name": "User-GetUser-Other-DifferentInstitution-DataOfficer",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "76e70ab3-0145-46a3-8102-a5c2bd0e75c8",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 403\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.forbidden;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{dataOfficerUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/User/{{createdUserId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"User",
												"{{createdUserId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "User-GetUser-Other-SameInstitution-DataOfficer",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "195cdbca-44c3-4d85-9117-6840b91ec339",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.ok;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{dataOfficerUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/User/{{createdUserWithInstitutionId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"User",
												"{{createdUserWithInstitutionId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "User-GetUser-Self-DataOfficer",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "70e1b761-8d58-4288-987a-e8af5caa7412",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"var aliceIdentityId = parseInt(pm.environment.get(\"dataOfficerUserIdentityId\"));",
													"",
													"var jsonData = pm.response.json();",
													"pm.environment.set(\"dataOfficerUserId\", jsonData.id);",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.ok;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});",
													"",
													"pm.test(\"Identity ID is correct and matching: \" + aliceIdentityId, function () {",
													"    pm.expect(parseInt(jsonData.identityId)).to.eql(aliceIdentityId);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{dataOfficerUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/User",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"User"
											]
										}
									},
									"response": []
								},
								{
									"name": "User-UpdateUser-Self-DataOfficer",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c06a6fc9-940b-4370-b791-a4734e7eb736",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"var updatedAliceEmail = pm.environment.get(\"updatedAliceEmail\");",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.ok;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Check if email update matches: \" + updatedAliceEmail, function () {",
													"    pm.expect(jsonData.email).to.eql(updatedAliceEmail);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{dataOfficerUserIdentityId}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"name\": \"alicez\",\r\n  \"email\": \"{{updatedAliceEmail}}\",\r\n  \"identityId\": \"{{dataOfficerUserIdentityId}}\",\r\n  \"institutionId\": 1\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/User/{{dataOfficerUserId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"User",
												"{{dataOfficerUserId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "User-UpdateUser-Other-DataOfficer",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d3b3d8c6-86a8-41ea-822a-3790fa008f9a",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 401\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.unauthorized;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{dataOfficerUserIdentityId}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"name\": \"bobz\",\r\n  \"email\": \"BobSmith@email.com\",\r\n  \"identityId\": {{administratorUserIdentityId}}\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/User/{{createdUserId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"User",
												"{{createdUserId}}"
											]
										}
									},
									"response": []
								}
							],
							"description": "Requests executed as the Alice user with the registered role.",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "812af64f-1e0b-4fbe-a49f-8395dca7ebad",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "d4639f39-1148-4015-8045-325c7a2929ed",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Project",
							"item": [
								{
									"name": "Project-CreateProject-DataOfficer",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "79b92ac5-1869-435a-a0d8-fe8ee96386a4",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"var registeredUserId = pm.environment.get(\"dataOfficerUserId\");",
													"var projectName = pm.environment.get(\"projectName\");",
													"",
													"var jsonData = pm.response.json();",
													"pm.environment.set(\"projectId\", jsonData.id);",
													"",
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});",
													"",
													"pm.test(\"Project Name is set correctly and matches: \" + projectName, function () {",
													"    pm.expect(jsonData.name).to.eql(projectName);",
													"});",
													"",
													"pm.test(\"Identity Id is set correctly and matches: \" + registeredUserId, function () {",
													"    pm.expect(jsonData.user.id).to.eql(registeredUserId);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{dataOfficerUserIdentityId}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"name\": \"{{projectName}}\",\r\n  \"description\": \"postmantest_description\",\r\n  \"shortDescription\": \"postmantest_shortdesc\",\r\n  \"uri\": \"postmantest_uri\",\r\n  \"collaborators\": [\r\n    {\r\n      \"fullName\": \"postmantest_collfullname\",\r\n      \"role\": \"postmantest_collrole\"\r\n    }\r\n  ],\r\n  \"created\": \"2020-04-20T08:24:26.693Z\",\r\n  \"updated\": \"2020-04-20T08:24:26.693Z\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/Project",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Project"
											]
										}
									},
									"response": []
								},
								{
									"name": "Project-GetAllProjects-DataOfficer",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4a8e67db-f2f7-4080-96f3-74188b03f5f7",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"var projectName = pm.environment.get(\"projectName\");",
													"",
													"var jsonData = pm.response.json();",
													"",
													"var foundAt;",
													"",
													"function findProject(jsonData, name) {",
													"    for (var i = 0; i < jsonData.results.length; i++) {",
													"        if (jsonData.results[i].name == name) {",
													"            return i;",
													"        }",
													"    }",
													"    return -1;",
													"}",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Project: \" + projectName + \" is in list\", function () {",
													"    foundAt = findProject(jsonData, projectName);",
													"    pm.expect(foundAt).to.not.eql(-1);",
													"});",
													"",
													"pm.test(\"Project Name is set correctly and matching: \" + projectName, function () {",
													"    pm.expect(jsonData.results[foundAt].name).to.eql(projectName);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{dataOfficerUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Project",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Project"
											]
										}
									},
									"response": []
								},
								{
									"name": "Project-GetProject-Self-DataOfficer",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "db6087ee-768f-4685-a32c-604dddee74ca",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"var projectName = pm.environment.get(\"projectName\");",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Project Name is set correctly and matches: \" + projectName, function () {",
													"    pm.expect(jsonData.name).to.eql(projectName);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{dataOfficerUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Project/{{projectId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Project",
												"{{projectId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Project-GetProject-Other-DataOfficer",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ae441c1f-48aa-4b6b-ab33-fa1ec0e08234",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{dataOfficerUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Project/{{adminProjectId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Project",
												"{{adminProjectId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Project-UpdateProject-Self-DataOfficer",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "02a4c010-fd8d-43f1-a953-58ee57c432b7",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"var projectName = pm.environment.get(\"projectNameUpdated\");",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.ok;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Project Name is set correctly and matches: \" + projectName, function () {",
													"    pm.expect(jsonData.name).to.eql(projectName);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{dataOfficerUserIdentityId}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"name\": \"{{projectNameUpdated}}\",\r\n  \"description\": \"postmantest_description\",\r\n  \"shortDescription\": \"postmantest_shortdesc\",\r\n  \"uri\": \"postmantest_uri\",\r\n  \"collaborators\": [\r\n    {\r\n      \"fullName\": \"postmantest_collfullname\",\r\n      \"role\": \"postmantest_collrole\"\r\n    }\r\n  ],\r\n  \"created\": \"2020-04-20T08:24:26.693Z\",\r\n  \"updated\": \"2020-04-20T08:24:26.693Z\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/Project/{{projectId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Project",
												"{{projectId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Project-UpdateProject-Other-DataOfficer",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b5957f30-b64c-4df6-b693-0dd5580ff0b9",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"",
													"pm.test(\"Status code is 401\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"    pm.response.to.be.unauthorized;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{dataOfficerUserIdentityId}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"name\": \"{{projectNameUpdated}}\",\r\n  \"description\": \"postmantest_description\",\r\n  \"shortDescription\": \"postmantest_shortdesc\",\r\n  \"uri\": \"postmantest_uri\",\r\n  \"collaborators\": [\r\n    {\r\n      \"fullName\": \"postmantest_collfullname\",\r\n      \"role\": \"postmantest_collrole\"\r\n    }\r\n  ],\r\n  \"created\": \"2020-04-20T08:24:26.693Z\",\r\n  \"updated\": \"2020-04-20T08:24:26.693Z\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/Project/{{adminProjectId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Project",
												"{{adminProjectId}}"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Embed",
							"item": [
								{
									"name": "Embed-CreateEmbed-Self-DataOfficer",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d079e9fd-4eaa-455a-b178-1e1e4da6a2ec",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.environment.set(\"embedGuid\", jsonData.guid);",
													"pm.environment.set(\"embeddedProjectId\", jsonData.project.id);",
													"",
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.success;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{dataOfficerUserIdentityId}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"projectId\": {{projectId}}\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/Embed",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Embed"
											]
										}
									},
									"response": []
								},
								{
									"name": "Embed-CreateEmbed-Other-DataOfficer",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3bb1fe53-f19e-4278-aea3-72d0ec2e367d",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 401\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.unauthorized;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{dataOfficerUserIdentityId}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"projectId\": {{adminProjectId}}\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/Embed",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Embed"
											]
										}
									},
									"response": []
								},
								{
									"name": "Embed-GetAllEmbeds-DataOfficer",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "11f02532-b904-482c-ae0e-6a48eda6eee0",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 403\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.forbidden;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{dataOfficerUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Embed",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Embed"
											]
										}
									},
									"response": []
								},
								{
									"name": "Embed-GetEmbed-DataOfficer",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ae9efe59-9ddf-483f-85ea-77ec62ee95b0",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"var embeddedProjectId = parseInt(pm.environment.get(\"embeddedProjectId\"))",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Embed matches: \" + embeddedProjectId, function () {",
													"    pm.expect(jsonData.id).to.eql(embeddedProjectId);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{dataOfficerUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Embed/{{embedGuid}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Embed",
												"{{embedGuid}}"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Highlight",
							"item": [
								{
									"name": "Highlight-CreateHighlight-DataOfficer",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4a91433a-5c39-48c5-86fb-2a3551494161",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 403\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.forbidden;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "1c1102d0-ee16-405a-8067-1ce9ce32d968",
												"exec": [
													"var current_timestamp = new Date();\r",
													"postman.setEnvironmentVariable(\"current_timestamp\", current_timestamp.toISOString());\r",
													"\r",
													"var future_timestamp = new Date(Date.now() +(2 * 86400000));\r",
													"postman.setEnvironmentVariable(\"future_timestamp\", future_timestamp.toISOString());\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{dataOfficerUserIdentityId}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"projectId\": {{projectId}},\r\n  \"startDate\": \"{{current_timestamp}}\",\r\n  \"endDate\": \"{{future_timestamp}}\",\r\n  \"description\" : \"Lorem Ipsum\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/Highlight",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Highlight"
											]
										}
									},
									"response": []
								},
								{
									"name": "Highlight-GetAllActiveHighlights-DataOfficer",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "9bcba8c7-60ed-4ec2-a006-70e0f7ddbbe8",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"var projectId = pm.environment.get(\"adminProjectId\");",
													"",
													"var jsonData = pm.response.json();",
													"",
													"var foundAt;",
													"",
													"function findItem(jsonData, item) {",
													"    for (var i = 0; i < jsonData.length; i++) {",
													"        if (jsonData[i].projectId == item) {",
													"            return i;",
													"        }",
													"    }",
													"    return -1;",
													"}",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Highlight is in list and matching: \" + projectId, function () {",
													"    foundAt = findItem(jsonData, projectId);",
													"    pm.expect(foundAt).to.not.eql(-1);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{dataOfficerUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Highlight",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Highlight"
											]
										}
									},
									"response": []
								},
								{
									"name": "Highlight-GetHighlight-DataOfficer",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "659d0c22-fd1d-459c-aebe-5e24db010350",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"var identityId = parseInt(pm.environment.get(\"identityId\"));",
													"var highlightId = parseInt(pm.environment.get(\"highlightId\"));",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.environment.set(\"highlightStartDate\", jsonData.startDate);",
													"pm.environment.set(\"highlightEndDate\", jsonData.endDate);",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Highlight Id matches: \" + highlightId, function () {",
													"    pm.expect(jsonData.id).to.eql(highlightId);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{dataOfficerUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Highlight/{{highlightId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Highlight",
												"{{highlightId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Highlight-GetHighlight-ByProject-DataOfficer",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c87a4758-41ff-4484-bcb9-a26ba4154c53",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 403\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"    pm.response.to.be.forbidden;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json;",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{dataOfficerUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Highlight/Project/{{projectId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Highlight",
												"Project",
												"{{projectId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Highlight-UpdateHighlight-DataOfficer",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "13383869-3573-4aaa-ba76-0828b266e856",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 403\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.forbidden;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "IdentityId",
												"value": "{{dataOfficerUserIdentityId}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"projectId\": \"{{projectId}}\",\r\n  \"startDate\": \"{{current_timestamp}}\",\r\n  \"endDate\": \"{{highlightEndDate}}\",\r\n  \"description\" : \"Lorem Ipsum\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/Highlight/{{highlightId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Highlight",
												"{{highlightId}}"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Role",
							"item": [
								{
									"name": "Role-CreateRole-DataOfficer",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "74707ed4-49c1-4eae-9b9a-a08dbcbb4c12",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 403\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.forbidden;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{dataOfficerUserIdentityId}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"name\": \"{{roleName}}\",\r\n  \"scopes\": [\r\n    {\r\n      \"scope\": \"EmbedWrite\"\r\n    }\r\n  ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/Role",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Role"
											]
										}
									},
									"response": []
								},
								{
									"name": "Role-GetAllRoles-DataOfficer",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3d50e542-2ebd-4536-baf4-1ade448943f9",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 403\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.forbidden;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{dataOfficerUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Role",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Role"
											]
										}
									},
									"response": []
								},
								{
									"name": "Scope-GetAllScopes-DataOfficer",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "0a826e89-5f38-4a4a-a92f-f7f4f9e53b58",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 403\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.forbidden;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{dataOfficerUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Role/Scopes",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Role",
												"Scopes"
											]
										}
									},
									"response": []
								},
								{
									"name": "Role-GetRole-DataOfficer",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a2e7b4ab-339c-4cc4-97ec-c1e98a96882a",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 403\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.forbidden;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{dataOfficerUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Role/{{roleId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Role",
												"{{roleId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Role-UpdateRole-DataOfficer",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "63a66bce-dd24-469b-b279-a3a88c0e46ed",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 403\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.forbidden;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{dataOfficerUserIdentityId}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"name\": \"{{updatedRoleName}}\",\r\n  \"scopes\": [\r\n    {\r\n      \"scope\": \"EmbedWrite\"\r\n    }\r\n  ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/Role/{{roleId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Role",
												"{{roleId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Role-SetRole-DataOfficer",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3c8526d1-d9f3-474f-bbaa-32169fadc577",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 403\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.forbidden;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{dataOfficerUserIdentityId}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"createdUserId\": {{createdUserId}},\r\n  \"name\": \"{{projectNameUpdated}}\",\r\n  \"description\": \"postmantest_description\",\r\n  \"shortDescription\": \"postmantest_shortdesc\",\r\n  \"uri\": \"postmantest_uri\",\r\n  \"collaborators\": [\r\n    {\r\n      \"fullName\": \"postmantest_collfullname\",\r\n      \"role\": \"postmantest_collrole\"\r\n    }\r\n  ],\r\n  \"created\": \"2020-04-20T08:24:26.693Z\",\r\n  \"updated\": \"2020-04-20T08:24:26.693Z\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/Role/setRole?createdUserId={{createdUserId}}&roleId={{roleId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Role",
												"setRole"
											],
											"query": [
												{
													"key": "createdUserId",
													"value": "{{createdUserId}}",
													"description": "Id of the user that we want to update"
												},
												{
													"key": "roleId",
													"value": "{{roleId}}",
													"description": "Id of the role that you want to update the user with"
												}
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Search",
							"item": [
								{
									"name": "Search-SearchInternal-DataOfficer",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "8853df4e-c2e4-46dc-a904-75f57bf4e6d9",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.ok;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{dataOfficerUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Search/internal/{{projectName}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Search",
												"internal",
												"{{projectName}}"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Wizard",
							"item": [
								{
									"name": "Wizard-GetWizard-DataOfficer",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "af630a1c-61fd-4b35-8906-ce0523cbf0f8",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\")) + 1000;",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{dataOfficerUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Wizard?sourceURI={{wizardSourceUri}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Wizard"
											],
											"query": [
												{
													"key": "sourceURI",
													"value": "{{wizardSourceUri}}",
													"description": "This is the URI that the wizard will use to fetch the source."
												}
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Institution",
							"item": [
								{
									"name": "Institution-CreateInstitution-DataOfficer",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "835b30d4-2a87-4598-b7ac-75c5ff97e282",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 401\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.unauthorized;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"identityId\": \"98764342123\",\n    \"name\": \"mycooltestusername\",\n    \"email\": \"postmantest_email@example.com\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/User",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"User"
											]
										}
									},
									"response": []
								},
								{
									"name": "Institution-GetInstitution-DataOfficer",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3e03af3d-415c-4d22-bd46-745506f2b05e",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 401\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.unauthorized;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{apiUrl}}/api/User/1",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"User",
												"1"
											]
										}
									},
									"response": []
								},
								{
									"name": "Institution-UpdateInstitution-DataOfficer",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "465b0fb5-0cd2-4c8e-85f8-88d3f317904c",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 401\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.unauthorized;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"name\": \"bobz\",\r\n  \"email\": \"BobSmith@email.com\",\r\n  \"identityId\": {{administratorUserIdentityId}}\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/User/1",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"User",
												"1"
											]
										}
									},
									"response": []
								},
								{
									"name": "Instituiton-DeleteInstitution-DataOfficer",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "cff80f58-b691-4af8-a533-897bb7114d3d",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 401\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.unauthorized;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{apiUrl}}/api/User/1",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"User",
												"1"
											]
										}
									},
									"response": []
								}
							],
							"auth": {
								"type": "noauth"
							},
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "c96110e2-e6dd-4dda-8bb8-9284aeac9836",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "bff52e14-82b4-43f2-a9f3-5c038be3ff53",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Cleanup",
							"item": [
								{
									"name": "Embed-DeleteEmbed-Self-Registered",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "46506284-ab09-4d3d-9e22-01d24cf9f692",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.ok;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{dataOfficerUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Embed/{{embedGuid}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Embed",
												"{{embedGuid}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Embed-DeleteEmbed-Other-DifferentInstitution-Registered",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "279ace93-8ae3-4af1-82c5-11db525dfa82",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"",
													"pm.test(\"Status code is 401\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.unauthorized;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{dataOfficerUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Embed/{{adminEmbedGuid}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Embed",
												"{{adminEmbedGuid}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Embed-DeleteEmbed-Other-SameInstitution-Registered",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e38c2f6f-d709-4811-be53-41f21ca9f745",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.ok;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{dataOfficerUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Embed/{{embedGuidWithInstitution}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Embed",
												"{{embedGuidWithInstitution}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Highlight-DeleteHighlight-Other-Registered",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c257241b-7b46-41b7-86f4-52563e52736e",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"",
													"pm.test(\"Status code is 403\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.forbidden;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{dataOfficerUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Highlight/{{highlightId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Highlight",
												"{{highlightId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Project-DeleteProject-Self-Registered",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "1b4947bc-0fb9-4eab-9450-310371b67818",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{dataOfficerUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Project/{{projectId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Project",
												"{{projectId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Project-DeleteProject-Other-OtherInstitution-Registered",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "10dc3d60-e26b-4c22-9985-ae45d9d268ae",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"",
													"pm.test(\"Status code is 401\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.unauthorized;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{dataOfficerUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Project/1",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Project",
												"1"
											]
										}
									},
									"response": []
								},
								{
									"name": "Project-DeleteProject-Other-SameInstitution-Registered",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "186ac24d-2348-4429-8d2f-00467d5bb636",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.ok;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{dataOfficerUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Project/{{projectIdWithInstitution}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Project",
												"{{projectIdWithInstitution}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Role-DeleteRole-Registered",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6bf24c2d-9ef1-4efc-9b2a-7322e99cb499",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"",
													"pm.test(\"Status code is 403\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.forbidden;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{dataOfficerUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Role/{{roleId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Role",
												"{{roleId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "User-DeleteUser-Other-DifferentInstitution-Registered",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b0e1ff9d-bbb9-499e-9c08-60475922a5f7",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"",
													"pm.test(\"Status code is 401\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.unauthorized;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{dataOfficerUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/User/{{createdUserId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"User",
												"{{createdUserId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "User-DeleteUser-Other-SameInstitution-Registered",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "98bc0da0-4c66-4c50-bff1-5cdf9294ea9b",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.ok;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{dataOfficerUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/User/{{createdUserWithInstitutionId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"User",
												"{{createdUserWithInstitutionId}}"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "File",
							"item": [
								{
									"name": "Post-File-DataOfficer",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "15306da6-25c7-4d04-88c7-55c3979680ad",
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.environment.set(\"dataOfficerFileId\", jsonData.id)\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Response time is less than 800ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(800);\r",
													"});\r",
													"\r",
													"pm.test(\"Response must be valid and have a json body\", function () {\r",
													"     pm.response.to.be.withBody;\r",
													"     pm.response.to.be.json;\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "IdentityId",
												"value": "{{dataOfficerUserIdentityId}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "File",
													"type": "file",
													"src": "Postman/testimage.png"
												}
											]
										},
										"url": {
											"raw": "{{apiUrl}}/api/File",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"File"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get-Files-DataOfficer",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "1968ec5b-0fa6-4125-9d6b-e1e3ddcb7b5a",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);\r",
													"});\r",
													"\r",
													"pm.test(\"Response must be valid and have a json body\", function () {\r",
													"    pm.response.to.be.withBody;\r",
													"    pm.response.to.be.json;\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"value": "{{dataOfficerUserIdentityId}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/File",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"File"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete-File-DataOfficer",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "12c8d7f3-9df5-4a92-b920-4e9823f8beb3",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);\r",
													"});\r",
													"\r",
													"pm.test(\"Response must be valid\", function () {\r",
													"     pm.response.to.be.ok;\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{dataOfficerUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/File/{{dataOfficerFileId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"File",
												"{{dataOfficerFileId}}"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "PR",
					"item": [
						{
							"name": "Preparation",
							"item": [
								{
									"name": "User-CreateUser",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "039c9cb1-93fe-4882-b224-2211f3202307",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"var userName = pm.environment.get(\"userName\");",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.environment.set(\"createdUserId\", jsonData.id);",
													"pm.environment.set(\"identityId\", jsonData.id);",
													"",
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.success;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});",
													"",
													"pm.test(\"Check if created Username matches: \" + userName, function () {",
													"    pm.expect(jsonData.name).to.eql(userName);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{administratorUserIdentityId}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"identityId\": \"9996\",\n    \"name\": \"{{userName}}\",\n    \"email\": \"postmantest_email@example.com\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/User",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"User"
											]
										}
									},
									"response": []
								},
								{
									"name": "Project-CreateProject",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "530aeab0-3cfb-4367-a31e-f2e98fb8d9dd",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"var administratorUserId = parseInt(pm.environment.get(\"administratorUserId\"));",
													"var projectName = pm.environment.get(\"projectName\");",
													"var adminUserName = pm.environment.get(\"adminUserName\");",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.environment.set(\"projectId\", jsonData.id);",
													"pm.environment.set(\"adminProjectId\", jsonData.id);",
													"",
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.success;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});",
													"",
													"pm.test(\"Project Name is set correctly and matching: \" + projectName, function () {",
													"    pm.expect(jsonData.name).to.eql(projectName);",
													"});",
													"",
													"pm.test(\"User Name is correct and matching: \" + adminUserName, function () {",
													"    pm.expect(jsonData.user.name).to.eql(adminUserName);",
													"});",
													"",
													"pm.test(\"Identity ID is correct and matching: \" + administratorUserId, function () {",
													"    pm.expect(parseInt(jsonData.user.id)).to.eql(administratorUserId);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{administratorUserIdentityId}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"name\": \"{{projectName}}\",\r\n  \"description\": \"postmantest_description\",\r\n  \"shortDescription\": \"postmantest_shortdesc\",\r\n  \"uri\": \"postmantest_uri\",\r\n  \"collaborators\": [\r\n    {\r\n      \"fullName\": \"postmantest_collfullname\",\r\n      \"role\": \"postmantest_collrole\"\r\n    }\r\n  ],\r\n  \"created\": \"2020-04-20T08:24:26.693Z\",\r\n  \"updated\": \"2020-04-20T08:24:26.693Z\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/Project",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Project"
											]
										}
									},
									"response": []
								},
								{
									"name": "Highlight-CreateHighlight",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "bcb6578a-51e7-4025-b5c5-c2a76b1009ca",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"var identityId = parseInt(pm.environment.get(\"identityId\"));",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.environment.set(\"highlightId\", jsonData.id);",
													"",
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.success;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "4cccb7ae-21f0-4de6-81bb-dacd14b2cb6a",
												"exec": [
													"var current_timestamp = new Date();\r",
													"postman.setEnvironmentVariable(\"current_timestamp\", current_timestamp.toISOString());\r",
													"\r",
													"var future_timestamp = new Date(Date.now() +(2 * 86400000));\r",
													"postman.setEnvironmentVariable(\"future_timestamp\", future_timestamp.toISOString());\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{administratorUserIdentityId}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"projectId\": {{projectId}},\r\n  \"startDate\": \"{{current_timestamp}}\",\r\n  \"endDate\": \"{{future_timestamp}}\",\r\n  \"description\" : \"Lorem Ipsum\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/Highlight",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Highlight"
											]
										}
									},
									"response": []
								},
								{
									"name": "Embed-CreateEmbed",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "38c89246-b885-474c-a011-f73197cce117",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.environment.set(\"embedGuid\", jsonData.guid);",
													"pm.environment.set(\"embeddedProjectId\", jsonData.project.id);",
													"",
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.success;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{administratorUserIdentityId}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"projectId\": {{projectId}}\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/Embed",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Embed"
											]
										}
									},
									"response": []
								},
								{
									"name": "Role-CreateRole",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "83290e2e-1191-49b0-81c8-dbdaee615496",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"var scopeName = pm.environment.get(\"scopeName\");",
													"var roleName = pm.environment.get(\"roleName\");",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.environment.set(\"roleId\", jsonData.id);",
													"",
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.success;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});",
													"",
													"pm.test(\"Role Name is set correctly and matching: \" + roleName, function () {",
													"    pm.expect(jsonData.name).to.eql(roleName);",
													"});",
													"",
													"pm.test(\"Scope is correct and matching: \" + scopeName, function () {",
													"    pm.expect(jsonData.scopes.scope).to.eql(scopeName);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{administratorUserIdentityId}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"name\": \"{{roleName}}\",\r\n  \"scopes\": [\r\n    {\r\n      \"scope\": \"EmbedWrite\"\r\n    }\r\n  ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/Role",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Role"
											]
										}
									},
									"response": []
								}
							],
							"description": "For some requests, we need to have data available. The variables need to be filled so the request can succeed. We put these preparation requests in this folder. We will clean them up in the cleanup folder.",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "f2341fef-d544-4c84-b263-fd770f7e89ee",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "c0ef49bd-8bcf-4a45-b595-804923abb5a1",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "User",
							"item": [
								{
									"name": "User-CreateUser-PR",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c87d4a36-8669-4c24-a6e4-dc6bb8862739",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 403\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.forbidden;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{prUserIdentityId}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"identityId\": \"{{createdUserId}}\",\n    \"name\": \"{{userName}}\",\n    \"email\": \"postmantest_email@example.com\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/User",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"User"
											]
										}
									},
									"response": []
								},
								{
									"name": "User-GetUser-Other-PR",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5f72da7d-c136-467c-80dc-ab4fa67737f5",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 403\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.forbidden;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{prUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/User/{{createdUserId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"User",
												"{{createdUserId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "User-GetUser-Self-PR",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "eb3281fc-cd90-4196-a8aa-39024e7166db",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"var prUserIdentityId = parseInt(pm.environment.get(\"prUserIdentityId\"));",
													"",
													"var jsonData = pm.response.json();",
													"pm.environment.set(\"PrUserId\", jsonData.id);",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.ok;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});",
													"",
													"pm.test(\"Identity ID is correct and matching: \" + prUserIdentityId, function () {",
													"    pm.expect(parseInt(jsonData.identityId)).to.eql(prUserIdentityId);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{prUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/User",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"User"
											]
										}
									},
									"response": []
								},
								{
									"name": "User-UpdateUser-Self-PR",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "60b3de7f-2ee0-453a-bbd8-c6175e2a8624",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"var updatedPrUserEmail = pm.environment.get(\"updatedPrUserEmail\");",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.ok;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Check if email update matches: \" + updatedPrUserEmail, function () {",
													"    pm.expect(jsonData.email).to.eql(updatedPrUserEmail);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "IdentityId",
												"value": "{{prUserIdentityId}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"name\": \"Pr jerry\",\r\n  \"email\": \"{{updatedPrUserEmail}}\",\r\n  \"identityId\": \"{{prUserIdentityId}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/User/{{PrUserId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"User",
												"{{PrUserId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "User-UpdateUser-Other-PR",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "89ca5bae-2d3d-44fb-8fa6-e3d4f2872072",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 401\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.unauthorized;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{prUserIdentityId}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"name\": \"bobz\",\r\n  \"email\": \"BobSmith@email.com\",\r\n  \"identityId\": {{administratorUserIdentityId}}\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/User/{{createdUserId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"User",
												"{{createdUserId}}"
											]
										}
									},
									"response": []
								}
							],
							"description": "Requests executed as the Alice user with the registered role.",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "cc08a047-88c5-4eb7-b03e-17c6e561cc62",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "96a8494a-b11f-4b02-a887-7b94c21bdf6d",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "FollowUser",
							"item": [
								{
									"name": "User-FollowUser-PR",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e797f6e1-027e-4717-ac62-b02d23490977",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"",
													"var jsonData = pm.response.json();",
													"var userId = pm.environment.get(\"userIdToFollow\");",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.success;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});",
													"",
													"pm.test(\"Check if created Username matches: \" + userId, function () {",
													"    pm.expect(jsonData.id).to.eql(userId);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{prUserIdentityId}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/User/follow/{{userIdToFollow}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"User",
												"follow",
												"{{userIdToFollow}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "User-UnFollowUser-PR",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5329d437-d55d-4e99-b9d8-02a06d045b00",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{prUserIdentityId}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/User/follow/{{userIdToFollow}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"User",
												"follow",
												"{{userIdToFollow}}"
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "4bc89197-e3f4-4558-a091-b0fe36918d45",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "c5c21b37-47d3-4e20-b113-89fd22447a9b",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Project",
							"item": [
								{
									"name": "Project-CreateProject-PR",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "acebc32c-cc5f-4213-a6cf-0259a766e3eb",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"var PrUserId = pm.environment.get(\"PrUserId\");",
													"var projectName = pm.environment.get(\"projectName\");",
													"",
													"var jsonData = pm.response.json();",
													"pm.environment.set(\"projectId\", jsonData.id);",
													"",
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});",
													"",
													"pm.test(\"Project Name is set correctly and matches: \" + projectName, function () {",
													"    pm.expect(jsonData.name).to.eql(projectName);",
													"});",
													"",
													"pm.test(\"User Id is set correctly and matches: \" + PrUserId, function () {",
													"    pm.expect(jsonData.user.id).to.eql(PrUserId);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "IdentityId",
												"value": "{{prUserIdentityId}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"name\": \"{{projectName}}\",\r\n  \"description\": \"postmantest_description\",\r\n  \"shortDescription\": \"postmantest_shortdesc\",\r\n  \"uri\": \"postmantest_uri\",\r\n  \"collaborators\": [\r\n    {\r\n      \"fullName\": \"postmantest_collfullname\",\r\n      \"role\": \"postmantest_collrole\"\r\n    }\r\n  ],\r\n  \"created\": \"2020-04-20T08:24:26.693Z\",\r\n  \"updated\": \"2020-04-20T08:24:26.693Z\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/Project",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Project"
											]
										}
									},
									"response": []
								},
								{
									"name": "Project-GetAllProjects-PR",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c4f50e2f-0351-40a9-9319-8ab9c412497c",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"var projectName = pm.environment.get(\"projectName\");",
													"",
													"var jsonData = pm.response.json();",
													"",
													"var foundAt;",
													"",
													"function findProject(jsonData, name) {",
													"    for (var i = 0; i < jsonData.results.length; i++) {",
													"        if (jsonData.results[i].name == name) {",
													"            return i;",
													"        }",
													"    }",
													"    return -1;",
													"}",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Project: \" + projectName + \" is in list\", function () {",
													"    foundAt = findProject(jsonData, projectName);",
													"    pm.expect(foundAt).to.not.eql(-1);",
													"});",
													"",
													"pm.test(\"Project Name is set correctly and matching: \" + projectName, function () {",
													"    pm.expect(jsonData.results[foundAt].name).to.eql(projectName);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{prUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Project",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Project"
											]
										}
									},
									"response": []
								},
								{
									"name": "Project-GetProject-Self-PR",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "825d6f58-25e2-495a-b5bf-dfa2bc977c5a",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"var projectName = pm.environment.get(\"projectName\");",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Project Name is set correctly and matches: \" + projectName, function () {",
													"    pm.expect(jsonData.name).to.eql(projectName);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{prUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Project/{{projectId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Project",
												"{{projectId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Project-GetProject-Other-PR",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d079adba-40d7-4846-a8a1-f14a8655deaa",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{prUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Project/{{adminProjectId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Project",
												"{{adminProjectId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Project-UpdateProject-Self-PR",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d700ed48-b00f-4599-be8e-b55100aec1bd",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"var projectName = pm.environment.get(\"projectNameUpdated\");",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.ok;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Project Name is set correctly and matches: \" + projectName, function () {",
													"    pm.expect(jsonData.name).to.eql(projectName);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{prUserIdentityId}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"name\": \"{{projectNameUpdated}}\",\r\n  \"description\": \"postmantest_description\",\r\n  \"shortDescription\": \"postmantest_shortdesc\",\r\n  \"uri\": \"postmantest_uri\",\r\n  \"collaborators\": [\r\n    {\r\n      \"fullName\": \"postmantest_collfullname\",\r\n      \"role\": \"postmantest_collrole\"\r\n    }\r\n  ],\r\n  \"created\": \"2020-04-20T08:24:26.693Z\",\r\n  \"updated\": \"2020-04-20T08:24:26.693Z\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/Project/{{projectId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Project",
												"{{projectId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Project-UpdateProject-Other-PR",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "fff4340d-431e-450a-915d-30c34fe3f673",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"",
													"pm.test(\"Status code is 401\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"    pm.response.to.be.unauthorized;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{prUserIdentityId}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"name\": \"{{projectNameUpdated}}\",\r\n  \"description\": \"postmantest_description\",\r\n  \"shortDescription\": \"postmantest_shortdesc\",\r\n  \"uri\": \"postmantest_uri\",\r\n  \"collaborators\": [\r\n    {\r\n      \"fullName\": \"postmantest_collfullname\",\r\n      \"role\": \"postmantest_collrole\"\r\n    }\r\n  ],\r\n  \"created\": \"2020-04-20T08:24:26.693Z\",\r\n  \"updated\": \"2020-04-20T08:24:26.693Z\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/Project/{{adminProjectId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Project",
												"{{adminProjectId}}"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "FollowProject",
							"item": [
								{
									"name": "Project-FollowProject-PR",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "46a03c52-93cf-4584-af89-124c10590095",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"",
													"var jsonData = pm.response.json();",
													"var projectId = pm.environment.get(\"projectIdToFollow\");",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.success;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});",
													"",
													"pm.test(\"Check if created project id matches: \" + projectId, function () {",
													"    pm.expect(jsonData.id).to.eql(projectId);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{prUserIdentityId}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/project/follow/{{projectIdToFollow}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"project",
												"follow",
												"{{projectIdToFollow}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Project-UnFollowProject-PR",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f0305ac0-1162-4baf-9ed3-67ec0e7926a2",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{prUserIdentityId}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/project/follow/{{projectIdToFollow}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"project",
												"follow",
												"{{projectIdToFollow}}"
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "be1836a2-c70c-4da8-9f63-330d27777792",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "95b1a458-a98d-4e12-9928-4d22fa771ce0",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Embed",
							"item": [
								{
									"name": "Embed-CreateEmbed-Self-PR",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "97ca276c-8d0f-4bd4-9e12-eace3a9c87da",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.environment.set(\"embedGuid\", jsonData.guid);",
													"pm.environment.set(\"embeddedProjectId\", jsonData.project.id);",
													"",
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.success;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "IdentityId",
												"value": "{{prUserIdentityId}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"projectId\": {{projectId}}\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/Embed",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Embed"
											]
										}
									},
									"response": []
								},
								{
									"name": "Embed-CreateEmbed-Other-PR",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "aeb4350b-c46c-425b-aa91-8b9b9c333783",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.environment.set(\"otherEmbedGuid\", jsonData.guid);",
													"pm.environment.set(\"otherEmbeddedProjectId\", jsonData.project.id);",
													"",
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.success;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "IdentityId",
												"value": "{{prUserIdentityId}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"projectId\": {{adminProjectId}}\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/Embed",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Embed"
											]
										}
									},
									"response": []
								},
								{
									"name": "Embed-GetAllEmbeds-PR",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "48109b71-73f9-4674-b745-372646e95cdc",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.ok;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"value": "{{prUserIdentityId}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Embed",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Embed"
											]
										}
									},
									"response": []
								},
								{
									"name": "Embed-GetEmbed-Self-PR",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3a1f73e8-9c80-435d-9add-0de66d5cf2f3",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"var embeddedProjectId = parseInt(pm.environment.get(\"embeddedProjectId\"))",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Embed matches: \" + embeddedProjectId, function () {",
													"    pm.expect(jsonData.id).to.eql(embeddedProjectId);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{prUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Embed/{{embedGuid}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Embed",
												"{{embedGuid}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Embed-GetEmbed-Other-PR",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b984f3a2-8f5a-4962-9d5a-f133df7cab3d",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"var otherEmbeddedProjectId = parseInt(pm.environment.get(\"otherEmbeddedProjectId\"))",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Embed matches: \" + otherEmbeddedProjectId, function () {",
													"    pm.expect(jsonData.id).to.eql(otherEmbeddedProjectId);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{prUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Embed/{{otherEmbedGuid}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Embed",
												"{{otherEmbedGuid}}"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Highlight",
							"item": [
								{
									"name": "Highlight-CreateHighlight-Self-PR",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "19c8bfd8-4282-4f55-aab0-826096400efa",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.environment.set(\"highlightId\", jsonData.id);",
													"",
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.success;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "c3c5c3a9-d75e-4588-93b2-3597146c0cf4",
												"exec": [
													"var current_timestamp = new Date();\r",
													"postman.setEnvironmentVariable(\"current_timestamp\", current_timestamp.toISOString());\r",
													"\r",
													"var future_timestamp = new Date(Date.now() +(2 * 86400000));\r",
													"postman.setEnvironmentVariable(\"future_timestamp\", future_timestamp.toISOString());\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{prUserIdentityId}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"projectId\": {{projectId}},\r\n  \"startDate\": \"{{current_timestamp}}\",\r\n  \"endDate\": \"{{future_timestamp}}\",\r\n  \"description\" : \"Lorem Ipsum\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/Highlight",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Highlight"
											]
										}
									},
									"response": []
								},
								{
									"name": "Highlight-GetHighlight-Self-PR",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "681def3e-3076-457a-90c9-f067dde174d6",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"var identityId = parseInt(pm.environment.get(\"identityId\"));",
													"var highlightId = parseInt(pm.environment.get(\"highlightId\"));",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.environment.set(\"highlightStartDate\", jsonData.startDate);",
													"pm.environment.set(\"highlightEndDate\", jsonData.endDate);",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Highlight Id matches: \" + highlightId, function () {",
													"    pm.expect(jsonData.id).to.eql(highlightId);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"value": "{{prUserIdentityId}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Highlight/{{highlightId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Highlight",
												"{{highlightId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Highlight-GetHighlight-ByProject-Self-PR",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d533e087-4e0c-4a3a-8b85-2cbe071ef24d",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"var identityId = parseInt(pm.environment.get(\"identityId\"));",
													"var projectId = parseInt(pm.environment.get(\"projectId\"));",
													"var highlightId = parseInt(pm.environment.get(\"highlightId\"));",
													"",
													"var jsonData = pm.response.json();",
													"",
													"var foundAt;",
													"",
													"function findHighlightId(jsonData, item) {",
													"    for (var i = 0; i < jsonData.length; i++) {",
													"        if (jsonData[i].id == item) {",
													"            return i;",
													"        }",
													"    }",
													"    return -1;",
													"}",
													"",
													"function findProjectId(jsonData, item) {",
													"    for (var i = 0; i < jsonData.length; i++) {",
													"        if (jsonData[i].projectId == item) {",
													"            return i;",
													"        }",
													"    }",
													"    return -1;",
													"}",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Project is in list and matching: \" + projectId, function () {",
													"    foundAt = findProjectId(jsonData, projectId);",
													"    pm.expect(foundAt).to.not.eql(-1);",
													"});",
													"",
													"pm.test(\"Highlight is in list and matching:\" + highlightId, function () {",
													"    foundAt = findHighlightId(jsonData, highlightId);",
													"    pm.expect(foundAt).to.not.eql(-1);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{prUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Highlight/Project/{{projectId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Highlight",
												"Project",
												"{{projectId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Highlight-UpdateHighlight-Self-PR",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "da108ea9-a81b-4b92-94d7-67b8efa352d4",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.ok;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "6927553d-ae7a-4224-a906-65afec2060b0",
												"exec": [
													"var current_timestamp = new Date();\r",
													"postman.setEnvironmentVariable(\"current_timestamp\", current_timestamp.toISOString());"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "IdentityId",
												"value": "{{prUserIdentityId}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"projectId\": \"{{projectId}}\",\r\n  \"startDate\": \"{{current_timestamp}}\",\r\n  \"endDate\": \"{{future_timestamp}}\",\r\n  \"description\" : \"Lorem Ipsum\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/Highlight/{{highlightId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Highlight",
												"{{highlightId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Highlight-CreateHighlight-Other-PR",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a1ca6555-17e0-4df6-a361-a86b20800820",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"",
													"var jsonData = pm.response.json();",
													"pm.environment.set(\"adminHighlightId\", jsonData.id);",
													"",
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.success;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "3535e2c4-b1df-4c27-aec0-2fbf1475d45e",
												"exec": [
													"var current_timestamp = new Date();\r",
													"postman.setEnvironmentVariable(\"current_timestamp\", current_timestamp.toISOString());\r",
													"\r",
													"var future_timestamp = new Date(Date.now() +(2 * 86400000));\r",
													"postman.setEnvironmentVariable(\"future_timestamp\", future_timestamp.toISOString());\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{prUserIdentityId}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"projectId\": {{adminProjectId}},\r\n  \"startDate\": \"{{current_timestamp}}\",\r\n  \"endDate\": \"{{future_timestamp}}\",\r\n  \"description\" : \"Lorem Ipsum\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/Highlight",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Highlight"
											]
										}
									},
									"response": []
								},
								{
									"name": "Highlight-GetHighlight-Other-PR",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "cc200ca2-3a16-4940-bced-fb87f14897db",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"var identityId = parseInt(pm.environment.get(\"identityId\"));",
													"var adminHighlightId = parseInt(pm.environment.get(\"adminHighlightId\"));",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.environment.set(\"highlightStartDate\", jsonData.startDate);",
													"pm.environment.set(\"highlightEndDate\", jsonData.endDate);",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Highlight Id matches: \" + adminHighlightId, function () {",
													"    pm.expect(jsonData.id).to.eql(adminHighlightId);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{prUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Highlight/{{adminHighlightId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Highlight",
												"{{adminHighlightId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Highlight-GetHighlight-ByProject-Other-PR",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d7bb11de-36c5-4f6d-8ae6-bfad4adc4331",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"var identityId = parseInt(pm.environment.get(\"identityId\"));",
													"var adminProjectId = parseInt(pm.environment.get(\"adminProjectId\"));",
													"var adminHighlightId = parseInt(pm.environment.get(\"adminHighlightId\"));",
													"",
													"var jsonData = pm.response.json();",
													"",
													"var foundAt;",
													"",
													"function findHighlightId(jsonData, item) {",
													"    for (var i = 0; i < jsonData.length; i++) {",
													"        if (jsonData[i].id == item) {",
													"            return i;",
													"        }",
													"    }",
													"    return -1;",
													"}",
													"",
													"function findProjectId(jsonData, item) {",
													"    for (var i = 0; i < jsonData.length; i++) {",
													"        if (jsonData[i].projectId == item) {",
													"            return i;",
													"        }",
													"    }",
													"    return -1;",
													"}",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Project is in list and matching: \" + adminProjectId, function () {",
													"    foundAt = findProjectId(jsonData, adminProjectId);",
													"    pm.expect(foundAt).to.not.eql(-1);",
													"});",
													"",
													"pm.test(\"Highlight is in list and matching:\" + adminHighlightId, function () {",
													"    foundAt = findHighlightId(jsonData, adminHighlightId);",
													"    pm.expect(foundAt).to.not.eql(-1);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{prUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Highlight/Project/{{adminProjectId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Highlight",
												"Project",
												"{{adminProjectId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Highlight-UpdateHighlight-Other-PR",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d2180620-c746-4a81-bce6-83c50bfe17c1",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.ok;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "e8ccc3e9-597d-4ec6-9f9a-9270ef2402ac",
												"exec": [
													"var current_timestamp = new Date();\r",
													"postman.setEnvironmentVariable(\"current_timestamp\", current_timestamp.toISOString());"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{prUserIdentityId}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"projectId\": \"{{projectId}}\",\r\n  \"startDate\": \"{{current_timestamp}}\",\r\n  \"endDate\": \"{{future_timestamp}}\",\r\n  \"description\" : \"Lorem Ipsum\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/Highlight/{{adminHighlightId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Highlight",
												"{{adminHighlightId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Highlight-GetAllActiveHighlights-PR",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "7f333ce0-17a4-4c42-8221-88c41c5dbcf3",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"var projectId = pm.environment.get(\"adminProjectId\");",
													"",
													"var jsonData = pm.response.json();",
													"",
													"var foundAt;",
													"",
													"function findItem(jsonData, item) {",
													"    for (var i = 0; i < jsonData.length; i++) {",
													"        if (jsonData[i].projectId == item) {",
													"            return i;",
													"        }",
													"    }",
													"    return -1;",
													"}",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Highlight is in list and matching: \" + projectId, function () {",
													"    foundAt = findItem(jsonData, projectId);",
													"    pm.expect(foundAt).to.not.eql(-1);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{prUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Highlight",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Highlight"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Role",
							"item": [
								{
									"name": "Role-CreateRole-PR",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "59b9064a-0b66-49d5-b385-c99a52bdbadc",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 403\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.forbidden;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{prUserIdentityId}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"name\": \"{{roleName}}\",\r\n  \"scopes\": [\r\n    {\r\n      \"scope\": \"EmbedWrite\"\r\n    }\r\n  ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/Role",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Role"
											]
										}
									},
									"response": []
								},
								{
									"name": "Role-GetAllRoles-PR",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "02cd4f68-17ff-4f77-85af-70ab6dfef172",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 403\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.forbidden;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{prUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Role",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Role"
											]
										}
									},
									"response": []
								},
								{
									"name": "Scope-GetAllScopes-PR",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b2d71bfb-cbdd-40eb-bacf-ad83647fccbe",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 403\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.forbidden;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{prUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Role/Scopes",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Role",
												"Scopes"
											]
										}
									},
									"response": []
								},
								{
									"name": "Role-GetRole-PR",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "51b104d3-f1e0-4082-81fa-dc30d8f7993c",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 403\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.forbidden;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{prUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Role/{{roleId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Role",
												"{{roleId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Role-UpdateRole-PR",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "8fb1dc82-8563-40d4-be0d-29d174b50771",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 403\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.forbidden;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{prUserIdentityId}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"name\": \"{{updatedRoleName}}\",\r\n  \"scopes\": [\r\n    {\r\n      \"scope\": \"EmbedWrite\"\r\n    }\r\n  ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/Role/{{roleId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Role",
												"{{roleId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Role-SetRole-PR",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "734750ed-2b9b-4271-b01b-fb1cc76a8311",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 403\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.forbidden;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{prUserIdentityId}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"createdUserId\": {{createdUserId}},\r\n  \"name\": \"{{projectNameUpdated}}\",\r\n  \"description\": \"postmantest_description\",\r\n  \"shortDescription\": \"postmantest_shortdesc\",\r\n  \"uri\": \"postmantest_uri\",\r\n  \"collaborators\": [\r\n    {\r\n      \"fullName\": \"postmantest_collfullname\",\r\n      \"role\": \"postmantest_collrole\"\r\n    }\r\n  ],\r\n  \"created\": \"2020-04-20T08:24:26.693Z\",\r\n  \"updated\": \"2020-04-20T08:24:26.693Z\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/Role/setRole?createdUserId={{createdUserId}}&roleId={{roleId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Role",
												"setRole"
											],
											"query": [
												{
													"key": "createdUserId",
													"value": "{{createdUserId}}",
													"description": "Id of the user that we want to update"
												},
												{
													"key": "roleId",
													"value": "{{roleId}}",
													"description": "Id of the role that you want to update the user with"
												}
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Search",
							"item": [
								{
									"name": "Search-SearchInternal-PR",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "75e17d35-ab47-42e6-b4fe-6549468e677e",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.ok;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{prUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Search/internal/{{projectName}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Search",
												"internal",
												"{{projectName}}"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Wizard",
							"item": [
								{
									"name": "Wizard-GetWizard-PR",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "547dd3ec-8400-46dd-9d98-b52f63c4605b",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\")) + 1000;",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{registeredUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Wizard?sourceURI={{wizardSourceUri}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Wizard"
											],
											"query": [
												{
													"key": "sourceURI",
													"value": "{{wizardSourceUri}}",
													"description": "This is the URI that the wizard will use to fetch the source."
												}
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Institution",
							"item": [
								{
									"name": "Institution-CreateInstitution-PR",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f61fb2af-1047-4fbf-a48b-1f847e7f78ac",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 401\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.unauthorized;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"identityId\": \"98764342123\",\n    \"name\": \"mycooltestusername\",\n    \"email\": \"postmantest_email@example.com\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/User",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"User"
											]
										}
									},
									"response": []
								},
								{
									"name": "Institution-GetInstitution-PR",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "8daebbd3-2681-43c4-bdf8-d7ad630aef49",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 401\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.unauthorized;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{apiUrl}}/api/User/1",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"User",
												"1"
											]
										}
									},
									"response": []
								},
								{
									"name": "Institution-UpdateInstitution-PR",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a373c228-a5bc-442e-bd0f-7f56c1851691",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 401\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.unauthorized;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"name\": \"bobz\",\r\n  \"email\": \"BobSmith@email.com\",\r\n  \"identityId\": {{administratorUserIdentityId}}\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/User/1",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"User",
												"1"
											]
										}
									},
									"response": []
								},
								{
									"name": "Instituiton-DeleteInstitution-PR",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "58de518a-a36e-4cf2-9d98-559002148780",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 401\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.unauthorized;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{apiUrl}}/api/User/1",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"User",
												"1"
											]
										}
									},
									"response": []
								}
							],
							"auth": {
								"type": "noauth"
							},
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "2f1d6eef-bf64-47a1-90cd-7574dec3715a",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "f6864820-3664-4e74-947f-e1c8f0b70c72",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Cleanup",
							"item": [
								{
									"name": "Embed-DeleteEmbed-Self-PR",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "10a7b8c0-1a01-44e2-9c3c-ad7ae4ed5f29",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.ok;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{prUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Embed/{{embedGuid}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Embed",
												"{{embedGuid}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Embed-DeleteEmbed-Other-PR",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "7c2fb2d4-e17e-4474-9131-34bad51051cf",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.ok;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{prUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Embed/{{otherEmbedGuid}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Embed",
												"{{otherEmbedGuid}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Highlight-DeleteHighlight-Self-PR",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f690c379-efff-41e2-9b77-9a4f952d9aaf",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{prUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Highlight/{{highlightId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Highlight",
												"{{highlightId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Highlight-DeleteHighlight-Other-PR",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "00d6e295-cd1b-4fcd-9e50-71c64428d3a0",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{prUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Highlight/{{adminHighlightId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Highlight",
												"{{adminHighlightId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Project-DeleteProject-Self-PR",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "7f6bc078-c7db-428f-8014-d2d250e744cc",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{prUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Project/{{projectId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Project",
												"{{projectId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Project-DeleteProject-Other-PR",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "1b03f29f-f772-4b0b-869e-6396ea42bcbc",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 401\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.unauthorized;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{prUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Project/{{adminProjectId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Project",
												"{{adminProjectId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Role-DeleteRole-PR",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d2f14229-cc50-4c26-895d-4844b7239cb0",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 403\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.forbidden;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{prUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Role/{{roleId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Role",
												"{{roleId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "User-DeleteUser-Other-PR",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b77fc44b-bbfa-468e-8a9d-8b206ebcc8af",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 401\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.unauthorized;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{prUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/User/{{createdUserId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"User",
												"{{createdUserId}}"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "File",
							"item": [
								{
									"name": "Post-File-PR",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "573b8664-c7a5-49ed-9aec-2ff7ebf20c7c",
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.environment.set(\"prFileId\", jsonData.id)\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Response time is less than 800ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(800);\r",
													"});\r",
													"\r",
													"pm.test(\"Response must be valid and have a json body\", function () {\r",
													"     pm.response.to.be.success;\r",
													"     pm.response.to.be.withBody;\r",
													"     pm.response.to.be.json;\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "IdentityId",
												"value": "{{prUserIdentityId}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "File",
													"type": "file",
													"src": "Postman/testimage.png"
												}
											]
										},
										"url": {
											"raw": "{{apiUrl}}/api/File",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"File"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get-Files-PR",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "add1deeb-21e6-4039-92dd-0a5342276c20",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));\r",
													"\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);\r",
													"});\r",
													"\r",
													"pm.test(\"Response must be valid and have a json body\", function () {\r",
													"    pm.response.to.be.withBody;\r",
													"    pm.response.to.be.json;\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"value": "{{prUserIdentityId}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/File",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"File"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete-File-PR",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ae586725-9a6a-40bc-819b-f009743c1ac9",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);\r",
													"});\r",
													"\r",
													"pm.test(\"Response must be valid\", function () {\r",
													"     pm.response.to.be.ok;\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "IdentityId",
												"value": "{{prUserIdentityId}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/File/{{prFileId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"File",
												"{{prFileId}}"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Cleanup",
			"item": [
				{
					"name": "Delete-ProjectForFollowing",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "3dd5ff22-07a2-404f-bcb3-439eb2aeb737",
								"exec": [
									"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "IdentityId",
								"value": "{{administratorUserIdentityId}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{apiUrl}}/api/Project/{{projectIdToFollow}}",
							"host": [
								"{{apiUrl}}"
							],
							"path": [
								"api",
								"Project",
								"{{projectIdToFollow}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete-UserForFollowing",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5e729f42-93f2-46b0-a27a-b137d381feb0",
								"exec": [
									"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "IdentityId",
								"value": "{{administratorUserIdentityId}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{apiUrl}}/api/User/{{userIdToFollow}}",
							"host": [
								"{{apiUrl}}"
							],
							"path": [
								"api",
								"User",
								"{{userIdToFollow}}"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		}
	],
	"auth": {
		"type": "oauth2",
		"oauth2": [
			{
				"key": "accessToken",
				"value": "{{accessToken}}",
				"type": "string"
			},
			{
				"key": "tokenType",
				"value": "Bearer",
				"type": "string"
			},
			{
				"key": "addTokenTo",
				"value": "header",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "f0d276cd-410a-4e29-8b85-2d7fb4e427e9",
				"type": "text/javascript",
				"exec": [
					"// Adapted from: https://gist.github.com/harryi3t/dd5c61451206047db70710ff6174c3c1",
					"",
					"let tokenUrl = pm.variables.get(\"tokenUrl\");",
					"let clientId = pm.variables.get(\"clientId\");",
					"let clientSecret = pm.variables.get(\"clientSecret\");",
					"let scope = pm.variables.get(\"scope\");",
					"",
					"let getTokenRequest = {",
					"    method: 'POST',",
					"    url: tokenUrl,",
					"    auth: {",
					"        type: \"basic\",",
					"        basic: [",
					"            { key: \"username\", value: clientId },",
					"            { key: \"password\", value: clientSecret }",
					"        ]",
					"    },",
					"    body: {",
					"        mode: 'formdata',",
					"        formdata: [",
					"            { key: 'grant_type', value: 'client_credentials' },",
					"            { key: 'scope', value: scope }",
					"        ]",
					"    }",
					"};",
					"",
					"pm.sendRequest(getTokenRequest, (err, response) => {",
					"    let jsonResponse = response.json(),",
					"        newAccessToken = jsonResponse.access_token;",
					"",
					"    console.log({ err, jsonResponse, newAccessToken })",
					"",
					"    pm.environment.set('accessToken', newAccessToken);",
					"    pm.variables.set('accessToken', newAccessToken);",
					"});"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "e3ad2380-1a81-4a96-a1d5-5fe51f4aee10",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"protocolProfileBehavior": {}
}