{
	"info": {
		"_postman_id": "b70ac846-ac47-4361-a247-3e7faa2a92f8",
		"name": "DEV Copy",
		"description": "Testing Digital Excellence API",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Warmup",
			"item": [
				{
					"name": "CreateUsers",
					"item": [
						{
							"name": "Registered",
							"item": [
								{
									"name": "Create-RegisteredUser",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();\r",
													"pm.environment.set(\"registeredUserId\", jsonData.id)"
												],
												"type": "text/javascript",
												"id": "6f5d05a1-611f-47e5-94dc-597a5441d68b"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "IdentityId",
												"value": "{{administratorUserIdentityId}}",
												"type": "text"
											},
											{
												"key": "Authorization",
												"value": "Bearer eyJhbGciOiJSUzI1NiIsImtpZCI6ImU4VW1OX2NmZlBoamVPQ3hCSkZpb2ciLCJ0eXAiOiJhdCtqd3QifQ.eyJuYmYiOjE2MDgyMDE4MTMsImV4cCI6MTYwODIwNTQxMywiaXNzIjoiaHR0cHM6Ly9sb2NhbGhvc3Q6NTAwNSIsImF1ZCI6ImRleC1hcGkiLCJjbGllbnRfaWQiOiJkZXgtYXBpLWNsaWVudCIsImNsaWVudF9yb2xlIjoiQmFja2VuZEFwcGxpY2F0aW9uIiwic2NvcGUiOlsiRW1iZWRSZWFkIiwiRW1iZWRXcml0ZSIsIkhpZ2hsaWdodFJlYWQiLCJIaWdobGlnaHRXcml0ZSIsIlByb2plY3RSZWFkIiwiUHJvamVjdFdyaXRlIiwiVXNlclJlYWQiLCJVc2VyV3JpdGUiXX0.jT1Edm1dzKAu47xBFWg4IEWXoIYKTS5lScCmE798FfNdzRutVXlPmMZtac_PcmEcHrbgMvKUqd97UhpnT1ywhToXTQOVcy2EeWfprOkSWKxvTYiP1O55a01iWnOvLcs20ucbjPBHxYeq1WL3FoEfs0ahVSB4nDrqX_MYYmkvX2XriUb97fm9Sdk5fCh44q2tVH7ywZYOWmd3ZwqDB_X4GwyGGpOL_WTIQe-NaBeeONXuKcfEbF5_GpUz751nBvtnuB2lBuAeijLakb4SmtUiaxE479yjMoMz5LA6rpiGxz44gq0k-2r9EZNZs92ziop0cKuvExrDXcScJNAI4QuToQ",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"identityId\": \"{{registeredUserIdentityId}}\",\r\n    \"name\": \"Registered Postman User\",\r\n    \"email\": \"registeredUser@postman.com\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/User",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"User"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "PR",
							"item": [
								{
									"name": "Create-PRUser",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();\r",
													"pm.environment.set(\"prUserId\", jsonData.id)"
												],
												"type": "text/javascript",
												"id": "e43ac561-759c-4e0a-b864-ba69043ad438"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{administratorUserIdentityId}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"identityId\": \"{{prUserIdentityId}}\",\r\n    \"name\": \"Public Relationship Postman User\",\r\n    \"email\": \"PRUser@postman.com\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/User",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"User"
											]
										}
									},
									"response": []
								},
								{
									"name": "Set-PRUser-Role",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"id": "d1fb80fe-cf49-4f44-8641-ef31c33a5cde"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "IdentityId",
												"value": "{{administratorUserIdentityId}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Role/setRole?userId={{prUserId}}&roleId={{prRole}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Role",
												"setRole"
											],
											"query": [
												{
													"key": "userId",
													"value": "{{prUserId}}"
												},
												{
													"key": "roleId",
													"value": "{{prRole}}"
												}
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "DataOfficer",
							"item": [
								{
									"name": "Create-DataOfficerUser",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();\r",
													"pm.environment.set(\"dataOfficerUserId\", jsonData.id)\r",
													""
												],
												"type": "text/javascript",
												"id": "29536392-c90b-44c6-8242-844ba9f3aa02"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "IdentityId",
												"value": "{{administratorUserIdentityId}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"identityId\": \"{{dataOfficerUserIdentityId}}\",\r\n    \"name\": \"Data Officer Postman User\",\r\n    \"email\": \"dataOfficerUser@postman.com\",\r\n    \"institutionId\": 1\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/User",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"User"
											]
										}
									},
									"response": []
								},
								{
									"name": "Set-DataOfficerUser-Role",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"id": "7f1b8684-1a1d-45f0-a314-f309a39b69b9"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "IdentityId",
												"value": "{{administratorUserIdentityId}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Role/setRole?userId={{dataOfficerUserId}}&roleId={{dataOfficerRole}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Role",
												"setRole"
											],
											"query": [
												{
													"key": "userId",
													"value": "{{dataOfficerUserId}}"
												},
												{
													"key": "roleId",
													"value": "{{dataOfficerRole}}"
												}
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								],
								"id": "eee570f2-5b75-48dd-820a-5c938728c299"
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								],
								"id": "ae1d95d6-731d-469e-83a4-1cc733ff88d2"
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Project-GetAllProjects-Guest",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\") + 5000);",
									"",
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
									"});",
									"",
									"pm.test(\"Response must be valid and have a json body\", function () {",
									"    pm.response.to.be.ok;",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"});",
									"",
									"",
									""
								],
								"type": "text/javascript",
								"id": "b0b22638-090d-466b-ad69-907c8ee88414"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{apiUrl}}/api/Project",
							"host": [
								"{{apiUrl}}"
							],
							"path": [
								"api",
								"Project"
							]
						}
					},
					"response": []
				},
				{
					"name": "Project-CreateProjectToFollow-Administrator",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var administratorUserId = parseInt(pm.environment.get(\"administratorUserId\"));",
									"var projectName = pm.environment.get(\"projectName\");",
									"var adminUserName = pm.environment.get(\"adminUserName\");",
									"",
									"var jsonData = pm.response.json();",
									"",
									"pm.environment.set(\"projectIdToFollow\", jsonData.id);",
									"",
									"eval(pm.environment.get(\"commonTests\"))();",
									"",
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Response must be valid and have a json body\", function () {",
									"     pm.response.to.be.success;",
									"     pm.response.to.be.withBody;",
									"     pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"Project Name is set correctly and matching: \" + projectName, function () {",
									"    pm.expect(jsonData.name).to.eql(projectName);",
									"});",
									"",
									"pm.test(\"User Name is correct and matching: \" + adminUserName, function () {",
									"    pm.expect(jsonData.user.name).to.eql(adminUserName);",
									"});",
									"",
									"pm.test(\"Identity ID is correct and matching: \" + administratorUserId, function () {",
									"    pm.expect(parseInt(jsonData.user.id)).to.eql(administratorUserId);",
									"});"
								],
								"type": "text/javascript",
								"id": "ded59c75-ccb2-4fb0-8e50-37144161af49"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "IdentityId",
								"type": "text",
								"value": "{{administratorUserIdentityId}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"{{projectName}}\",\r\n  \"description\": \"postmantest_ProjectToFollow\",\r\n  \"shortDescription\": \"postmantest_ProjectToFollow\",\r\n  \"uri\": \"postmantest_ProjectToFollow\",\r\n  \"collaborators\": [\r\n    {\r\n      \"fullName\": \"postmantest_ProjectToFollow\",\r\n      \"role\": \"postmantest_ProjectToFollow\"\r\n    }\r\n  ],\r\n  \"created\": \"2020-04-20T08:24:26.693Z\",\r\n  \"updated\": \"2020-04-20T08:24:26.693Z\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{apiUrl}}/api/Project",
							"host": [
								"{{apiUrl}}"
							],
							"path": [
								"api",
								"Project"
							]
						}
					},
					"response": []
				},
				{
					"name": "User-CreateUserToFollow-Administrator",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var userName = pm.environment.get(\"userName\");",
									"",
									"var jsonData = pm.response.json();",
									"pm.environment.set(\"userIdToFollow\", jsonData.id)",
									"",
									"eval(pm.environment.get(\"commonTests\"))();",
									"",
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Response must be valid and have a json body\", function () {",
									"     pm.response.to.be.success;",
									"     pm.response.to.be.withBody;",
									"     pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"Check if created Username matches: \" + userName, function () {",
									"    pm.expect(jsonData.name).to.eql(userName);",
									"});"
								],
								"type": "text/javascript",
								"id": "06f5fbc6-6cec-42c6-a1e5-fa6ebc367246"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "IdentityId",
								"type": "text",
								"value": "{{administratorUserIdentityId}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"identityId\": \"999\",\n    \"name\": \"{{userName}}\",\n    \"email\": \"postmantest_UserToFollow@example.com\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{apiUrl}}/api/User",
							"host": [
								"{{apiUrl}}"
							],
							"path": [
								"api",
								"User"
							]
						}
					},
					"response": []
				},
				{
					"name": "CreateProjectToBeDeletedByUnauthorizedRoles",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"pm.environment.set(\"projectToBeDeletedByUnauthorizedRoles\", jsonData.id);"
								],
								"type": "text/javascript",
								"id": "aaabf699-0612-4f94-8a8d-71ba96997d0e"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "IdentityId",
								"value": "{{administratorUserIdentityId}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"{{projectName}}\",\r\n  \"description\": \"postmantest_ProjectToBeDeletedByUnauthorizedRoles\",\r\n  \"shortDescription\": \"postmantest_ProjectToBeDeletedByUnauthorizedRoles\",\r\n  \"uri\": \"postmantest_ProjectToBeDeletedByUnauthorizedRoles\",\r\n  \"collaborators\": [\r\n    {\r\n      \"fullName\": \"postmantest_ProjectToBeDeletedByUnauthorizedRoles\",\r\n      \"role\": \"postmantest_ProjectToBeDeletedByUnauthorizedRoles\"\r\n    }\r\n  ],\r\n  \"created\": \"2020-04-20T08:24:26.693Z\",\r\n  \"updated\": \"2020-04-20T08:24:26.693Z\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{apiUrl}}/api/Project",
							"host": [
								"{{apiUrl}}"
							],
							"path": [
								"api",
								"Project"
							]
						}
					},
					"response": []
				}
			],
			"description": "Warmup the API to ensure fast response times",
			"protocolProfileBehavior": {}
		},
		{
			"name": "ACL",
			"item": [
				{
					"name": "Administrator",
					"item": [
						{
							"name": "User",
							"item": [
								{
									"name": "User-CreateUser-Administrator",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var userName = pm.environment.get(\"userName\");",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.environment.set(\"createdUserId\", jsonData.id);",
													"pm.environment.set(\"createdUserIdentityId\", jsonData.identityId);",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Check if created Username matches: \" + userName, function () {",
													"    pm.expect(jsonData.name).to.eql(userName);",
													"});",
													""
												],
												"type": "text/javascript",
												"id": "8c4d02a9-de2a-4ba6-8185-f851225d312d"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"id": "2931ecb9-44a4-45ce-af92-3725240dec76"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{administratorUserIdentityId}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"identityId\": \"999\",\n    \"name\": \"{{userName}}\",\n    \"email\": \"User-CreateUser-Administrator@example.com\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/User",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"User"
											]
										}
									},
									"response": []
								},
								{
									"name": "User-GetUser-Administrator",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var createdUserId = parseInt(pm.environment.get(\"createdUserId\"));",
													"var createdUserIdentityId = pm.environment.get(\"createdUserIdentityId\");",
													"var userName = pm.environment.get(\"userName\");",
													"",
													"var jsonData = pm.response.json();",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Check if updated identity Id matches: \" + createdUserIdentityId, function () {",
													"    pm.expect(jsonData.identityId).to.eql(createdUserIdentityId);",
													"});",
													"",
													"pm.test(\"Check if updated Id matches: \" + createdUserId, function () {",
													"    pm.expect(jsonData.id).to.eql(createdUserId);",
													"});",
													"",
													"pm.test(\"Check previously created UserName with id \" + userName, function () {",
													"    pm.expect(jsonData.name).to.eql(userName);",
													"});"
												],
												"type": "text/javascript",
												"id": "48628f0b-15e9-4071-bf61-e24f185ee392"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{administratorUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/User/{{createdUserId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"User",
												"{{createdUserId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "User-UpdateUser-Administrator",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"var userName = pm.environment.get(\"userNameUpdated\");",
													"pm.environment.set(\"userName\", userName);",
													"",
													"var jsonData = pm.response.json();",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.ok;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Check if updated username matches: \" + userName, function () {",
													"    pm.expect(jsonData.name).to.eql(userName);",
													"});"
												],
												"type": "text/javascript",
												"id": "ed4a201a-f0ed-4d58-9542-645b8e78a53e"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{administratorUserIdentityId}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"name\": \"{{userNameUpdated}}\",\r\n  \"email\": \"User-CreateUser-Administrator\",\r\n  \"identityId\": \"{{createdUserIdentityId}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/User/{{createdUserId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"User",
												"{{createdUserId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "User-GetUpdatedUser-Administrator",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var createdUserId = parseInt(pm.environment.get(\"createdUserId\"));",
													"var createdUserIdentityId = pm.environment.get(\"createdUserIdentityId\");",
													"var userName = pm.environment.get(\"userName\")",
													"",
													"var jsonData = pm.response.json();",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Check if updated identity Id matches: \" + createdUserIdentityId, function () {",
													"    pm.expect(jsonData.identityId).to.eql(createdUserIdentityId);",
													"});",
													"",
													"pm.test(\"Check if updated Id matches: \" + createdUserId, function () {",
													"    pm.expect(jsonData.id).to.eql(createdUserId);",
													"});",
													"",
													"pm.test(\"Check if updated username matches: \" + userName, function () {",
													"    pm.expect(jsonData.name).to.eql(userName);",
													"});"
												],
												"type": "text/javascript",
												"id": "247dab4d-d3f7-4b28-b309-8392c5179ca6"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{administratorUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/User/{{createdUserId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"User",
												"{{createdUserId}}"
											],
											"query": [
												{
													"key": "",
													"value": "",
													"disabled": true
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "User-GetUser-Self-Administrator",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var administratorUserIdentityId = parseInt(pm.environment.get(\"administratorUserIdentityId\"));",
													"",
													"var jsonData = pm.response.json();",
													"pm.environment.set(\"administratorUserId\", jsonData.id);",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.ok;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Identity ID is correct and matching: \" + administratorUserIdentityId, function () {",
													"    pm.expect(parseInt(jsonData.identityId)).to.eql(administratorUserIdentityId);",
													"});"
												],
												"type": "text/javascript",
												"id": "7242359a-880a-4678-a479-e259de7d3273"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{administratorUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/User",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"User"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "FollowUser",
							"item": [
								{
									"name": "User-FollowUser-Administrator",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"var userIdToFollow = pm.environment.get(\"userIdToFollow\");",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.success;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Check if created Username matches: \" + userIdToFollow, function () {",
													"    pm.expect(jsonData.id).to.eql(userIdToFollow);",
													"});"
												],
												"type": "text/javascript",
												"id": "074f5004-254b-4d56-bd0b-ae1bb3d2f91d"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{administratorUserIdentityId}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/User/follow/{{userIdToFollow}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"User",
												"follow",
												"{{userIdToFollow}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "User-UnFollowUser-Administrator",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript",
												"id": "6ad1c84e-e591-411c-9f85-bdafbb45a84f"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{administratorUserIdentityId}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/User/follow/{{userIdToFollow}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"User",
												"follow",
												"{{userIdToFollow}}"
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										],
										"id": "8c4d85e1-209c-4f7a-87cb-280dfbf4dd5c"
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										],
										"id": "eb836c82-1baa-471a-8427-ba2135b9e1bf"
									}
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Project",
							"item": [
								{
									"name": "Project-CreateProject-Administrator",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var administratorUserId = parseInt(pm.environment.get(\"administratorUserId\"));",
													"var projectName = pm.environment.get(\"projectName\");",
													"var adminUserName = pm.environment.get(\"adminUserName\");",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.environment.set(\"projectId\", jsonData.id);",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.success;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Project Name is set correctly and matching: \" + projectName, function () {",
													"    pm.expect(jsonData.name).to.eql(projectName);",
													"});",
													"",
													"pm.test(\"User Name is correct and matching: \" + adminUserName, function () {",
													"    pm.expect(jsonData.user.name).to.eql(adminUserName);",
													"});",
													"",
													"pm.test(\"Identity ID is correct and matching: \" + administratorUserId, function () {",
													"    pm.expect(parseInt(jsonData.user.id)).to.eql(administratorUserId);",
													"});"
												],
												"type": "text/javascript",
												"id": "6e74df34-f7f3-4f5e-bcf0-c8e5e24a4e6d"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{administratorUserIdentityId}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"name\": \"{{projectName}}\",\r\n  \"description\": \"postmantest_Project-CreateProject-Administrator\",\r\n  \"shortDescription\": \"postmantest_Project-CreateProject-Administrator\",\r\n  \"uri\": \"postmantest_Project-CreateProject-Administrator\",\r\n  \"collaborators\": [\r\n    {\r\n      \"fullName\": \"postmantest_Project-CreateProject-Administrator\",\r\n      \"role\": \"postmantest_Project-CreateProject-Administrator\"\r\n    }\r\n  ],\r\n  \"created\": \"2020-04-20T08:24:26.693Z\",\r\n  \"updated\": \"2020-04-20T08:24:26.693Z\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/Project",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Project"
											]
										}
									},
									"response": []
								},
								{
									"name": "Project-GetAllProjects-Administrator",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var projectName = pm.environment.get(\"projectName\");",
													"",
													"var jsonData = pm.response.json();",
													"",
													"var foundAt;",
													"",
													"function findProject(jsonData, name) {",
													"    for (var i = 0; i < jsonData.results.length; i++) {",
													"        if (jsonData.results[i].name == name) {",
													"            return i;",
													"        }",
													"    }",
													"    return -1;",
													"}",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Project: \" + projectName + \" is in list\", function () {",
													"    foundAt = findProject(jsonData, projectName);",
													"    pm.expect(foundAt).to.not.eql(-1);",
													"});",
													"",
													"pm.test(\"Project Name is set correctly and matching: \" + projectName, function () {",
													"    pm.expect(jsonData.results[foundAt].name).to.eql(projectName);",
													"});"
												],
												"type": "text/javascript",
												"id": "14118082-13f3-4527-9a8a-fe9790e9b3ee"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{administratorUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Project",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Project"
											]
										}
									},
									"response": []
								},
								{
									"name": "Project-GetProject-Administrator",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var projectId = parseInt(pm.environment.get(\"projectId\"));",
													"var projectName = pm.environment.get(\"projectName\");",
													"var administratorUserId = parseInt(pm.environment.get(\"administratorUserId\"));",
													"var adminUserName = pm.environment.get(\"adminUserName\");",
													"",
													"var jsonData = pm.response.json();",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"ProjectName is set correctly and matching: \" + projectName, function () {",
													"    pm.expect(jsonData.name).to.eql(projectName);",
													"});",
													"",
													"pm.test(\"User Name is correct and matching: \" + adminUserName, function () {",
													"    pm.expect(jsonData.user.name).to.eql(adminUserName);",
													"});",
													"",
													"pm.test(\"Identity ID is correct and matching: \" + administratorUserId, function () {",
													"    pm.expect(parseInt(jsonData.user.id)).to.eql(administratorUserId);",
													"});"
												],
												"type": "text/javascript",
												"id": "bd75c234-ddc5-4faf-8679-dded18c91e68"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{administratorUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Project/{{projectId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Project",
												"{{projectId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Project-UpdateProject-Administrator",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var projectName = pm.environment.get(\"projectNameUpdated\");",
													"pm.environment.set(\"projectName\", projectName);",
													"",
													"var jsonData = pm.response.json();",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.ok;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Project Name is set correctly and matching: \" + projectName, function () {",
													"    pm.expect(jsonData.name).to.eql(projectName);",
													"});"
												],
												"type": "text/javascript",
												"id": "54a80d87-f3b7-4520-b10f-0e24cbef2bd7"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{administratorUserIdentityId}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"name\": \"{{projectNameUpdated}}\",\r\n  \"description\": \"postmantest_Project-UpdateProject-Administrator\",\r\n  \"shortDescription\": \"postmantest_Project-UpdateProject-Administrator\",\r\n  \"uri\": \"postmantest_Project-UpdateProject-Administrator\",\r\n  \"collaborators\": [\r\n    {\r\n      \"fullName\": \"postmantest_Project-UpdateProject-Administrator\",\r\n      \"role\": \"postmantest_Project-UpdateProject-Administrator\"\r\n    }\r\n  ],\r\n  \"created\": \"2020-04-20T08:24:26.693Z\",\r\n  \"updated\": \"2020-04-20T08:24:26.693Z\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/Project/{{projectId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Project",
												"{{projectId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Project-GetUpdatedProject-Administrator",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var administratorUserId = parseInt(pm.environment.get(\"administratorUserId\"));",
													"var projectName = pm.environment.get(\"projectName\");",
													"var adminUserName = pm.environment.get(\"adminUserName\");",
													"",
													"var jsonData = pm.response.json();",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"ProjectName is set correctly and matching: \" + projectName, function () {",
													"    pm.expect(jsonData.name).to.eql(projectName);",
													"});",
													"",
													"pm.test(\"User Name is correct and matching: \" + adminUserName, function () {",
													"    pm.expect(jsonData.user.name).to.eql(adminUserName);",
													"});",
													"",
													"pm.test(\"Identity ID is correct and matching: \" + administratorUserId, function () {",
													"    pm.expect(parseInt(jsonData.user.id)).to.eql(administratorUserId);",
													"});"
												],
												"type": "text/javascript",
												"id": "c805aa9b-6224-458d-8634-6a4f0b1b8032"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{administratorUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Project/{{projectId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Project",
												"{{projectId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Project-GetProject-NonExisting-Administrator",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 404\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"    pm.response.to.be.notFound;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json;",
													"});"
												],
												"type": "text/javascript",
												"id": "0959e88c-cb3d-45bb-b9d1-a38809daf662"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{administratorUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Project/98989",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Project",
												"98989"
											]
										}
									},
									"response": []
								},
								{
									"name": "Project-LikeProject-Administrator",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"eval(pm.environment.get(\"commonTests\"))();\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Response must be valid and have a json body\", function () {\r",
													"     pm.response.to.be.ok;\r",
													"     pm.response.to.be.withBody;\r",
													"     pm.response.to.be.json;\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"id": "6e63284f-2e7e-4ea7-a776-136fd1f147bc"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "IdentityId",
												"value": "{{administratorUserIdentityId}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Project/like/{{projectId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Project",
												"like",
												"{{projectId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Project-DeleteLikeProject-Administrator",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"eval(pm.environment.get(\"commonTests\"))();\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Response must be valid and have a json body\", function () {\r",
													"     pm.response.to.be.ok;\r",
													"     pm.response.to.be.withBody;\r",
													"     pm.response.to.be.json;\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"id": "2a697b5a-b056-42f5-b49d-757f46a2e264"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "IdentityId",
												"value": "{{administratorUserIdentityId}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Project/like/{{projectId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Project",
												"like",
												"{{projectId}}"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "FollowProject",
							"item": [
								{
									"name": "Project-FollowProject-Administrator",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"var projectId = pm.environment.get(\"projectIdToFollow\");",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.success;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Check if created Username matches: \" + projectId, function () {",
													"    pm.expect(jsonData.id).to.eql(projectId);",
													"});"
												],
												"type": "text/javascript",
												"id": "fe8ea48c-8975-4788-b1b9-337d6ba9ac85"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{administratorUserIdentityId}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/project/follow/{{projectIdToFollow}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"project",
												"follow",
												"{{projectIdToFollow}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Project-UnFollowProject-Administrator",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript",
												"id": "e861293e-f669-4962-91fc-c4cfa6849df2"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{administratorUserIdentityId}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/project/follow/{{projectIdToFollow}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"project",
												"follow",
												"{{projectIdToFollow}}"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Highlight",
							"item": [
								{
									"name": "Highlight-CreateHighlight-Administrator",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var identityId = parseInt(pm.environment.get(\"identityId\"));",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.environment.set(\"highlightId\", jsonData.id);",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.success;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});",
													""
												],
												"type": "text/javascript",
												"id": "0307d6f0-dbeb-45ea-98aa-3cfc44f7a90d"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"var current_timestamp = new Date();\r",
													"postman.setEnvironmentVariable(\"current_timestamp\", current_timestamp.toISOString());\r",
													"\r",
													"var future_timestamp = new Date(Date.now() +(2 * 86400000));\r",
													"postman.setEnvironmentVariable(\"future_timestamp\", future_timestamp.toISOString());\r",
													""
												],
												"type": "text/javascript",
												"id": "54ced88e-dd9c-44ec-a472-063f8b3248c2"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{administratorUserIdentityId}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"projectId\": {{projectId}},\r\n  \"startDate\": \"{{current_timestamp}}\",\r\n  \"endDate\": \"{{future_timestamp}}\",\r\n  \"description\" : \"postmantest_Highlight-CreateHighlight-Administrator\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/Highlight",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Highlight"
											]
										}
									},
									"response": []
								},
								{
									"name": "Highlight-GetAllActiveHighlights-Administrator",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var projectId = pm.environment.get(\"projectId\");",
													"",
													"var jsonData = pm.response.json();",
													"",
													"var foundAt;",
													"",
													"function findItem(jsonData, item) {",
													"    for (var i = 0; i < jsonData.length; i++) {",
													"        if (jsonData[i].projectId == item) {",
													"            return i;",
													"        }",
													"    }",
													"    return -1;",
													"}",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Highlight is in list and matching: \" + projectId, function () {",
													"    foundAt = findItem(jsonData, projectId);",
													"    pm.expect(foundAt).to.not.eql(-1);",
													"});"
												],
												"type": "text/javascript",
												"id": "d3e80d43-c4e6-4e9d-b013-00d978d1f8d0"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"value": "{{administratorUserIdentityId}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Highlight",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Highlight"
											]
										}
									},
									"response": []
								},
								{
									"name": "Highlight-GetHighlight-Administrator",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var identityId = parseInt(pm.environment.get(\"identityId\"));",
													"var highlightId = parseInt(pm.environment.get(\"highlightId\"));",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.environment.set(\"highlightStartDate\", jsonData.startDate);",
													"pm.environment.set(\"highlightEndDate\", jsonData.endDate);",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Highlight Id matches: \" + highlightId, function () {",
													"    pm.expect(jsonData.id).to.eql(highlightId);",
													"});"
												],
												"type": "text/javascript",
												"id": "6a9d8151-27d2-44d0-be21-64e9dfdfb405"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"value": "{{administratorUserIdentityId}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Highlight/{{highlightId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Highlight",
												"{{highlightId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Highlight-GetHighlight-ByProject-Administrator",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var identityId = parseInt(pm.environment.get(\"identityId\"));",
													"var projectId = parseInt(pm.environment.get(\"projectId\"));",
													"var highlightId = parseInt(pm.environment.get(\"highlightId\"));",
													"",
													"var jsonData = pm.response.json();",
													"",
													"var foundAt;",
													"",
													"function findHighlightId(jsonData, item) {",
													"    for (var i = 0; i < jsonData.length; i++) {",
													"        if (jsonData[i].id == item) {",
													"            return i;",
													"        }",
													"    }",
													"    return -1;",
													"}",
													"",
													"function findProjectId(jsonData, item) {",
													"    for (var i = 0; i < jsonData.length; i++) {",
													"        if (jsonData[i].projectId == item) {",
													"            return i;",
													"        }",
													"    }",
													"    return -1;",
													"}",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Project is in list and matching: \" + projectId, function () {",
													"    foundAt = findProjectId(jsonData, projectId);",
													"    pm.expect(foundAt).to.not.eql(-1);",
													"});",
													"",
													"pm.test(\"Highlight is in list and matching:\" + highlightId, function () {",
													"    foundAt = findHighlightId(jsonData, highlightId);",
													"    pm.expect(foundAt).to.not.eql(-1);",
													"});"
												],
												"type": "text/javascript",
												"id": "27c00be2-de2f-43a5-b4d6-e26a4905732d"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{administratorUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Highlight/Project/{{projectId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Highlight",
												"Project",
												"{{projectId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Highlight-UpdateHighlight-Administrator",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var highlightStartDate = pm.environment.get(\"highlightStartDate\");",
													"var highlightId = parseInt(pm.environment.get(\"highlightId\"));",
													"",
													"var jsonData = pm.response.json();",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.ok;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Highlight Id matches: \" + highlightId, function () {",
													"    pm.expect(jsonData.id).to.eql(highlightId);",
													"});"
												],
												"type": "text/javascript",
												"id": "78fc4379-b19e-4b0c-b9de-268a0d3aed84"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"var current_timestamp = new Date();\r",
													"postman.setEnvironmentVariable(\"current_timestamp\", current_timestamp.toISOString());"
												],
												"type": "text/javascript",
												"id": "82518294-086b-4d51-af88-3c02f62896cd"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{administratorUserIdentityId}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"projectId\": \"{{projectId}}\",\r\n  \"startDate\": \"{{current_timestamp}}\",\r\n  \"endDate\": \"{{future_timestamp}}\",\r\n  \"description\" : \"postmantest_Highlight-UpdateHighlight-Administrator\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/Highlight/{{highlightId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Highlight",
												"{{highlightId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Highlight-GetUpdatedHighlight-Administrator",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var highlightUpdateTimestamp = pm.environment.get(\"current_timestamp\");",
													"var highlightEndDate = pm.environment.get(\"highlightEndDate\");",
													"var highlightId = pm.environment.get(\"highlightId\");",
													"var jsonData = pm.response.json();",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Highlight Id matches: \" + highlightId, function () {",
													"    pm.expect(jsonData.id).to.eql(highlightId);",
													"});"
												],
												"type": "text/javascript",
												"id": "5690f2fa-d52b-4bef-8ba7-3873ddea3b4e"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"value": "{{administratorUserIdentityId}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Highlight/{{highlightId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Highlight",
												"{{highlightId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Highlight-GetHighlight-NonExisting-Administrator",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 404\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"    pm.response.to.be.notFound;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json;",
													"});",
													""
												],
												"type": "text/javascript",
												"id": "78825681-14a0-41af-890d-f9a4201cf037"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{administratorUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Highlight/98989",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Highlight",
												"98989"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Embed",
							"item": [
								{
									"name": "Embed-CreateEmbed-Administrator",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"pm.environment.set(\"embedGuid\", jsonData.guid);",
													"pm.environment.set(\"embeddedProjectId\", jsonData.project.id);",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.success;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});",
													""
												],
												"type": "text/javascript",
												"id": "425d9290-0b03-4be3-af76-a6b8ef035bea"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{administratorUserIdentityId}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"projectId\": {{projectId}}\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/Embed",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Embed"
											]
										}
									},
									"response": []
								},
								{
									"name": "Embed-GetAllEmbeds-Administrator",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var embedGuid = pm.environment.get(\"embedGuid\");",
													"",
													"var jsonData = pm.response.json();",
													"",
													"var foundAt;",
													"",
													"function findItem(jsonData, item) {",
													"    for (var i = 0; i < jsonData.length; i++) {",
													"        if (jsonData[i].guid == item) {",
													"            return i;",
													"        }",
													"    }",
													"    return -1;",
													"}",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Embed is in list and matches: \" + embedGuid, function () {",
													"    foundAt = findItem(jsonData, embedGuid);",
													"    pm.expect(foundAt).to.not.eql(-1);",
													"});"
												],
												"type": "text/javascript",
												"id": "9511d07f-64f0-45f9-9584-cf4274249bc6"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{administratorUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Embed",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Embed"
											]
										}
									},
									"response": []
								},
								{
									"name": "Embed-GetEmbed-Administrator",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var embeddedProjectId = parseInt(pm.environment.get(\"embeddedProjectId\"))",
													"",
													"var jsonData = pm.response.json();",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Embed matches: \" + embeddedProjectId, function () {",
													"    pm.expect(jsonData.id).to.eql(embeddedProjectId);",
													"});"
												],
												"type": "text/javascript",
												"id": "c2e5dc43-23ed-444a-91f5-ec36492e5461"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{administratorUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Embed/{{embedGuid}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Embed",
												"{{embedGuid}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Embed-GetEmbed-NonExisting-Administrator",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 404\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"    pm.response.to.be.notFound;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json;",
													"});",
													""
												],
												"type": "text/javascript",
												"id": "8753cfed-8a4a-45d2-8a2a-7a6e0c6e9cac"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{administratorUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Embed/cdaadc49-b4b9-4c11-8937-e602174cba30",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Embed",
												"cdaadc49-b4b9-4c11-8937-e602174cba30"
											]
										}
									},
									"response": []
								},
								{
									"name": "Embed-GetEmbed-NonExisting-NoGUID-Administrator",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 404\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"    pm.response.to.be.notFound;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json;",
													"});",
													""
												],
												"type": "text/javascript",
												"id": "da9c35c8-f1f6-4c44-9f28-ea43cc4cb2c4"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{administratorUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Embed/98989",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Embed",
												"98989"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Role",
							"item": [
								{
									"name": "Role-CreateRole-Administrator",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var scopeName = pm.environment.get(\"scopeName\");",
													"var roleName = pm.environment.get(\"roleName\");",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.environment.set(\"roleId\", jsonData.id);",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.success;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Role Name is set correctly and matching: \" + roleName, function () {",
													"    pm.expect(jsonData.name).to.eql(roleName);",
													"});",
													"",
													"pm.test(\"Scope is correct and matching: \" + scopeName, function () {",
													"    pm.expect(jsonData.scopes.scope).to.eql(scopeName);",
													"});"
												],
												"type": "text/javascript",
												"id": "f8569e37-3e87-434b-a3a9-46a34178acc2"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{administratorUserIdentityId}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"name\": \"{{roleName}}\",\r\n  \"scopes\": [\r\n    {\r\n      \"scope\": \"EmbedWrite\"\r\n    }\r\n  ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/Role",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Role"
											]
										},
										"description": "Is deleted in the latest cleanup folder"
									},
									"response": []
								},
								{
									"name": "Role-GetAllRoles-Administrator",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var roleName = pm.environment.get(\"roleName\");",
													"",
													"var jsonData = pm.response.json();",
													"",
													"var foundAt;",
													"",
													"function findProject(jsonData, name) {",
													"    for (var i = 0; i < jsonData.length; i++) {",
													"        if (jsonData[i].name == name) {",
													"            return i;",
													"        }",
													"    }",
													"    return -1;",
													"}",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Role: \" + roleName + \" is in list\", function () {",
													"    foundAt = findProject(jsonData, roleName);",
													"    pm.expect(foundAt).to.not.eql(-1);",
													"});",
													"",
													"pm.test(\"Role Name is set correctly with matching: \" + roleName, function () {",
													"    pm.expect(jsonData[foundAt].name).to.eql(roleName);",
													"});"
												],
												"type": "text/javascript",
												"id": "b13e6c0f-7b69-4bf3-a575-0587228940bd"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{administratorUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Role",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Role"
											]
										}
									},
									"response": []
								},
								{
									"name": "Scope-GetAllScopes-Administrator",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var identityId = parseInt(pm.environment.get(\"identityId\"));",
													"var projectName = pm.environment.get(\"projectName\");",
													"",
													"var jsonData = pm.response.json();",
													"",
													"var foundAt;",
													"",
													"function findProject(jsonData, name) {",
													"    for (var i = 0; i < jsonData.length; i++) {",
													"        if (jsonData[i].name == name) {",
													"            return i;",
													"        }",
													"    }",
													"    return -1;",
													"}",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json;",
													"});"
												],
												"type": "text/javascript",
												"id": "c3baf15e-1ea6-4725-a215-6e4c5b64ccd9"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{administratorUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Role/Scopes",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Role",
												"Scopes"
											]
										}
									},
									"response": []
								},
								{
									"name": "Role-GetRole-Administrator",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var roleId = parseInt(pm.environment.get(\"roleId\"));",
													"var roleName = pm.environment.get(\"roleName\");",
													"",
													"var jsonData = pm.response.json();",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Role Name is set correctly\", function () {",
													"    pm.expect(jsonData.name).to.eql(roleName);",
													"});"
												],
												"type": "text/javascript",
												"id": "4cfc8cb9-f40c-4b6d-9403-5d9195cf3171"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{administratorUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Role/{{roleId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Role",
												"{{roleId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Role-UpdateRole-Administrator",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var updatedRoleName = pm.environment.get(\"updatedRoleName\");",
													"",
													"var jsonData = pm.response.json();",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.ok;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Role Name is set correctly\", function () {",
													"    pm.expect(jsonData.name).to.eql(updatedRoleName);",
													"});"
												],
												"type": "text/javascript",
												"id": "df858172-9436-41ea-8093-aa61fb87b910"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{administratorUserIdentityId}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"name\": \"{{updatedRoleName}}\",\r\n  \"scopes\": [\r\n    {\r\n      \"scope\": \"EmbedWrite\"\r\n    }\r\n  ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/Role/{{roleId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Role",
												"{{roleId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Role-GetUpdatedRole-Administrator",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var updatedRoleName = pm.environment.get(\"updatedRoleName\");",
													"",
													"var jsonData = pm.response.json();",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Role Name is set correctly and matches: \" + updatedRoleName, function () {",
													"    pm.expect(jsonData.name).to.eql(updatedRoleName);",
													"});"
												],
												"type": "text/javascript",
												"id": "cbb3ad32-8f7e-4cd2-b937-1ca368d534b0"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{administratorUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Role/{{roleId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Role",
												"{{roleId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Role-SetRole-Administrator",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var roleId = parseInt(pm.environment.get(\"roleId\"));",
													"",
													"var jsonData = pm.response.json();",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.ok;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Role is set correctly and matches: \" + roleId, function () {",
													"    pm.expect(jsonData.role.id).to.eql(roleId);",
													"});"
												],
												"type": "text/javascript",
												"id": "72bca94c-084e-411e-9c1d-a87a4bc672a3"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{administratorUserIdentityId}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/Role/setRole?userId={{createdUserId}}&roleId={{roleId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Role",
												"setRole"
											],
											"query": [
												{
													"key": "userId",
													"value": "{{createdUserId}}",
													"description": "Id of the user that we want to update"
												},
												{
													"key": "roleId",
													"value": "{{roleId}}",
													"description": "Id of the role that you want to update the user with"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "User-GetRole-Administrator",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var roleId = parseInt(pm.environment.get(\"roleId\"));",
													"",
													"var jsonData = pm.response.json();",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Check if user has role that matches: \" + roleId, function () {",
													"    pm.expect(jsonData.role.id).to.eql(roleId);",
													"});"
												],
												"type": "text/javascript",
												"id": "4c2e178a-84c9-469c-bb04-c71a3f73f49e"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{administratorUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/User/{{createdUserId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"User",
												"{{createdUserId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Role-GetRole-NonExisting-Administrator",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 404\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"    pm.response.to.be.notFound;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json;",
													"});",
													""
												],
												"type": "text/javascript",
												"id": "b2b99103-7cfb-4147-a44e-e78559aa797f"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{administratorUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Role/98989",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Role",
												"98989"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Search",
							"item": [
								{
									"name": "Search-SearchInternal-Administrator",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var projectName = pm.environment.get(\"projectName\");",
													"",
													"var jsonData = pm.response.json();",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.ok;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Project Name is set correctly and matching: \" + projectName, function () {",
													"    pm.expect(jsonData.results[0].name).to.eql(projectName);",
													"});"
												],
												"type": "text/javascript",
												"id": "5e268990-8ec9-440c-ae6b-c049e4b2574d"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{administratorUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Search/internal/{{projectId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Search",
												"internal",
												"{{projectId}}"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Wizard",
							"item": [],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Institution",
							"item": [
								{
									"name": "Institution-CreateInstitution-Administrator",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var institutionName = pm.environment.get(\"institutionName\");",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.environment.set(\"createdInstitutionId\", jsonData.id);",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.success;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Check if created Name matches: \" + institutionName, function () {",
													"    pm.expect(jsonData.name).to.eql(institutionName);",
													"});"
												],
												"type": "text/javascript",
												"id": "467fd54f-41ce-4668-8207-9a00a03ec117"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{administratorUserIdentityId}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"{{institutionName}}\",\n    \"description\": \"postmantest_Institution-CreateInstitution-Administrator\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/Institution",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Institution"
											]
										}
									},
									"response": []
								},
								{
									"name": "Institution-GetInstitution-Administrator",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var createdInstitutionId = parseInt(pm.environment.get(\"createdInstitutionId\"));",
													"var institutionName = pm.environment.get(\"institutionName\");",
													"",
													"var jsonData = pm.response.json();",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Check if updated Id matches: \" + createdInstitutionId, function () {",
													"    pm.expect(jsonData.id).to.eql(createdInstitutionId);",
													"});",
													"",
													"pm.test(\"Check previously created UserName with id \" + institutionName, function () {",
													"    pm.expect(jsonData.name).to.eql(institutionName);",
													"});"
												],
												"type": "text/javascript",
												"id": "781fea31-5aa4-4aa8-9eab-5ca47e21af4b"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{administratorUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Institution/{{createdInstitutionId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Institution",
												"{{createdInstitutionId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Institution-UpdateInstitution-Administrator",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var institutionName = pm.environment.get(\"updatedInstitutionName\");",
													"pm.environment.set(\"institutionName\", institutionName);",
													"",
													"var jsonData = pm.response.json();",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.ok;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Check if updated Institution Name matches: \" + institutionName, function () {",
													"    pm.expect(jsonData.name).to.eql(institutionName);",
													"});"
												],
												"type": "text/javascript",
												"id": "cfa8c230-2406-48d3-ac27-f721ace68966"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{administratorUserIdentityId}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"name\": \"{{updatedInstitutionName}}\",\r\n  \"description\": \"postmantest_Institution-UpdateInstitution-Administrator\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/Institution/{{createdInstitutionId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Institution",
												"{{createdInstitutionId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Institution-GetUpdatedInstitution-Administrator",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var createdInstitutionId = parseInt(pm.environment.get(\"createdInstitutionId\"));",
													"var institutionName = pm.environment.get(\"institutionName\")",
													"",
													"var jsonData = pm.response.json();",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Check if updated Institution Id matches: \" + createdInstitutionId, function () {",
													"    pm.expect(jsonData.id).to.eql(createdInstitutionId);",
													"});",
													"",
													"pm.test(\"Check if updated institution matches: \" + institutionName, function () {",
													"    pm.expect(jsonData.name).to.eql(institutionName);",
													"});"
												],
												"type": "text/javascript",
												"id": "1dcfaf9e-7142-45cf-8754-c1c0acdc2532"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{administratorUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Institution/{{createdInstitutionId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Institution",
												"{{createdInstitutionId}}"
											],
											"query": [
												{
													"key": "",
													"value": "",
													"disabled": true
												}
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "File",
							"item": [
								{
									"name": "File-CreateFile-Administrator",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.environment.set(\"adminFileId\", jsonData.id)\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Response time is less than 800ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(800);\r",
													"});\r",
													"\r",
													"pm.test(\"Response must be valid and have a json body\", function () {\r",
													"     pm.response.to.be.success;\r",
													"     pm.response.to.be.withBody;\r",
													"     pm.response.to.be.json;\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript",
												"id": "06550f25-7762-4bee-b16d-06f27d447ebc"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "IdentityId",
												"value": "{{administratorUserIdentityId}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "File",
													"type": "file",
													"src": "Postman/testimage.png"
												}
											]
										},
										"url": {
											"raw": "{{apiUrl}}/api/File",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"File"
											]
										}
									},
									"response": []
								},
								{
									"name": "Files-GetAll-Adminstrator",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);\r",
													"});\r",
													"\r",
													"pm.test(\"Response must be valid and have a json body\", function () {\r",
													"     pm.response.to.be.success;\r",
													"     pm.response.to.be.withBody;\r",
													"     pm.response.to.be.json;\r",
													"});"
												],
												"type": "text/javascript",
												"id": "af4e37e0-c032-4b15-aae2-d7b26f12d449"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{administratorUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/File",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"File"
											]
										}
									},
									"response": []
								},
								{
									"name": "File-Delete-Administrator",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);\r",
													"});\r",
													"\r",
													"pm.test(\"Response must be valid\", function () {\r",
													"     pm.response.to.be.ok;\r",
													"});"
												],
												"type": "text/javascript",
												"id": "23dc53ae-cd70-459b-a1b9-71f89c5cb0bc"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "IdentityId",
												"value": "{{administratorUserIdentityId}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/File/{{adminFileId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"File",
												"{{adminFileId}}"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "CallToActionOption",
							"item": [
								{
									"name": "CallToActionOption-CreateCallToActionOption-Administrator",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"pm.environment.set(\"callToActionOptionId\", jsonData.id);",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.success;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Call to action option type is lowercase\", function () {",
													"    pm.expect(jsonData.type).to.eql(jsonData.type.toLowerCase());",
													"});",
													"",
													"pm.test(\"Call to action option value is lowercase\", function () {",
													"    pm.expect(jsonData.value).to.eql(jsonData.value.toLowerCase());",
													"});",
													""
												],
												"type": "text/javascript",
												"id": "3a9d0a95-b97c-462d-ae13-545470a7d96a"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{administratorUserIdentityId}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"type\": \"postman_CallToActionOption-CreateCallToActionOption-Administrator\",\r\n  \"value\": \"postman_CallToActionOption-CreateCallToActionOption-Administrator\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/CallToActionOption",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"CallToActionOption"
											]
										}
									},
									"response": []
								},
								{
									"name": "CallToActionOption-GetAllCallToActionOptions-Administrator",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var optionId = parseInt(pm.environment.get(\"callToActionOptionId\"));",
													"",
													"var jsonData = pm.response.json();",
													"",
													"var foundAt;",
													"",
													"function findOption(jsonData, id) {",
													"    for (var i = 0; i < jsonData.length; i++) {",
													"        if (jsonData[i].id == id) {",
													"            return i;",
													"        }",
													"    }",
													"    return -1;",
													"}",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.ok;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Call to action option with id: \" + optionId + \" is in list\", function () {",
													"    foundAt = findOption(jsonData, optionId);",
													"    pm.expect(foundAt).to.not.eql(-1);",
													"});",
													""
												],
												"type": "text/javascript",
												"id": "35e364db-5bbf-4cc7-9d1a-9938c9c1f06a"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{administratorUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/CallToActionOption",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"CallToActionOption"
											]
										}
									},
									"response": []
								},
								{
									"name": "CallToActionOption-GetCallToActionOptionById-Administrator",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"pm.environment.set(\"callToActionOptionType\", jsonData.type);",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.ok;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Call to action option type is lowercase\", function () {",
													"    pm.expect(jsonData.type).to.eql(jsonData.type.toLowerCase());",
													"});",
													"",
													"pm.test(\"Call to action option value is lowercase\", function () {",
													"    pm.expect(jsonData.value).to.eql(jsonData.value.toLowerCase());",
													"});",
													""
												],
												"type": "text/javascript",
												"id": "55e36b86-5b4f-48a1-bed3-5ffb615d9e92"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{administratorUserIdentityId}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"type\": \"Title\",\r\n  \"value\": \"Collaborate\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/CallToActionOption/{{callToActionOptionId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"CallToActionOption",
												"{{callToActionOptionId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "CallToActionOption-GetCallToActionOptionByType-Administrator",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var callToActionOptionId = parseInt(pm.environment.get(\"callToActionOptionId\"));",
													"",
													"var jsonData = pm.response.json();",
													"",
													"function findOptionType(jsonData, id) {",
													"    for (var i = 0; i < jsonData.length; i++) {",
													"        if (jsonData[i].id == id) {",
													"            return i;",
													"        }",
													"    }",
													"    return -1;",
													"}",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.ok;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Call to action option id is \" + callToActionOptionId, function() {",
													"    foundAt = findOptionType(jsonData, callToActionOptionId);",
													"    pm.expect(foundAt).to.not.eql(-1);",
													"});",
													""
												],
												"type": "text/javascript",
												"id": "773cfd6c-226c-4b06-a7ca-9e9f8564ce88"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{administratorUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/CallToActionOption/type/{{callToActionOptionType}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"CallToActionOption",
												"type",
												"{{callToActionOptionType}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "CallToActionOption-UpdateCallToActionOption-Administrator",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var updatedCallToActionType = pm.environment.get(\"updatedCallToActionType\");",
													"var updatedCallToActionValue = pm.environment.get(\"updatedCallToActionValue\");",
													"pm.environment.set(\"callToActionOptionType\", updatedCallToActionType);",
													"",
													"var jsonData = pm.response.json();",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.ok;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Check if updated Call to action Type matches: \" + updatedCallToActionType, function () {",
													"    pm.expect(jsonData.type).to.eql(updatedCallToActionType);",
													"});",
													"",
													"pm.test(\"Check if updated Call to action Value matches: \" + updatedCallToActionValue, function () {",
													"    pm.expect(jsonData.value).to.eql(updatedCallToActionValue);",
													"});",
													""
												],
												"type": "text/javascript",
												"id": "5e8db454-4b58-4bd5-ab5c-d365ff86ea8e"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{administratorUserIdentityId}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"type\": \"{{updatedCallToActionType}}\",\r\n    \"value\": \"{{updatedCallToActionValue}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/CallToActionOption/{{callToActionOptionId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"CallToActionOption",
												"{{callToActionOptionId}}"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Portfolio",
							"item": [
								{
									"name": "Portoflio-CreatePortfolio-Administrator",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f16883c2-94e5-4b3c-bf59-d98e9fc9203f",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));\r",
													"var administratorUserId = parseInt(pm.environment.get(\"administratorUserId\"));\r",
													"var portfolioTitle = pm.environment.get(\"portfolioTitle\");\r",
													" \r",
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.environment.set(\"portfolioId\", jsonData.id);\r",
													"\r",
													"pm.test(\"Status code is 201\", function () {\r",
													"    pm.response.to.have.status(201);\r",
													"});\r",
													"\r",
													"pm.test(\"Response must be valid and have a json body\", function () {\r",
													"     pm.response.to.be.success;\r",
													"     pm.response.to.be.withBody;\r",
													"     pm.response.to.be.json;\r",
													"});\r",
													"\r",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);\r",
													"});\r",
													"\r",
													"pm.test(\"portfolioTitle title is set correctly and matching: \" + portfolioTitle, function () {\r",
													"    pm.expect(jsonData.title).to.eql(portfolioTitle);\r",
													"});\r",
													"\r",
													"pm.test(\"Identity Id is set correctly and matches: \" + administratorUserId, function () {\r",
													"    pm.expect(jsonData.userId).to.eql(administratorUserId);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "IdentityId",
												"value": "{{administratorUserIdentityId}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"template\": 1,\r\n  \"title\": \"{{portfolioTitle}}\",\r\n  \"publicUri\": \"This is a test uri\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/portfolio",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"portfolio"
											]
										}
									},
									"response": []
								},
								{
									"name": "Portfolio-GetPortfolio-Administrator",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));\r",
													"var portfolioTitle = pm.environment.get(\"portfolioTitle\");\r",
													"\r",
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);\r",
													"});\r",
													"\r",
													"pm.test(\"Response must be valid and have a json body\", function () {\r",
													"    pm.response.to.be.ok;\r",
													"    pm.response.to.be.withBody;\r",
													"    pm.response.to.be.json;\r",
													"});\r",
													"\r",
													"pm.test(\"portfolio title is set correctly and matches: \" + portfolioTitle, function () {\r",
													"    pm.expect(jsonData.title).to.eql(portfolioTitle);\r",
													"});"
												],
												"type": "text/javascript",
												"id": "c0932fc1-c6fe-4b90-ad56-2fd2a9efffb3"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"value": "{{administratorUserIdentityId}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/portfolio/{{portfolioId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"portfolio",
												"{{portfolioId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Portfolio-GetPortfolio-Other-Administrator",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);\r",
													"});\r",
													"\r",
													"pm.test(\"Response must be valid and have a json body\", function () {\r",
													"    pm.response.to.be.ok;\r",
													"    pm.response.to.be.withBody;\r",
													"    pm.response.to.be.json;\r",
													"});"
												],
												"type": "text/javascript",
												"id": "babac814-1fb1-47de-8b79-554d2a5f9391"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"value": "{{administratorUserIdentityId}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/portfolio/1",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"portfolio",
												"1"
											]
										}
									},
									"response": []
								},
								{
									"name": "Porfolio-UpdatePortfolio-Other-Administrator",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "442e0bfb-4a47-4d8c-85f7-03b60cc9f21c",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);\r",
													"});\r",
													"\r",
													"pm.test(\"Response must be valid and have a json body\", function () {\r",
													"    pm.response.to.be.ok;\r",
													"    pm.response.to.be.withBody;\r",
													"    pm.response.to.be.json;\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "IdentityId",
												"value": "{{administratorUserIdentityId}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"template\": 1,\r\n  \"title\": \"{{portfolioTitleUpdated}}\",\r\n  \"publicUri\": \"This is a test uri\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/portfolio/{{portfolioId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"portfolio",
												"{{portfolioId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "PortfolioItem-CreatePortfolioItem-Administrator",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "1edc8198-9beb-46ce-87b4-3ef5f65f57e9",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));\r",
													"var administratorUserId = parseInt(pm.environment.get(\"administratorUserId\"));\r",
													"var portfolioId = parseInt(pm.environment.get(\"portfolioId\"));\r",
													"var projectId = parseInt(pm.environment.get(\"adminProjectId\"));\r",
													" \r",
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.environment.set(\"portfolioItemId\", jsonData.id);\r",
													"\r",
													"pm.test(\"Status code is 201\", function () {\r",
													"    pm.response.to.have.status(201);\r",
													"});\r",
													"\r",
													"pm.test(\"Response must be valid and have a json body\", function () {\r",
													"     pm.response.to.be.success;\r",
													"     pm.response.to.be.withBody;\r",
													"     pm.response.to.be.json;\r",
													"});\r",
													"\r",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);\r",
													"});\r",
													"\r",
													"pm.test(\"portfolioId title is set correctly and matching: \" + portfolioId, function () {\r",
													"    pm.expect(jsonData.portfolioId).to.eql(portfolioId);\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "IdentityId",
												"value": "{{administratorUserIdentityId}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"position\": 0,\r\n  \"type\": 0,\r\n  \"content\": \"string\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/portfolio/item?portfolioId={{portfolioId}}&projectId={{projectId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"portfolio",
												"item"
											],
											"query": [
												{
													"key": "portfolioId",
													"value": "{{portfolioId}}"
												},
												{
													"key": "projectId",
													"value": "{{projectId}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "PortfolioItem-UpdatePortfolioItem-Administrator",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));\r",
													"var administratorUserId = parseInt(pm.environment.get(\"administratorUserId\"));\r",
													"var content = \"this is a put request\";\r",
													" \r",
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.environment.set(\"portfolioId\", jsonData.id);\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Response must be valid and have a json body\", function () {\r",
													"     pm.response.to.be.success;\r",
													"     pm.response.to.be.withBody;\r",
													"     pm.response.to.be.json;\r",
													"});\r",
													"\r",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);\r",
													"});\r",
													"\r",
													"pm.test(\"portfolio item content is set correctly and matching: \" + content, function () {\r",
													"    pm.expect(jsonData.content).to.eql(content);\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript",
												"id": "6da6db42-2d2f-4915-9b23-5c7a2e08be36"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "IdentityId",
												"value": "{{administratorUserIdentityId}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"position\": 0,\r\n  \"type\": 0,\r\n  \"content\": \"this is a put request\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/portfolio/item/{{portfolioItemId}}?portfolioId={{portfolioId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"portfolio",
												"item",
												"{{portfolioItemId}}"
											],
											"query": [
												{
													"key": "portfolioId",
													"value": "{{portfolioId}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "PortfolioItem-GetPortfolioItem-Administrator",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));\r",
													"var portfolioId = parseInt(pm.environment.get(\"portfolioId\"));\r",
													"var portfolioItemProjectId = parseInt(pm.environment.get(\"portfolioId\"));\r",
													"\r",
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);\r",
													"});\r",
													"\r",
													"pm.test(\"Response must be valid and have a json body\", function () {\r",
													"    pm.response.to.be.ok;\r",
													"    pm.response.to.be.withBody;\r",
													"    pm.response.to.be.json;\r",
													"});\r",
													"\r",
													"pm.test(\"portfolio item exists on portfolio\", function() {\r",
													"    jsonData.portfolioItem.forEach(function(portfolioItem) {\r",
													"        pm.expect(portfolioItem).to.have.property(\"portfolioId\", 2);\r",
													"    });\r",
													"});"
												],
												"type": "text/javascript",
												"id": "e9fe6a44-e382-481f-af5c-e17bd2992e98"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"value": "{{administratorUserIdentityId}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/portfolio/{{portfolioItemId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"portfolio",
												"{{portfolioItemId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "PortfolioItem-DeletePortofolioItem-Administrator",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);\r",
													"});\r",
													"\r",
													"pm.test(\"Response must be valid\", function () {\r",
													"     pm.response.to.be.ok;\r",
													"});"
												],
												"type": "text/javascript",
												"id": "92c82f34-d1e5-4371-85fd-1666c4b8966c"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "IdentityId",
												"value": "{{administratorUserIdentityId}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/portfolio/item/{{portfolioItemId}}?portfolioId={{portfolioId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"portfolio",
												"item",
												"{{portfolioItemId}}"
											],
											"query": [
												{
													"key": "portfolioId",
													"value": "{{portfolioId}}"
												}
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Cleanup",
							"item": [
								{
									"name": "Embed-DeleteEmbed-Administrator",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});"
												],
												"type": "text/javascript",
												"id": "fe461319-8c0f-4833-b175-245abfcc198a"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{administratorUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Embed/{{embedGuid}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Embed",
												"{{embedGuid}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Highlight-DeleteHighlight-Administrator",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});"
												],
												"type": "text/javascript",
												"id": "bce96b44-56ff-4982-a5b8-05a48b4c38a3"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{administratorUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Highlight/{{highlightId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Highlight",
												"{{highlightId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Project-DeleteProject-Administrator",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});"
												],
												"type": "text/javascript",
												"id": "76961726-35d5-4b51-9690-543f8e721ee1"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{administratorUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Project/{{projectId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Project",
												"{{projectId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Role-DeleteRole-WithUsers-Administrator",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"",
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});"
												],
												"type": "text/javascript",
												"id": "1320354b-1550-47ac-b725-038b773f1738"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{administratorUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Role/{{roleId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Role",
												"{{roleId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Institution-DeleteInstitution-Administrator",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});"
												],
												"type": "text/javascript",
												"id": "77caf595-f587-4d61-a385-2deba98c4a92"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{administratorUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Institution/{{createdInstitutionId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Institution",
												"{{createdInstitutionId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "User-DeleteUser-Administrator",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});"
												],
												"type": "text/javascript",
												"id": "3cfb0cf8-2798-40c7-b8c1-0242111dd35d"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{administratorUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/User/{{createdUserId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"User",
												"{{createdUserId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "CallToActionOption-DeleteCallToActionOption-Administrator",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});"
												],
												"type": "text/javascript",
												"id": "cf070b35-12e1-4ce0-9c46-aee3df219dc6"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{administratorUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/CallToActionOption/{{callToActionOptionId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"CallToActionOption",
												"{{callToActionOptionId}}"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Checkup-on-Cleanup",
							"item": [
								{
									"name": "Project-Get-Deleted-Project-Administrator",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"",
													"pm.test(\"Status code is 404\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"    pm.response.to.be.notFound;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});"
												],
												"type": "text/javascript",
												"id": "769244c5-62da-4c4c-a313-878804e14523"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{administratorUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Project/{{projectId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Project",
												"{{projectId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "User-Get-Deleted-User-Administrator",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"",
													"pm.test(\"Status code is 404\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"    pm.response.to.be.notFound;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});"
												],
												"type": "text/javascript",
												"id": "9dfcd46d-cf02-4ad9-9704-1198d43004b2"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{administratorUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/User/{{createdUserId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"User",
												"{{createdUserId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Embed-Get-Deleted-Embed-Administrator",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"",
													"pm.test(\"Status code is 404\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"    pm.response.to.be.notFound;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});"
												],
												"type": "text/javascript",
												"id": "4eb76792-fa50-40a7-9989-dedd8f529a61"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{administratorUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Embed/{{embedGuid}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Embed",
												"{{embedGuid}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Highlight-Get-Deleted-Highlight-Administrator",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"",
													"pm.test(\"Status code is 404\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"    pm.response.to.be.notFound;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});"
												],
												"type": "text/javascript",
												"id": "644c7cf5-4b1d-42e5-9ddf-fb1fd4494292"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{administratorUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Highlight/{{highlightId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Highlight",
												"{{highlightId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Institution-Get-Deleted-Institution-Administrator",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"",
													"pm.test(\"Status code is 404\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"    pm.response.to.be.notFound;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});"
												],
												"type": "text/javascript",
												"id": "b2a33045-abbb-4228-8406-3fb080920697"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{administratorUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Institution/{{createdInstitutionId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Institution",
												"{{createdInstitutionId}}"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Guest",
					"item": [
						{
							"name": "Preparation",
							"item": [
								{
									"name": "Project-CreateProject",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"var administratorUserId = parseInt(pm.environment.get(\"administratorUserId\"));",
													"var projectName = pm.environment.get(\"projectName\");",
													"var adminUserName = pm.environment.get(\"adminUserName\");",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.environment.set(\"projectId\", jsonData.id);",
													"pm.environment.set(\"adminProjectId\", jsonData.id);",
													"",
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.success;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});",
													"",
													"pm.test(\"Project Name is set correctly and matching: \" + projectName, function () {",
													"    pm.expect(jsonData.name).to.eql(projectName);",
													"});",
													"",
													"pm.test(\"User Name is correct and matching: \" + adminUserName, function () {",
													"    pm.expect(jsonData.user.name).to.eql(adminUserName);",
													"});",
													"",
													"pm.test(\"Identity ID is correct and matching: \" + administratorUserId, function () {",
													"    pm.expect(parseInt(jsonData.user.id)).to.eql(administratorUserId);",
													"});"
												],
												"type": "text/javascript",
												"id": "d288c09e-a5a7-4d4f-b47b-f419247e2f79"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{administratorUserIdentityId}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"name\": \"{{projectName}}\",\r\n  \"description\": \"postmantest_Guest_Project-CreateProject\",\r\n  \"shortDescription\": \"postmantest_Guest_Project-CreateProject\",\r\n  \"uri\": \"postmantest_Guest_Project-CreateProject-CreateProjecttest_uri\",\r\n  \"collaborators\": [\r\n    {\r\n      \"fullName\": \"postmantest_Guest_Project-CreateProject\",\r\n      \"role\": \"postmantest_Guest_Project-CreateProject\"\r\n    }\r\n  ],\r\n  \"created\": \"2020-04-20T08:24:26.693Z\",\r\n  \"updated\": \"2020-04-20T08:24:26.693Z\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/Project",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Project"
											]
										}
									},
									"response": []
								},
								{
									"name": "Highlight-CreateHighlight",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"var identityId = parseInt(pm.environment.get(\"identityId\"));",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.environment.set(\"highlightId\", jsonData.id);",
													"",
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.success;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});"
												],
												"type": "text/javascript",
												"id": "f7a5db7a-63b8-4503-b6d3-15ae4c3ef9e8"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"var current_timestamp = new Date();\r",
													"postman.setEnvironmentVariable(\"current_timestamp\", current_timestamp.toISOString());\r",
													"\r",
													"var future_timestamp = new Date(Date.now() +(2 * 86400000));\r",
													"postman.setEnvironmentVariable(\"future_timestamp\", future_timestamp.toISOString());\r",
													""
												],
												"type": "text/javascript",
												"id": "6b5dcc99-b1c5-446d-af37-bdc2281aa06e"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{administratorUserIdentityId}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"projectId\": {{projectId}},\r\n  \"startDate\": \"{{current_timestamp}}\",\r\n  \"endDate\": \"{{future_timestamp}}\",\r\n  \"description\" : \"postman_Highlight-CreateHighlight\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/Highlight",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Highlight"
											]
										}
									},
									"response": []
								},
								{
									"name": "Embed-CreateEmbed",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.environment.set(\"embedGuid\", jsonData.guid);",
													"pm.environment.set(\"embeddedProjectId\", jsonData.project.id);",
													"",
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.success;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});"
												],
												"type": "text/javascript",
												"id": "555d98ad-b05f-4aad-8512-9e4c7ed5357d"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{administratorUserIdentityId}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"projectId\": {{projectId}}\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/Embed",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Embed"
											]
										}
									},
									"response": []
								},
								{
									"name": "CallToActionOption-CreateCallToActionOption",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.environment.set(\"callToActionOptionId\", jsonData.id);",
													"",
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.success;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});",
													"",
													"pm.test(\"Call to action option type is lowercase\", function () {",
													"    pm.expect(jsonData.type).to.eql(jsonData.type.toLowerCase());",
													"});",
													"",
													"pm.test(\"Call to action option value is lowercase\", function () {",
													"    pm.expect(jsonData.value).to.eql(jsonData.value.toLowerCase());",
													"});",
													""
												],
												"type": "text/javascript",
												"id": "104e738a-d33d-4298-ac8b-ca9d9ea33a26"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{administratorUserIdentityId}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"type\": \"Title\",\r\n  \"value\": \"Feedback\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/CallToActionOption",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"CallToActionOption"
											]
										}
									},
									"response": []
								}
							],
							"description": "For some requests, we need to have data available. The variables need to be filled so the request can succeed. We put these preparation requests in this folder. We will clean them up in the cleanup folder.",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										],
										"id": "6cfde463-1cbc-428c-a104-4a25e5e8d69b"
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										],
										"id": "eef15604-b907-4752-a415-f330625a1067"
									}
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "User",
							"item": [
								{
									"name": "User-CreateUser-Guest",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 401\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.unauthorized;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});",
													""
												],
												"type": "text/javascript",
												"id": "22ad2573-7bcb-4a1b-b93f-de6fc6b10736"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"identityId\": \"98764342123\",\n    \"name\": \"postman_User-CreateUser-Guest\",\n    \"email\": \"postman_User-CreateUser-Guest@example.com\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/User",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"User"
											]
										}
									},
									"response": []
								},
								{
									"name": "User-GetUser-Guest",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 401\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.unauthorized;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});"
												],
												"type": "text/javascript",
												"id": "5f26d978-382c-4a0c-b5e3-7736ca001dc0"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{apiUrl}}/api/User/1",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"User",
												"1"
											]
										}
									},
									"response": []
								},
								{
									"name": "User-UpdateUser-Guest",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 401\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.unauthorized;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});"
												],
												"type": "text/javascript",
												"id": "0349b176-09b2-4385-a0f1-a137f3a01fef"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"name\": \"bobz\",\r\n  \"email\": \"BobSmith@email.com\",\r\n  \"identityId\": {{administratorUserIdentityId}}\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/User/1",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"User",
												"1"
											]
										}
									},
									"response": []
								},
								{
									"name": "User-DeleteUser-Guest",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 401\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.unauthorized;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});"
												],
												"type": "text/javascript",
												"id": "e40fd5d8-b145-4714-b761-0ba5a5a77806"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{apiUrl}}/api/User/1",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"User",
												"1"
											]
										}
									},
									"response": []
								}
							],
							"auth": {
								"type": "noauth"
							},
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										],
										"id": "56b313a9-091c-4a51-8b45-b3b3b3f7c943"
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										],
										"id": "1b05321d-6cb6-4f93-bb86-5e8d4df1bd8a"
									}
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "FollowUser",
							"item": [
								{
									"name": "User-FollowUser-Guest",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 401\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													""
												],
												"type": "text/javascript",
												"id": "e03f2180-adff-4a3b-8674-5cb3e0f41f62"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/User/follow/{{userIdToFollow}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"User",
												"follow",
												"{{userIdToFollow}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "User-UnFollowUser-Guest",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 401\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													""
												],
												"type": "text/javascript",
												"id": "57d6010f-35ad-48e1-85c6-b40b118e1a5a"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "DELETE",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/User/follow/{{userIdToFollow}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"User",
												"follow",
												"{{userIdToFollow}}"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Project",
							"item": [
								{
									"name": "Project-CreateProject-Guest",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 401\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"    pm.response.to.be.unauthorized;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json;",
													"});",
													"",
													""
												],
												"type": "text/javascript",
												"id": "dd1bd5b7-e8e2-4a9b-a79b-cda32e3e0f8b"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"name\": \"{{projectName}}\",\r\n  \"description\": \"postmantest_description\",\r\n  \"shortDescription\": \"postmantest_shortdesc\",\r\n  \"uri\": \"postmantest_uri\",\r\n  \"collaborators\": [\r\n    {\r\n      \"fullName\": \"postmantest_collfullname\",\r\n      \"role\": \"postmantest_collrole\"\r\n    }\r\n  ],\r\n  \"created\": \"2020-04-20T08:24:26.693Z\",\r\n  \"updated\": \"2020-04-20T08:24:26.693Z\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/Project",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Project"
											]
										}
									},
									"response": []
								},
								{
									"name": "Project-GetAllProjects-Guest",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var projectName = pm.environment.get(\"projectName\");",
													"",
													"var jsonData = pm.response.json();",
													"",
													"var foundAt;",
													"",
													"function findProject(jsonData, name) {",
													"    for (var i = 0; i < jsonData.results.length; i++) {",
													"        if (jsonData.results[i].name == name) {",
													"            return i;",
													"        }",
													"    }",
													"    return -1;",
													"}",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Project: \" + projectName + \" is in list\", function () {",
													"    foundAt = findProject(jsonData, projectName);",
													"    pm.expect(foundAt).to.not.eql(-1);",
													"});",
													"",
													"pm.test(\"Project name is set correctly and matching: \" + projectName, function () {",
													"    pm.expect(jsonData.results[foundAt].name).to.eql(projectName);",
													"});"
												],
												"type": "text/javascript",
												"id": "de81b448-47d1-4da5-bbaa-e903bad36f0c"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{apiUrl}}/api/Project",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Project"
											]
										}
									},
									"response": []
								},
								{
									"name": "Project-GetProject-Guest",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var projectName = pm.environment.get(\"projectName\");",
													"",
													"var jsonData = pm.response.json();",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Project name is set correctly and matches: \" + projectName, function () {",
													"    pm.expect(jsonData.name).to.eql(projectName);",
													"});"
												],
												"type": "text/javascript",
												"id": "5c4c7cf2-7dff-4a1a-a7d5-d513e9d30e4d"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{apiUrl}}/api/Project/{{projectId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Project",
												"{{projectId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Project-UpdateProject-Guest",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 401\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"    pm.response.to.be.unauthorized;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json;",
													"});"
												],
												"type": "text/javascript",
												"id": "5fbc2024-dcd5-4755-86d8-ff3dfba4221d"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"name\": \"{{projectNameUpdated}}\",\r\n  \"description\": \"postmantest_description\",\r\n  \"shortDescription\": \"postmantest_shortdesc\",\r\n  \"uri\": \"postmantest_uri\",\r\n  \"collaborators\": [\r\n    {\r\n      \"fullName\": \"postmantest_collfullname\",\r\n      \"role\": \"postmantest_collrole\"\r\n    }\r\n  ],\r\n  \"created\": \"2020-04-20T08:24:26.693Z\",\r\n  \"updated\": \"2020-04-20T08:24:26.693Z\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/Project/1",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Project",
												"1"
											]
										}
									},
									"response": []
								},
								{
									"name": "Project-DeleteProject-Guest",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 401\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.unauthorized;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});"
												],
												"type": "text/javascript",
												"id": "b49e6e08-ad53-4353-869f-bed7460a2bcd"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{apiUrl}}/api/Project/1",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Project",
												"1"
											]
										}
									},
									"response": []
								},
								{
									"name": "Project-LikeProject-Guest",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"eval(pm.environment.get(\"commonTests\"))();\r",
													"\r",
													"pm.test(\"Status code is 401\", function () {\r",
													"    pm.response.to.have.status(401);\r",
													"});\r",
													"\r",
													"pm.test(\"Response must be valid and have a json body\", function () {\r",
													"     pm.response.to.be.unauthorized;\r",
													"     pm.response.to.be.withBody;\r",
													"     pm.response.to.be.json;\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"id": "61da8ba6-3bb7-4d46-b5bb-bd84195b9d9c"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [
											{
												"key": "IdentityId",
												"value": "{{administratorUserIdentityId}}",
												"type": "text",
												"disabled": true
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Project/like/{{projectId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Project",
												"like",
												"{{projectId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Project-DeleteLikeProject-Guest",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"eval(pm.environment.get(\"commonTests\"))();\r",
													"\r",
													"pm.test(\"Status code is 401\", function () {\r",
													"    pm.response.to.have.status(401);\r",
													"});\r",
													"\r",
													"pm.test(\"Response must be valid and have a json body\", function () {\r",
													"     pm.response.to.be.unauthorized;\r",
													"     pm.response.to.be.withBody;\r",
													"     pm.response.to.be.json;\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"id": "d740ce97-b14d-4b68-ba12-f0f8c936ca4b"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "DELETE",
										"header": [
											{
												"key": "IdentityId",
												"value": "{{registeredUserIdentityId}}",
												"type": "text",
												"disabled": true
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Project/like/{{projectId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Project",
												"like",
												"{{projectId}}"
											]
										}
									},
									"response": []
								}
							],
							"auth": {
								"type": "noauth"
							},
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										],
										"id": "fc207bea-40e8-42fe-a0aa-63a0cbb4d5e6"
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										],
										"id": "381c7308-bfe0-4900-a670-75c49ca67b3c"
									}
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "FollowProject",
							"item": [
								{
									"name": "Project-FollowProject-Guest",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 401\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													""
												],
												"type": "text/javascript",
												"id": "a54630b4-d0e9-4f21-87dc-ce53247214b4"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/project/follow/{{projectIdToFollow}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"project",
												"follow",
												"{{projectIdToFollow}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Project-UnFollowProject-Guest",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 401\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													""
												],
												"type": "text/javascript",
												"id": "b967247c-de5f-4126-be7f-17c33141ed27"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "DELETE",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/project/follow/{{projectIdToFollow}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"project",
												"follow",
												"{{projectIdToFollow}}"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Highlight",
							"item": [
								{
									"name": "Highlight-CreateHighlight-Guest",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 401\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"    pm.response.to.be.unauthorized;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json;",
													"});",
													""
												],
												"type": "text/javascript",
												"id": "ad9f5a52-86e0-422a-b45b-d2543caeabfb"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"id": "b5752c27-d67a-4552-8260-d0bc91e4a098"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"projectId\": {{projectId}},\r\n  \"startDate\": \"{{current_timestamp}}\",\r\n  \"endDate\": \"{{future_timestamp}}\",\r\n  \"description\" : \"Lorem Ipsum\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/Highlight",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Highlight"
											]
										}
									},
									"response": []
								},
								{
									"name": "Highlight-GetAllActiveHighlights-Guest",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json;",
													"});"
												],
												"type": "text/javascript",
												"id": "dc2cb4ea-daa7-420b-9c76-9d38fdee2aa3"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{apiUrl}}/api/Highlight",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Highlight"
											]
										}
									},
									"response": []
								},
								{
									"name": "Highlight-GetHighlight-Guest",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var highlightId = parseInt(pm.environment.get(\"highlightId\"));",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.environment.set(\"highlightStartDate\", jsonData.startDate);",
													"pm.environment.set(\"highlightEndDate\", jsonData.endDate);",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Highlight Id matches: \" + highlightId, function () {",
													"    pm.expect(jsonData.id).to.eql(highlightId);",
													"});"
												],
												"type": "text/javascript",
												"id": "55046ef8-a7bb-4b72-9c31-c3b96458f1b0"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{apiUrl}}/api/Highlight/{{highlightId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Highlight",
												"{{highlightId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Highlight-GetHighlight-ByProject-Guest",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 401\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"    pm.response.to.be.unauthorized;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json;",
													"});",
													""
												],
												"type": "text/javascript",
												"id": "b61223c0-b21f-4e27-b90e-207bf39daf7f"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{apiUrl}}/api/Highlight/Project/{{projectId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Highlight",
												"Project",
												"{{projectId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Highlight-UpdateHighlight-Guest",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 401\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"    pm.response.to.be.unauthorized;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json;",
													"});",
													""
												],
												"type": "text/javascript",
												"id": "14cc05d9-8ce7-4f50-9247-b7bff3dc344f"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"id": "4149940c-23e4-4e64-b542-29381df1d3fc"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"projectId\": \"{{projectId}}\",\r\n  \"startDate\": \"{{current_timestamp}}\",\r\n  \"endDate\": \"{{highlightEndDate}}\",\r\n  \"description\" : \"Lorem Ipsum\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/Highlight/{{highlightId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Highlight",
												"{{highlightId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Highlight-DeleteHighlight-Guest",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 401\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.unauthorized;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});"
												],
												"type": "text/javascript",
												"id": "6a0df8d9-033f-4743-bb97-4232af61136a"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{apiUrl}}/api/Highlight/{{highlightId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Highlight",
												"{{highlightId}}"
											]
										}
									},
									"response": []
								}
							],
							"auth": {
								"type": "noauth"
							},
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										],
										"id": "5a3779c0-8856-4037-b792-1d58987584be"
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										],
										"id": "10b747f8-28e9-4fb9-99d1-4751aa40aba5"
									}
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Embed",
							"item": [
								{
									"name": "Embed-CreateEmbed-Guest",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 401\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.unauthorized;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});"
												],
												"type": "text/javascript",
												"id": "0ad43ee4-3d05-4f0d-ad76-7b7a7aa2a08c"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"projectId\": {{projectId}}\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/Embed",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Embed"
											]
										}
									},
									"response": []
								},
								{
									"name": "Embed-GetAllEmbeds-Guest",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 401\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.unauthorized;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});"
												],
												"type": "text/javascript",
												"id": "819b0e83-5d0c-44aa-9ce3-ed6e4e570829"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{apiUrl}}/api/Embed",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Embed"
											]
										}
									},
									"response": []
								},
								{
									"name": "Embed-GetEmbed-Guest",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.ok;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});"
												],
												"type": "text/javascript",
												"id": "c3fab578-c0d5-43ba-a470-d6f0df2e3603"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{apiUrl}}/api/Embed/{{embedGuid}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Embed",
												"{{embedGuid}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Embed-DeleteEmbed-Guest",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 401\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.unauthorized;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});"
												],
												"type": "text/javascript",
												"id": "681c8291-89fd-4c45-8e0e-a6cdee3895e1"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{apiUrl}}/api/Embed/{{embedGuid}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Embed",
												"{{embedGuid}}"
											]
										}
									},
									"response": []
								}
							],
							"auth": {
								"type": "noauth"
							},
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										],
										"id": "5832cd0e-d2be-4913-8576-c0c87f45e532"
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										],
										"id": "7c3f2848-d0f4-4235-b657-0817ffc79dd0"
									}
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Role",
							"item": [
								{
									"name": "Role-CreateRole-Guest",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 401\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"    pm.response.to.be.unauthorized;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json;",
													"});",
													""
												],
												"type": "text/javascript",
												"id": "9eb0c41b-4011-48f7-9692-fd6824349643"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"name\": \"{{roleName}}\",\r\n  \"scopes\": [\r\n    {\r\n      \"scope\": \"EmbedWrite\"\r\n    }\r\n  ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/Role",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Role"
											]
										}
									},
									"response": []
								},
								{
									"name": "Role-GetAllRoles-Guest",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 401\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"    pm.response.to.be.unauthorized;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json;",
													"});",
													""
												],
												"type": "text/javascript",
												"id": "cb5e596a-25ac-4b03-96da-ff242fa8759a"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{apiUrl}}/api/Role",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Role"
											]
										}
									},
									"response": []
								},
								{
									"name": "Scope-GetAllScopes-Guest",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 401\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"    pm.response.to.be.unauthorized;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json;",
													"});",
													""
												],
												"type": "text/javascript",
												"id": "d2bae1da-b4fd-4874-b3fe-879e049a8b99"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{apiUrl}}/api/Role/Scopes",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Role",
												"Scopes"
											]
										}
									},
									"response": []
								},
								{
									"name": "Role-GetRole-Guest",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 401\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"    pm.response.to.be.unauthorized;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json;",
													"});",
													""
												],
												"type": "text/javascript",
												"id": "024d71ec-3504-463d-b0c2-156bc39b4398"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{apiUrl}}/api/Role/1",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Role",
												"1"
											]
										}
									},
									"response": []
								},
								{
									"name": "Role-UpdateRole-Guest",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 401\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"    pm.response.to.be.unauthorized;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json;",
													"});",
													""
												],
												"type": "text/javascript",
												"id": "600b62e6-0bea-4c5a-81b3-c9551d622165"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"name\": \"{{updatedRoleName}}\",\r\n  \"scopes\": [\r\n    {\r\n      \"scope\": \"EmbedWrite\"\r\n    }\r\n  ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/Role/1",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Role",
												"1"
											]
										}
									},
									"response": []
								},
								{
									"name": "Role-SetRole-Guest",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 401\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"    pm.response.to.be.unauthorized;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json;",
													"});",
													""
												],
												"type": "text/javascript",
												"id": "f2b2cf06-a99e-4242-9e02-c92e33b53312"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"createdUserId\": {{createdUserId}},\r\n  \"name\": \"{{projectNameUpdated}}\",\r\n  \"description\": \"postmantest_description\",\r\n  \"shortDescription\": \"postmantest_shortdesc\",\r\n  \"uri\": \"postmantest_uri\",\r\n  \"collaborators\": [\r\n    {\r\n      \"fullName\": \"postmantest_collfullname\",\r\n      \"role\": \"postmantest_collrole\"\r\n    }\r\n  ],\r\n  \"created\": \"2020-04-20T08:24:26.693Z\",\r\n  \"updated\": \"2020-04-20T08:24:26.693Z\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/Role/setRole?createdUserId={{createdUserId}}&roleId=1",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Role",
												"setRole"
											],
											"query": [
												{
													"key": "createdUserId",
													"value": "{{createdUserId}}",
													"description": "Id of the user that we want to update"
												},
												{
													"key": "roleId",
													"value": "1",
													"description": "Id of the role that you want to update the user with"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Role-DeleteRole-Guest",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"",
													"pm.test(\"Status code is 401\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});"
												],
												"type": "text/javascript",
												"id": "fa8f73c3-f784-411d-aa39-d074b0b22dc3"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "",
												"disabled": true
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Role/{{roleId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Role",
												"{{roleId}}"
											]
										}
									},
									"response": []
								}
							],
							"auth": {
								"type": "noauth"
							},
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										],
										"id": "46339044-1099-4cc3-b574-7c9cde87c825"
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										],
										"id": "5970631b-4669-4069-8ff3-43ae93980169"
									}
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Search",
							"item": [
								{
									"name": "Search-SearchInternal-Guest",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.ok;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});"
												],
												"type": "text/javascript",
												"id": "4ad1fd73-df42-4d00-a964-dc4fadb46920"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{apiUrl}}/api/Search/internal/1",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Search",
												"internal",
												"1"
											]
										}
									},
									"response": []
								}
							],
							"auth": {
								"type": "noauth"
							},
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										],
										"id": "547da63f-4ff9-4b1a-97d8-a110a6ea3144"
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										],
										"id": "9dd6d0b3-6e24-491c-8577-da188506c29e"
									}
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Wizard",
							"item": [],
							"auth": {
								"type": "noauth"
							},
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										],
										"id": "d8ba66c2-0145-4490-9f88-274e1453af4c"
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										],
										"id": "b1b079b8-f4b4-4cdc-9d4a-441e755f54e1"
									}
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Institution",
							"item": [
								{
									"name": "Institution-CreateInstitution-Guest",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 401\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.unauthorized;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});",
													""
												],
												"type": "text/javascript",
												"id": "335183ff-94da-4e49-85fd-9b83a4fac99a"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"{{institutionName}}\",\n    \"description\": \"postmantest_initial_description\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/Institution",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Institution"
											]
										}
									},
									"response": []
								},
								{
									"name": "Institution-GetInstitution-Guest",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 401\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.unauthorized;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});"
												],
												"type": "text/javascript",
												"id": "3df1a145-d703-4009-aafe-9fb5edacc2ed"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{apiUrl}}/api/Institution/1",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Institution",
												"1"
											]
										}
									},
									"response": []
								},
								{
									"name": "Institution-UpdateInstitution-Guest",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 401\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.unauthorized;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});"
												],
												"type": "text/javascript",
												"id": "fcd0e5cf-c118-46c8-b185-9129d44b0b64"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"name\": \"{{institutionName}}\",\r\n    \"description\": \"postmantest_initial_description\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/Institution/1",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Institution",
												"1"
											]
										}
									},
									"response": []
								},
								{
									"name": "Instituiton-DeleteInstitution-Guest",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 401\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.unauthorized;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});"
												],
												"type": "text/javascript",
												"id": "56c06dd1-dcac-4775-980e-10850431aa0e"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{apiUrl}}/api/Institution/1",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Institution",
												"1"
											]
										}
									},
									"response": []
								}
							],
							"auth": {
								"type": "noauth"
							},
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										],
										"id": "6debeb20-8476-4c96-a7ec-f6b89a3063e9"
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										],
										"id": "10cb1d26-427e-4d73-a44b-ea9fe3fc9b5c"
									}
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "File",
							"item": [
								{
									"name": "Post-File-Guest",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"eval(pm.environment.get(\"commonTests\"))();\r",
													"\r",
													"pm.test(\"Status code is 401\", function () {\r",
													"    pm.response.to.have.status(401);\r",
													"});\r",
													"\r",
													"pm.test(\"Response must be valid and have a json body\", function () {\r",
													"    pm.response.to.be.unauthorized;\r",
													"    pm.response.to.be.withBody;\r",
													"    pm.response.to.be.json;\r",
													"});"
												],
												"type": "text/javascript",
												"id": "394c76da-0a5b-4cab-94f9-c30c10ca6eb8"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "File",
													"type": "file",
													"src": "Postman/testimage.png"
												}
											]
										},
										"url": {
											"raw": "{{apiUrl}}/api/File",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"File"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get-Files-Guest",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"eval(pm.environment.get(\"commonTests\"))();\r",
													"\r",
													"pm.test(\"Status code is 401\", function () {\r",
													"    pm.response.to.have.status(401);\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"id": "4e1c60a2-44cc-4cb9-867f-770ed7512306"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{apiUrl}}/api/File",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"File"
											]
										}
									},
									"response": []
								},
								{
									"name": "File-Delete-Guest",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"eval(pm.environment.get(\"commonTests\"))();\r",
													"\r",
													"pm.test(\"Status code is 401\", function () {\r",
													"    pm.response.to.have.status(401);\r",
													"});\r",
													"\r",
													"pm.test(\"Response must be valid and have a json body\", function () {\r",
													"     pm.response.to.be.unauthorized;\r",
													"     pm.response.to.be.withBody;\r",
													"     pm.response.to.be.json;\r",
													"});"
												],
												"type": "text/javascript",
												"id": "d53e8b53-09dd-4f2f-8d6f-fc837436d393"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{apiUrl}}/api/File/1",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"File",
												"1"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "CallToActionOption",
							"item": [
								{
									"name": "CallToActionOption-CreateCallToActionOption-Guest",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 401\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"    pm.response.to.be.unauthorized;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json;",
													"});"
												],
												"type": "text/javascript",
												"id": "5e6f156c-7da1-467b-aa43-95ea929c7b8e"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"type\": \"Title\",\n    \"value\": \"Provide feedback\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/CallToActionOption",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"CallToActionOption"
											]
										}
									},
									"response": []
								},
								{
									"name": "CallToActionOption-GetAllCallToActionOptions-Guest",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 401\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"    pm.response.to.be.unauthorized;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json;",
													"});"
												],
												"type": "text/javascript",
												"id": "1e2600ae-5fdb-4de5-a2bb-2b40449aa499"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{apiUrl}}/api/CallToActionOption",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"CallToActionOption"
											]
										}
									},
									"response": []
								},
								{
									"name": "CallToActionOption-GetCallToActionOptionById-Guest",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 401\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"    pm.response.to.be.unauthorized;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json;",
													"});"
												],
												"type": "text/javascript",
												"id": "7cc9fc53-bb51-4a3d-ab32-768ad2e12bfc"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{apiUrl}}/api/CallToActionOption/{{callToActionOptionId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"CallToActionOption",
												"{{callToActionOptionId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "CallToActionOption-GetCallToActionOptionByType-Guest",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 401\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"    pm.response.to.be.unauthorized;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json;",
													"});"
												],
												"type": "text/javascript",
												"id": "24a6438c-afa9-4930-8313-abcccc45f5bb"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{apiUrl}}/api/CallToActionOption/type/{{callToActionOptionType}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"CallToActionOption",
												"type",
												"{{callToActionOptionType}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "CallToActionOption-UpdateCallToActionOption-Guest",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 401\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"    pm.response.to.be.unauthorized;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json;",
													"});"
												],
												"type": "text/javascript",
												"id": "d8ebbf66-bc2e-4f86-a467-3b6920d2e13f"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"type\": \"Updated type\",\r\n    \"value\": \"Updated value\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/CallToActionOption/{{callToActionOptionId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"CallToActionOption",
												"{{callToActionOptionId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "CallToActionOption-DeleteCallToActionOption-Guest",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 401\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"    pm.response.to.be.unauthorized;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json;",
													"});"
												],
												"type": "text/javascript",
												"id": "c3037e02-b97a-4554-a98e-26fb3c440ab9"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{apiUrl}}/api/CallToActionOption/{{callToActionOptionId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"CallToActionOption",
												"{{callToActionOptionId}}"
											]
										}
									},
									"response": []
								}
							],
							"auth": {
								"type": "noauth"
							},
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										],
										"id": "fec17a26-f937-4e6c-922b-4252d617d0f6"
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										],
										"id": "ea57dd02-f214-4a3e-adbc-f1c36f1027e9"
									}
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Portfolio",
							"item": [
								{
									"name": "Portfolio-GetProject-Guest",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));\r",
													"var portfolioTitle = pm.environment.get(\"portfolioTitleUpdated\");\r",
													"\r",
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);\r",
													"});\r",
													"\r",
													"pm.test(\"Response must be valid and have a json body\", function () {\r",
													"    pm.response.to.be.ok;\r",
													"    pm.response.to.be.withBody;\r",
													"    pm.response.to.be.json;\r",
													"});\r",
													"\r",
													"pm.test(\"portfolio title is set correctly and matches: \" + portfolioTitle, function () {\r",
													"    pm.expect(jsonData.title).to.eql(portfolioTitle);\r",
													"    pm.globals.get(\"variable_key\");\r",
													"});"
												],
												"type": "text/javascript",
												"id": "7e36ca8d-32f9-4643-a632-a496a624ebfd"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{apiUrl}}/api/portfolio/1",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"portfolio",
												"1"
											]
										}
									},
									"response": []
								},
								{
									"name": "Portfolio-DeletePortfolio-Guest",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));\r",
													"\r",
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Status code is 405\", function () {\r",
													"    pm.response.to.have.status(405);\r",
													"});\r",
													"\r",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);\r",
													"});\r",
													"\r",
													"pm.test(\"Response must be valid and have a json body\", function () {\r",
													"     pm.response.to.be.withBody;\r",
													"     pm.response.to.be.json;\r",
													"});"
												],
												"type": "text/javascript",
												"id": "e4cd9682-05d4-44c1-9ddc-f322e85bb836"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{apiUrl}}/api/portfolio/1",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"portfolio",
												"1"
											]
										}
									},
									"response": []
								},
								{
									"name": "Portfolio-CreatePortfolio-Guest",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));\r",
													"\r",
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Status code is 405\", function () {\r",
													"    pm.response.to.have.status(405);\r",
													"});\r",
													"\r",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);\r",
													"});\r",
													"\r",
													"pm.test(\"Response must be valid and have a json body\", function () {\r",
													"     pm.response.to.be.withBody;\r",
													"     pm.response.to.be.json;\r",
													"});"
												],
												"type": "text/javascript",
												"id": "228ed294-d9ab-4673-b7ce-01cb4812b329"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{apiUrl}}/api/Portfolio/1",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Portfolio",
												"1"
											]
										}
									},
									"response": []
								},
								{
									"name": "Portfolio-UpdatePortfolio-Guest",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));\r",
													"\r",
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Status code is 401\", function () {\r",
													"    pm.response.to.have.status(401);\r",
													"});\r",
													"\r",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);\r",
													"});\r",
													"\r",
													"pm.test(\"Response must be valid and have a json body\", function () {\r",
													"     pm.response.to.be.withBody;\r",
													"     pm.response.to.be.json;\r",
													"});"
												],
												"type": "text/javascript",
												"id": "1ef998ce-172c-4e36-b950-c324ba36041d"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "PUT",
										"header": [],
										"url": {
											"raw": "{{apiUrl}}/api/portfolio/1",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"portfolio",
												"1"
											]
										}
									},
									"response": []
								},
								{
									"name": "PortfolioItem-GetProject-Guest",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));\r",
													"var portfolioItemId = 2;\r",
													"\r",
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);\r",
													"});\r",
													"\r",
													"pm.test(\"Response must be valid and have a json body\", function () {\r",
													"    pm.response.to.be.ok;\r",
													"    pm.response.to.be.withBody;\r",
													"    pm.response.to.be.json;\r",
													"});\r",
													"\r",
													"pm.test(\"portfolio item id is set correctly and matches: \" + portfolioItemId, function () {\r",
													"    pm.expect(jsonData.portfolioId).to.eql(1);\r",
													"    pm.globals.get(\"variable_key\");\r",
													"});"
												],
												"type": "text/javascript",
												"id": "83561174-f3c8-47fd-85aa-7756ac85c076"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{apiUrl}}/api/portfolio/item/1",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"portfolio",
												"item",
												"1"
											]
										}
									},
									"response": []
								},
								{
									"name": "PortfolioItem-DeletePortfolio-Guest",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));\r",
													"\r",
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Status code is 401\", function () {\r",
													"    pm.response.to.have.status(401);\r",
													"});\r",
													"\r",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);\r",
													"});\r",
													"\r",
													"pm.test(\"Response must be valid and have a json body\", function () {\r",
													"     pm.response.to.be.withBody;\r",
													"     pm.response.to.be.json;\r",
													"});"
												],
												"type": "text/javascript",
												"id": "1c2a9214-a56c-4ee1-b9a6-54cb04175950"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{apiUrl}}/api/portfolio/item/1",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"portfolio",
												"item",
												"1"
											]
										}
									},
									"response": []
								},
								{
									"name": "PortfolioItem-CreatePortfolio-Guest",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));\r",
													"\r",
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Status code is 405\", function () {\r",
													"    pm.response.to.have.status(405);\r",
													"});\r",
													"\r",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);\r",
													"});\r",
													"\r",
													"pm.test(\"Response must be valid and have a json body\", function () {\r",
													"     pm.response.to.be.withBody;\r",
													"     pm.response.to.be.json;\r",
													"});"
												],
												"type": "text/javascript",
												"id": "8ba40a28-7d99-446a-a72a-85f062944b37"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{apiUrl}}/api/portfolio/item/1",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"portfolio",
												"item",
												"1"
											]
										}
									},
									"response": []
								},
								{
									"name": "PortfolioItem-UpdatePortfolio-Guest",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));\r",
													"\r",
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Status code is 401\", function () {\r",
													"    pm.response.to.have.status(401);\r",
													"});\r",
													"\r",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);\r",
													"});\r",
													"\r",
													"pm.test(\"Response must be valid and have a json body\", function () {\r",
													"     pm.response.to.be.withBody;\r",
													"     pm.response.to.be.json;\r",
													"});"
												],
												"type": "text/javascript",
												"id": "74be94e5-fa30-4475-b727-c0147a38ac33"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "PUT",
										"header": [],
										"url": {
											"raw": "{{apiUrl}}/api/portfolio/item/1",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"portfolio",
												"item",
												"1"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Cleanup Administrator",
							"item": [
								{
									"name": "CallToActionOption-DeleteCallToActionOption-Administrator",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});"
												],
												"type": "text/javascript",
												"id": "d5fe7f14-1ee0-4e62-8097-1dc702a94a03"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{administratorUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/CallToActionOption/{{callToActionOptionId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"CallToActionOption",
												"{{callToActionOptionId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Project-DeleteProject-Administrator",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript",
												"id": "d04eaa3e-0f30-4bba-8ee5-7c76e3409d6a"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "IdentityId",
												"value": "{{administratorUserIdentityId}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Project/{{adminProjectId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Project",
												"{{adminProjectId}}"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								],
								"id": "a34b8a54-705a-40fc-b815-b22d7311a5e1"
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								],
								"id": "71d6bdfb-8bc9-4c86-af94-bffd336e53e6"
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Registered",
					"item": [
						{
							"name": "Preparation",
							"item": [
								{
									"name": "User-CreateUser",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"var userName = pm.environment.get(\"userName\");",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.environment.set(\"createdUserId\", jsonData.id);",
													"pm.environment.set(\"identityId\", jsonData.id);",
													"",
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.success;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});",
													"",
													"pm.test(\"Check if created Username matches: \" + userName, function () {",
													"    pm.expect(jsonData.name).to.eql(userName);",
													"});"
												],
												"type": "text/javascript",
												"id": "99739672-a9b1-41e8-a812-791a973458bc"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{administratorUserIdentityId}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"identityId\": \"9996\",\n    \"name\": \"{{userName}}\",\n    \"email\": \"postmantest_Registered_User-CreateUser@example.com\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/User",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"User"
											]
										}
									},
									"response": []
								},
								{
									"name": "Project-CreateProject",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"var administratorUserId = parseInt(pm.environment.get(\"administratorUserId\"));",
													"var projectName = pm.environment.get(\"projectName\");",
													"var adminUserName = pm.environment.get(\"adminUserName\");",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.environment.set(\"projectId\", jsonData.id);",
													"pm.environment.set(\"adminProjectId\", jsonData.id);",
													"",
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.success;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});",
													"",
													"pm.test(\"Project Name is set correctly and matching: \" + projectName, function () {",
													"    pm.expect(jsonData.name).to.eql(projectName);",
													"});",
													"",
													"pm.test(\"User Name is correct and matching: \" + adminUserName, function () {",
													"    pm.expect(jsonData.user.name).to.eql(adminUserName);",
													"});",
													"",
													"pm.test(\"Identity ID is correct and matching: \" + administratorUserId, function () {",
													"    pm.expect(parseInt(jsonData.user.id)).to.eql(administratorUserId);",
													"});"
												],
												"type": "text/javascript",
												"id": "ac7b69c4-836b-45d3-a7a8-d1a6ce8b9157"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{administratorUserIdentityId}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"name\": \"{{projectName}}\",\r\n  \"description\": \"postmantest_Registered-Project-CreateProject\",\r\n  \"shortDescription\": \"postmantest_Registered-Project-CreateProject\",\r\n  \"uri\": \"postmantest_Registered-Project-CreateProject\",\r\n  \"collaborators\": [\r\n    {\r\n      \"fullName\": \"postmantest_Registered-Project-CreateProject\",\r\n      \"role\": \"postmantest_Registered-Project-CreateProject\"\r\n    }\r\n  ],\r\n  \"created\": \"2020-04-20T08:24:26.693Z\",\r\n  \"updated\": \"2020-04-20T08:24:26.693Z\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/Project",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Project"
											]
										}
									},
									"response": []
								},
								{
									"name": "Highlight-CreateHighlight",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"var identityId = parseInt(pm.environment.get(\"identityId\"));",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.environment.set(\"highlightId\", jsonData.id);",
													"",
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.success;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});"
												],
												"type": "text/javascript",
												"id": "7d623e8a-770f-4fcb-aca1-0810353f7c63"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"var current_timestamp = new Date();\r",
													"postman.setEnvironmentVariable(\"current_timestamp\", current_timestamp.toISOString());\r",
													"\r",
													"var future_timestamp = new Date(Date.now() +(2 * 86400000));\r",
													"postman.setEnvironmentVariable(\"future_timestamp\", future_timestamp.toISOString());\r",
													""
												],
												"type": "text/javascript",
												"id": "21a206ef-ae8b-42c8-b334-5b96e44bbb35"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{administratorUserIdentityId}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"projectId\": {{projectId}},\r\n  \"startDate\": \"{{current_timestamp}}\",\r\n  \"endDate\": \"{{future_timestamp}}\",\r\n  \"description\" : \"postman_Registered_Highlight-CreateHighlight\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/Highlight",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Highlight"
											]
										}
									},
									"response": []
								},
								{
									"name": "Embed-CreateEmbed",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.environment.set(\"embedGuid\", jsonData.guid);",
													"pm.environment.set(\"adminEmbedGuid\", jsonData.guid);",
													"pm.environment.set(\"embeddedProjectId\", jsonData.project.id);",
													"",
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.success;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});"
												],
												"type": "text/javascript",
												"id": "55606a82-e81b-4f60-bf62-fc753c5732c0"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{administratorUserIdentityId}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"projectId\": {{projectId}}\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/Embed",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Embed"
											]
										}
									},
									"response": []
								},
								{
									"name": "CallToActionOption-CreateCallToActionOption",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.environment.set(\"callToActionOptionId\", jsonData.id);",
													"",
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.success;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});",
													"",
													"pm.test(\"Call to action option type is lowercase\", function () {",
													"    pm.expect(jsonData.type).to.eql(jsonData.type.toLowerCase());",
													"});",
													"",
													"pm.test(\"Call to action option value is lowercase\", function () {",
													"    pm.expect(jsonData.value).to.eql(jsonData.value.toLowerCase());",
													"});",
													""
												],
												"type": "text/javascript",
												"id": "865cd02d-667e-4c21-9ce1-aed02aba503d"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{administratorUserIdentityId}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"type\": \"Title\",\r\n  \"value\": \"Feedback\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/CallToActionOption",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"CallToActionOption"
											]
										}
									},
									"response": []
								}
							],
							"description": "For some requests, we need to have data available. The variables need to be filled so the request can succeed. We put these preparation requests in this folder. We will clean them up in the cleanup folder.",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										],
										"id": "855917dc-805a-46e3-9215-7db22481d520"
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										],
										"id": "319dd1da-8d6a-4b0e-ad3c-5e8e790df0a9"
									}
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "User",
							"item": [
								{
									"name": "User-CreateUser-Registered",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 403\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.forbidden;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});"
												],
												"type": "text/javascript",
												"id": "127c9128-4e2f-4d1f-a467-4c57be911e3b"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{registeredUserIdentityId}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"identityId\": \"{{createdUserId}}\",\n    \"name\": \"{{userName}}\",\n    \"email\": \"postmantest_email@example.com\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/User",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"User"
											]
										}
									},
									"response": []
								},
								{
									"name": "User-GetUser-Other-Registered",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 403\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.forbidden;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});",
													""
												],
												"type": "text/javascript",
												"id": "1fdcb71a-b2a1-4b65-ab35-719ff9a7ec14"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{registeredUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/User/{{createdUserId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"User",
												"{{createdUserId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "User-GetUser-Self-Registered",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var aliceIdentityId = parseInt(pm.environment.get(\"registeredUserIdentityId\"));",
													"",
													"var jsonData = pm.response.json();",
													"pm.environment.set(\"registeredUserId\", jsonData.id);",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.ok;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Identity ID is correct and matching: \" + aliceIdentityId, function () {",
													"    pm.expect(parseInt(jsonData.identityId)).to.eql(aliceIdentityId);",
													"});"
												],
												"type": "text/javascript",
												"id": "a9987558-71d4-44e2-b1b2-65d623c7ff32"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{registeredUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/User",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"User"
											]
										}
									},
									"response": []
								},
								{
									"name": "User-UpdateUser-Self-Registered",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var updatedAliceEmail = pm.environment.get(\"updatedAliceEmail\");",
													"",
													"var jsonData = pm.response.json();",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.ok;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Check if email update matches: \" + updatedAliceEmail, function () {",
													"    pm.expect(jsonData.email).to.eql(updatedAliceEmail);",
													"});"
												],
												"type": "text/javascript",
												"id": "e9bef2e1-0bd5-43d1-a0d9-826e2939029e"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{registeredUserIdentityId}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"name\": \"postman_User-UpdateUser-Self-Registered_alicez\",\r\n  \"email\": \"{{updatedAliceEmail}}\",\r\n  \"identityId\": \"{{registeredUserIdentityId}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/User/{{registeredUserId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"User",
												"{{registeredUserId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "User-UpdateUser-Other-Registered",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 401\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.unauthorized;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});"
												],
												"type": "text/javascript",
												"id": "931c86c6-6b79-44ea-9c0a-58472e801e3a"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{registeredUserIdentityId}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"name\": \"bobz\",\r\n  \"email\": \"BobSmith@email.com\",\r\n  \"identityId\": {{administratorUserIdentityId}}\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/User/{{createdUserId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"User",
												"{{createdUserId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "User-DeleteUser-Other-Registered",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"",
													"pm.test(\"Status code is 401\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.unauthorized;",
													"});"
												],
												"type": "text/javascript",
												"id": "2a6095f7-ae46-45bd-a0a7-31c4ada18d07"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{registeredUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/User/{{createdUserId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"User",
												"{{createdUserId}}"
											]
										}
									},
									"response": []
								}
							],
							"description": "Requests executed as the Alice user with the registered role.",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										],
										"id": "e57963b0-f415-45e4-b1f7-ead40d95faf7"
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										],
										"id": "777706b3-9d1f-43e2-9dc2-9d4b927ff9fc"
									}
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "FollowUser",
							"item": [
								{
									"name": "User-FollowUser-Registered",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"var userId = pm.environment.get(\"userIdToFollow\");",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.success;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Check if created Username matches: \" + userId, function () {",
													"    pm.expect(jsonData.id).to.eql(userId);",
													"});"
												],
												"type": "text/javascript",
												"id": "f6567306-f7a0-4195-8038-7cd48fb2d716"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{registeredUserIdentityId}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/User/follow/{{userIdToFollow}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"User",
												"follow",
												"{{userIdToFollow}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "User-UnFollowUser-Registered",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													""
												],
												"type": "text/javascript",
												"id": "00854cc7-f905-40d9-a7d5-396e0822f950"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{registeredUserIdentityId}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/User/follow/{{userIdToFollow}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"User",
												"follow",
												"{{userIdToFollow}}"
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										],
										"id": "a380043d-4415-4391-9899-e91708ec64a3"
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										],
										"id": "8eca4097-29e1-4808-81bf-799b70457f79"
									}
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Project",
							"item": [
								{
									"name": "Project-CreateProject-Registered",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var registeredUserId = pm.environment.get(\"registeredUserId\");",
													"var projectName = pm.environment.get(\"projectName\");",
													"",
													"var jsonData = pm.response.json();",
													"pm.environment.set(\"projectId\", jsonData.id);",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Project Name is set correctly and matches: \" + projectName, function () {",
													"    pm.expect(jsonData.name).to.eql(projectName);",
													"});",
													"",
													"pm.test(\"Identity Id is set correctly and matches: \" + registeredUserId, function () {",
													"    pm.expect(jsonData.user.id).to.eql(registeredUserId);",
													"});"
												],
												"type": "text/javascript",
												"id": "8a281f47-b199-4a5a-88f5-ee1ab37fe3ac"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{registeredUserIdentityId}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"name\": \"{{projectName}}\",\r\n  \"description\": \"postmantest_Project-CreateProject-Registered\",\r\n  \"shortDescription\": \"postmantest_Project-CreateProject-Registered\",\r\n  \"uri\": \"postmantest_Project-CreateProject-Registered\",\r\n  \"collaborators\": [\r\n    {\r\n      \"fullName\": \"postmantest_Project-CreateProject-Registered\",\r\n      \"role\": \"postmantest_Project-CreateProject-Registered\"\r\n    }\r\n  ],\r\n  \"created\": \"2020-04-20T08:24:26.693Z\",\r\n  \"updated\": \"2020-04-20T08:24:26.693Z\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/Project",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Project"
											]
										}
									},
									"response": []
								},
								{
									"name": "Project-GetAllProjects-Registered",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var projectName = pm.environment.get(\"projectName\");",
													"",
													"var jsonData = pm.response.json();",
													"",
													"var foundAt;",
													"",
													"function findProject(jsonData, name) {",
													"    for (var i = 0; i < jsonData.results.length; i++) {",
													"        if (jsonData.results[i].name == name) {",
													"            return i;",
													"        }",
													"    }",
													"    return -1;",
													"}",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Project: \" + projectName + \" is in list\", function () {",
													"    foundAt = findProject(jsonData, projectName);",
													"    pm.expect(foundAt).to.not.eql(-1);",
													"});",
													"",
													"pm.test(\"Project Name is set correctly and matching: \" + projectName, function () {",
													"    pm.expect(jsonData.results[foundAt].name).to.eql(projectName);",
													"});"
												],
												"type": "text/javascript",
												"id": "b572d73f-5190-4c51-bd84-87d9f12026d5"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{registeredUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Project",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Project"
											]
										}
									},
									"response": []
								},
								{
									"name": "Project-GetProject-Self-Registered",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var projectName = pm.environment.get(\"projectName\");",
													"",
													"var jsonData = pm.response.json();",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Project Name is set correctly and matches: \" + projectName, function () {",
													"    pm.expect(jsonData.name).to.eql(projectName);",
													"});"
												],
												"type": "text/javascript",
												"id": "c4fd4569-b7eb-462f-942f-024f94463707"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{registeredUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Project/{{projectId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Project",
												"{{projectId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Project-GetProject-Other-Registered",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json;",
													"});"
												],
												"type": "text/javascript",
												"id": "59c4f49f-06b3-420b-8d33-f31206dd9943"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{registeredUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Project/{{adminProjectId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Project",
												"{{adminProjectId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Project-UpdateProject-Self-Registered",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var projectName = pm.environment.get(\"projectNameUpdated\");",
													"",
													"var jsonData = pm.response.json();",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.ok;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Project Name is set correctly and matches: \" + projectName, function () {",
													"    pm.expect(jsonData.name).to.eql(projectName);",
													"});"
												],
												"type": "text/javascript",
												"id": "6744c669-4da6-49cf-8970-e9cd535786bc"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{registeredUserIdentityId}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"name\": \"{{projectNameUpdated}}\",\r\n  \"description\": \"postmantest_Project-CreateProject-Registered\",\r\n  \"shortDescription\": \"postmantest_Project-CreateProject-Registered\",\r\n  \"uri\": \"postmantest_Project-CreateProject-Registered\",\r\n  \"collaborators\": [\r\n    {\r\n      \"fullName\": \"postmantest_Project-CreateProject-Registered\",\r\n      \"role\": \"postmantest_Project-CreateProject-Registered\"\r\n    }\r\n  ],\r\n  \"created\": \"2020-04-20T08:24:26.693Z\",\r\n  \"updated\": \"2020-04-20T08:24:26.693Z\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/Project/{{projectId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Project",
												"{{projectId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Project-UpdateProject-Other-Registered",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 401\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"    pm.response.to.be.unauthorized;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json;",
													"});"
												],
												"type": "text/javascript",
												"id": "30597343-bd9b-4ae4-b84f-62d3297e8694"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{registeredUserIdentityId}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"name\": \"{{projectNameUpdated}}\",\r\n  \"description\": \"postmantest_description\",\r\n  \"shortDescription\": \"postmantest_shortdesc\",\r\n  \"uri\": \"postmantest_uri\",\r\n  \"collaborators\": [\r\n    {\r\n      \"fullName\": \"postmantest_collfullname\",\r\n      \"role\": \"postmantest_collrole\"\r\n    }\r\n  ],\r\n  \"created\": \"2020-04-20T08:24:26.693Z\",\r\n  \"updated\": \"2020-04-20T08:24:26.693Z\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/Project/{{adminProjectId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Project",
												"{{adminProjectId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Project-LikeProject-Registered",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"eval(pm.environment.get(\"commonTests\"))();\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Response must be valid and have a json body\", function () {\r",
													"     pm.response.to.be.ok;\r",
													"     pm.response.to.be.withBody;\r",
													"     pm.response.to.be.json;\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"id": "f83bd87c-b025-4000-9cc6-c2a563da091c"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "IdentityId",
												"value": "{{registeredUserIdentityId}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Project/like/{{projectId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Project",
												"like",
												"{{projectId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Project-DeleteLikeProject-Registered",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"eval(pm.environment.get(\"commonTests\"))();\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Response must be valid and have a json body\", function () {\r",
													"     pm.response.to.be.ok;\r",
													"     pm.response.to.be.withBody;\r",
													"     pm.response.to.be.json;\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"id": "62f474a3-741f-4372-bfa8-e49a8116f1ac"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{registeredUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Project/like/{{projectId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Project",
												"like",
												"{{projectId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Project-DeleteProject-Other-Registered",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"",
													"pm.test(\"Status code is 401\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.unauthorized;",
													"});"
												],
												"type": "text/javascript",
												"id": "5e6988cb-0361-4f1c-a9a4-632678ab8eee"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{registeredUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Project/{{projectToBeDeletedByUnauthorizedRoles}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Project",
												"{{projectToBeDeletedByUnauthorizedRoles}}"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "FollowProject",
							"item": [
								{
									"name": "Project-FollowProject-Registered",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var projectId = pm.environment.get(\"projectIdToFollow\");",
													"",
													"var jsonData = pm.response.json();",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.success;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Check if created Username matches: \" + projectId, function () {",
													"    pm.expect(jsonData.id).to.eql(projectId);",
													"});"
												],
												"type": "text/javascript",
												"id": "a9cfc780-1ea2-41d0-a00e-b42f1f6c901e"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{administratorUserIdentityId}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/project/follow/{{projectIdToFollow}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"project",
												"follow",
												"{{projectIdToFollow}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Project-UnFollowProject-Registered",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													""
												],
												"type": "text/javascript",
												"id": "510f790a-e6aa-4585-a488-2cddbcf5047f"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{administratorUserIdentityId}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/project/follow/{{projectIdToFollow}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"project",
												"follow",
												"{{projectIdToFollow}}"
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										],
										"id": "b25f7f2a-0934-4474-8d54-b3766bf9ec01"
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										],
										"id": "c9a5f4ac-2e98-4a68-a455-3ca9340592cb"
									}
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Embed",
							"item": [
								{
									"name": "Embed-CreateEmbed-Self-Registered",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"pm.environment.set(\"embedGuid\", jsonData.guid);",
													"pm.environment.set(\"embeddedProjectId\", jsonData.project.id);",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.success;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});",
													""
												],
												"type": "text/javascript",
												"id": "64118634-072b-4310-aeed-cbfaad3747ff"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{registeredUserIdentityId}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"projectId\": {{projectId}}\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/Embed",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Embed"
											]
										}
									},
									"response": []
								},
								{
									"name": "Embed-CreateEmbed-Other-Registered",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 401\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.unauthorized;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});"
												],
												"type": "text/javascript",
												"id": "40b0079c-5d70-4474-8b81-843bcff014d9"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{registeredUserIdentityId}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"projectId\": {{adminProjectId}}\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/Embed",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Embed"
											]
										}
									},
									"response": []
								},
								{
									"name": "Embed-GetAllEmbeds-Registered",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 403\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.forbidden;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});"
												],
												"type": "text/javascript",
												"id": "54fd4dd7-025b-4a67-976f-f50fc7ad55a3"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{registeredUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Embed",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Embed"
											]
										}
									},
									"response": []
								},
								{
									"name": "Embed-GetEmbed-Registered",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var embeddedProjectId = parseInt(pm.environment.get(\"embeddedProjectId\"))",
													"",
													"var jsonData = pm.response.json();",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Embed matches: \" + embeddedProjectId, function () {",
													"    pm.expect(jsonData.id).to.eql(embeddedProjectId);",
													"});"
												],
												"type": "text/javascript",
												"id": "dae6c7ac-0714-4007-9c68-31abe833132f"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{registeredUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Embed/{{embedGuid}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Embed",
												"{{embedGuid}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Embed-DeleteEmbed-Self-Registered",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.ok;",
													"});"
												],
												"type": "text/javascript",
												"id": "d509b999-8698-4863-af26-9f5a4fc4d212"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{registeredUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Embed/{{embedGuid}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Embed",
												"{{embedGuid}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Embed-DeleteEmbed-Other-Registered",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"",
													"pm.test(\"Status code is 401\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.unauthorized;",
													"});"
												],
												"type": "text/javascript",
												"id": "d8a5da24-b63b-4c88-a689-5807ab55014c"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{registeredUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Embed/{{adminEmbedGuid}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Embed",
												"{{adminEmbedGuid}}"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Highlight",
							"item": [
								{
									"name": "Highlight-CreateHighlight-Registered",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 403\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.forbidden;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});"
												],
												"type": "text/javascript",
												"id": "53f4aeb9-ad69-4d54-ab80-be30c19f0ab2"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"var current_timestamp = new Date();\r",
													"postman.setEnvironmentVariable(\"current_timestamp\", current_timestamp.toISOString());\r",
													"\r",
													"var future_timestamp = new Date(Date.now() +(2 * 86400000));\r",
													"postman.setEnvironmentVariable(\"future_timestamp\", future_timestamp.toISOString());\r",
													""
												],
												"type": "text/javascript",
												"id": "3c263377-34d3-4200-a494-43d6e97cd045"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{registeredUserIdentityId}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"projectId\": {{projectId}},\r\n  \"startDate\": \"{{current_timestamp}}\",\r\n  \"endDate\": \"{{future_timestamp}}\",\r\n  \"description\" : \"Lorem Ipsum\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/Highlight",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Highlight"
											]
										}
									},
									"response": []
								},
								{
									"name": "Highlight-GetAllActiveHighlights-Registered",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var projectId = pm.environment.get(\"adminProjectId\");",
													"",
													"var jsonData = pm.response.json();",
													"",
													"var foundAt;",
													"",
													"function findItem(jsonData, item) {",
													"    for (var i = 0; i < jsonData.length; i++) {",
													"        if (jsonData[i].projectId == item) {",
													"            return i;",
													"        }",
													"    }",
													"    return -1;",
													"}",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Highlight is in list and matching: \" + projectId, function () {",
													"    foundAt = findItem(jsonData, projectId);",
													"    pm.expect(foundAt).to.not.eql(-1);",
													"});"
												],
												"type": "text/javascript",
												"id": "bda09235-e8a5-4f16-bef3-d001bfde504a"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{registeredUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Highlight",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Highlight"
											]
										}
									},
									"response": []
								},
								{
									"name": "Highlight-GetHighlight-Registered",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var identityId = parseInt(pm.environment.get(\"identityId\"));",
													"var highlightId = parseInt(pm.environment.get(\"highlightId\"));",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.environment.set(\"highlightStartDate\", jsonData.startDate);",
													"pm.environment.set(\"highlightEndDate\", jsonData.endDate);",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Highlight Id matches: \" + highlightId, function () {",
													"    pm.expect(jsonData.id).to.eql(highlightId);",
													"});"
												],
												"type": "text/javascript",
												"id": "abf0ee9a-a36f-416a-84e0-e8db56d2de76"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{registeredUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Highlight/{{highlightId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Highlight",
												"{{highlightId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Highlight-GetHighlight-ByProject-Registered",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 403\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"    pm.response.to.be.forbidden;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json;",
													"});",
													""
												],
												"type": "text/javascript",
												"id": "a46b9fb4-4211-4026-803c-aca2e985f386"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{registeredUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Highlight/Project/{{projectId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Highlight",
												"Project",
												"{{projectId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Highlight-UpdateHighlight-Registered",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 403\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.forbidden;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});"
												],
												"type": "text/javascript",
												"id": "47704c1c-c7e9-48ee-aea0-7ce9966bbd32"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "IdentityId",
												"value": "{{registeredUserIdentityId}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"projectId\": \"{{projectId}}\",\r\n  \"startDate\": \"{{current_timestamp}}\",\r\n  \"endDate\": \"{{highlightEndDate}}\",\r\n  \"description\" : \"Lorem Ipsum\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/Highlight/{{highlightId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Highlight",
												"{{highlightId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Highlight-DeleteHighlight-Other-Registered",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"",
													"pm.test(\"Status code is 403\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.forbidden;",
													"});"
												],
												"type": "text/javascript",
												"id": "5afa0caf-a2ca-4731-954b-ce90bdae7038"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{registeredUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Highlight/{{highlightId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Highlight",
												"{{highlightId}}"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Role",
							"item": [
								{
									"name": "Role-CreateRole-Registered",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 403\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.forbidden;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});"
												],
												"type": "text/javascript",
												"id": "1d05457a-410a-4173-884f-1d90717895ff"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{registeredUserIdentityId}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"name\": \"{{roleName}}\",\r\n  \"scopes\": [\r\n    {\r\n      \"scope\": \"EmbedWrite\"\r\n    }\r\n  ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/Role",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Role"
											]
										}
									},
									"response": []
								},
								{
									"name": "Role-GetAllRoles-Registered",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 403\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.forbidden;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});"
												],
												"type": "text/javascript",
												"id": "b46b8bc3-2def-4b14-a00b-2bb797537bcd"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{registeredUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Role",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Role"
											]
										}
									},
									"response": []
								},
								{
									"name": "Scope-GetAllScopes-Registered",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 403\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.forbidden;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});"
												],
												"type": "text/javascript",
												"id": "79fd6b5a-e3ba-4271-b65d-84dc6aea0e71"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{registeredUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Role/Scopes",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Role",
												"Scopes"
											]
										}
									},
									"response": []
								},
								{
									"name": "Role-GetRole-Registered",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 403\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.forbidden;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});"
												],
												"type": "text/javascript",
												"id": "ddeea5c0-50d5-4e20-9563-aedaeb017663"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{registeredUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Role/{{roleId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Role",
												"{{roleId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Role-UpdateRole-Registered",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 403\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.forbidden;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});"
												],
												"type": "text/javascript",
												"id": "753a3713-d3ad-47a8-ac3e-145f5d0caff5"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{registeredUserIdentityId}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"name\": \"{{updatedRoleName}}\",\r\n  \"scopes\": [\r\n    {\r\n      \"scope\": \"EmbedWrite\"\r\n    }\r\n  ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/Role/{{roleId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Role",
												"{{roleId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Role-SetRole-Registered",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 403\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.forbidden;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});"
												],
												"type": "text/javascript",
												"id": "bc644423-fbf4-4db2-86fb-c1c6e3451378"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{registeredUserIdentityId}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"createdUserId\": {{createdUserId}},\r\n  \"name\": \"{{projectNameUpdated}}\",\r\n  \"description\": \"postmantest_description\",\r\n  \"shortDescription\": \"postmantest_shortdesc\",\r\n  \"uri\": \"postmantest_uri\",\r\n  \"collaborators\": [\r\n    {\r\n      \"fullName\": \"postmantest_collfullname\",\r\n      \"role\": \"postmantest_collrole\"\r\n    }\r\n  ],\r\n  \"created\": \"2020-04-20T08:24:26.693Z\",\r\n  \"updated\": \"2020-04-20T08:24:26.693Z\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/Role/setRole?createdUserId={{createdUserId}}&roleId={{roleId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Role",
												"setRole"
											],
											"query": [
												{
													"key": "createdUserId",
													"value": "{{createdUserId}}",
													"description": "Id of the user that we want to update"
												},
												{
													"key": "roleId",
													"value": "{{roleId}}",
													"description": "Id of the role that you want to update the user with"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Role-DeleteRole-Registered",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"",
													"pm.test(\"Status code is 403\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.forbidden;",
													"});"
												],
												"type": "text/javascript",
												"id": "15f5023f-0a7a-4d86-ab76-fba9bcb984eb"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{registeredUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Role/{{roleId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Role",
												"{{roleId}}"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Search",
							"item": [
								{
									"name": "Search-SearchInternal-Registered",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.ok;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});"
												],
												"type": "text/javascript",
												"id": "f932e15b-e72e-43ae-b7c4-be983c46143a"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{administratorUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Search/internal/{{projectName}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Search",
												"internal",
												"{{projectName}}"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Wizard",
							"item": [],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Institution",
							"item": [
								{
									"name": "Institution-CreateInstitution-Registered",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 401\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.unauthorized;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});",
													""
												],
												"type": "text/javascript",
												"id": "e4c6617e-4f0a-4b9a-bc4b-9e7f9393fae0"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [
											{
												"key": "IdentityId",
												"value": "{{registeredUserIdentityId}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"identityId\": \"98764342123\",\n    \"name\": \"mycooltestusername\",\n    \"email\": \"postmantest_email@example.com\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/User",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"User"
											]
										}
									},
									"response": []
								},
								{
									"name": "Institution-GetInstitution-Registered",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 401\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.unauthorized;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});"
												],
												"type": "text/javascript",
												"id": "426c6b08-783f-44a6-b597-94713256325d"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"value": "{{registeredUserIdentityId}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/User/1",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"User",
												"1"
											]
										}
									},
									"response": []
								},
								{
									"name": "Institution-UpdateInstitution-Registered",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 401\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.unauthorized;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});"
												],
												"type": "text/javascript",
												"id": "cbb64fed-b3a6-460b-a082-f67d38d5916d"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "PUT",
										"header": [
											{
												"key": "IdentityId",
												"value": "{{registeredUserIdentityId}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"name\": \"bobz\",\r\n  \"email\": \"BobSmith@email.com\",\r\n  \"identityId\": {{administratorUserIdentityId}}\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/User/1",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"User",
												"1"
											]
										}
									},
									"response": []
								},
								{
									"name": "Instituiton-DeleteInstitution-Registered",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 401\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.unauthorized;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});"
												],
												"type": "text/javascript",
												"id": "8c138c8c-3398-4847-a4e7-33b7eda42ab3"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "IdentityId",
												"value": "{{registeredUserIdentityId}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/User/1",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"User",
												"1"
											]
										}
									},
									"response": []
								}
							],
							"auth": {
								"type": "noauth"
							},
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										],
										"id": "363758c0-e94d-4de8-815e-71f27a51ae2c"
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										],
										"id": "ff153a2d-19c5-4f78-a497-fab3f47ecf2e"
									}
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "ProjectIcon",
							"item": [
								{
									"name": "ProjectIcon-Post-File-Registered",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"eval(pm.environment.get(\"commonTests\"))();\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Response includes fileId\", function () {\r",
													"    pm.expect(jsonData.id).to.exist;\r",
													"})\r",
													"\r",
													"pm.environment.set(\"ProjectIconRegisteredFileId\", jsonData.id);\r",
													"\r",
													"pm.test(\"Response must be valid and have a json body\", function () {\r",
													"     pm.response.to.be.success;\r",
													"     pm.response.to.be.withBody;\r",
													"     pm.response.to.be.json;\r",
													"});"
												],
												"type": "text/javascript",
												"id": "583183ea-27fa-46bf-aa82-2461919ccf49"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "IdentityId",
												"value": "{{registeredUserIdentityId}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "File",
													"type": "file",
													"src": "Postman/testimage.png"
												}
											]
										},
										"url": {
											"raw": "{{apiUrl}}/api/File",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"File"
											]
										}
									},
									"response": []
								},
								{
									"name": "ProjectIcon-CreateProject-Registered",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var registeredUserId = pm.environment.get(\"registeredUserId\");",
													"var projectName = pm.environment.get(\"projectName\");",
													"",
													"var jsonData = pm.response.json();",
													"pm.environment.set(\"ProjectIconProjectId\", jsonData.id);",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Project Name is set correctly and matches: \" + projectName, function () {",
													"    pm.expect(jsonData.name).to.eql(projectName);",
													"});"
												],
												"type": "text/javascript",
												"id": "b90542b0-f5af-4064-8d4e-36f2efe7c52d"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{registeredUserIdentityId}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"name\": \"{{projectName}}\",\r\n  \"description\": \"postmantest_ProjectIcon-CreateProject-Registered\",\r\n  \"shortDescription\": \"postmantest_ProjectIcon-CreateProject-Registered\",\r\n  \"uri\": \"postmantest_ProjectIcon-CreateProject-Registered\",\r\n  \"collaborators\": [\r\n    {\r\n      \"fullName\": \"postmantest_ProjectIcon-CreateProject-Registered\",\r\n      \"role\": \"postmantest_ProjectIcon-CreateProject-Registered\"\r\n    }\r\n  ],\r\n  \"fileId\": {{ProjectIconRegisteredFileId}},\r\n  \"created\": \"2020-04-20T08:24:26.693Z\",\r\n  \"updated\": \"2020-04-20T08:24:26.693Z\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/Project",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Project"
											]
										}
									},
									"response": []
								},
								{
									"name": "ProjectIcon-GetProject-Registered",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var projectName = pm.environment.get(\"projectName\");",
													"var ProjectIconRegisteredFileId = pm.environment.get(\"ProjectIconRegisteredFileId\");",
													"",
													"var jsonData = pm.response.json();",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Project Name is set correctly and matches: \" + projectName, function () {",
													"    pm.expect(jsonData.name).to.eql(projectName);",
													"});",
													"",
													"pm.test(\"ProjectIconId is set correctly and matches: \" + ProjectIconRegisteredFileId, function () {",
													"    pm.expect(jsonData.projectIcon.id).to.eql(ProjectIconRegisteredFileId)",
													"});"
												],
												"type": "text/javascript",
												"id": "4562fe0d-4308-4329-a3ec-756f5b117e2a"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{registeredUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Project/{{ProjectIconProjectId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Project",
												"{{ProjectIconProjectId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "ProjectIcon-GetIcon-Registered",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"eval(pm.environment.get(\"commonTests\"))();\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Response must be valid and have a json body\", function () {\r",
													"    pm.response.to.be.ok;\r",
													"    pm.response.to.be.withBody;\r",
													"    pm.response.to.be.json;\r",
													"});"
												],
												"type": "text/javascript",
												"id": "d73f8d25-7dfc-4af4-8571-7738ff3e05b1"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{registeredUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/file/{{ProjectIconRegisteredFileId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"file",
												"{{ProjectIconRegisteredFileId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "ProjectIcon-UpdateProject-Same-ProjectIcon",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var projectName = pm.environment.get(\"projectNameUpdated\");",
													"",
													"var jsonData = pm.response.json();",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.ok;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Project Name is set correctly and matches: \" + projectName, function () {",
													"    pm.expect(jsonData.name).to.eql(projectName);",
													"});"
												],
												"type": "text/javascript",
												"id": "1c02bb4d-6d68-46f9-8b9e-14db6c6c374e"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{registeredUserIdentityId}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"name\": \"{{projectNameUpdated}}\",\r\n  \"description\": \"postmantest_ProjectIcon-CreateProject-Registered\",\r\n  \"shortDescription\": \"postmantest_ProjectIcon-CreateProject-Registered\",\r\n  \"uri\": \"postmantest_ProjectIcon-CreateProject-Registered\",\r\n  \"collaborators\": [\r\n    {\r\n      \"fullName\": \"postmantest_ProjectIcon-CreateProject-Registered\",\r\n      \"role\": \"postmantest_ProjectIcon-CreateProject-Registered\"\r\n    }\r\n  ],\r\n  \"fileId\": {{ProjectIconRegisteredFileId}},\r\n  \"created\": \"2020-04-20T08:24:26.693Z\",\r\n  \"updated\": \"2020-04-20T08:24:26.693Z\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/Project/{{ProjectIconProjectId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Project",
												"{{ProjectIconProjectId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "ProjectIcon-GetIcon-Registered-After-Edit",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"eval(pm.environment.get(\"commonTests\"))();\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Response must be valid and have a json body\", function () {\r",
													"    pm.response.to.be.ok;\r",
													"    pm.response.to.be.withBody;\r",
													"    pm.response.to.be.json;\r",
													"});"
												],
												"type": "text/javascript",
												"id": "8e3242ab-6764-41ff-a98b-83fc55bc30ee"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{registeredUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/file/{{ProjectIconRegisteredFileId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"file",
												"{{ProjectIconRegisteredFileId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "ProjectIcon-Post-New-File-Registered",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"eval(pm.environment.get(\"commonTests\"))();\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Response includes fileId\", function () {\r",
													"    pm.expect(jsonData.id).to.exist;\r",
													"})\r",
													"\r",
													"pm.environment.set(\"newRegisteredFileId\", jsonData.id);\r",
													"\r",
													"pm.test(\"Response must be valid and have a json body\", function () {\r",
													"     pm.response.to.be.success;\r",
													"     pm.response.to.be.withBody;\r",
													"     pm.response.to.be.json;\r",
													"});"
												],
												"type": "text/javascript",
												"id": "6c354595-f97e-425d-8fc8-8d6b2e97acad"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{registeredUserIdentityId}}"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "File",
													"type": "file",
													"src": "Postman/testimage2.png"
												}
											]
										},
										"url": {
											"raw": "{{apiUrl}}/api/File",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"File"
											]
										}
									},
									"response": []
								},
								{
									"name": "ProjectIcon-UpdateProject-Registered",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var projectName = pm.environment.get(\"projectNameUpdated\");",
													"",
													"var jsonData = pm.response.json();",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.ok;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Project Name is set correctly and matches: \" + projectName, function () {",
													"    pm.expect(jsonData.name).to.eql(projectName);",
													"});"
												],
												"type": "text/javascript",
												"id": "ad3e8d8d-2738-45d3-b93c-7562b4c809fd"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{registeredUserIdentityId}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"name\": \"{{projectNameUpdated}}\",\r\n  \"description\": \"postmantest_ProjectIcon-CreateProject-Registered\",\r\n  \"shortDescription\": \"postmantest_ProjectIcon-CreateProject-Registered\",\r\n  \"uri\": \"postmantest_ProjectIcon-CreateProject-Registered\",\r\n  \"collaborators\": [\r\n    {\r\n      \"fullName\": \"postmantest_ProjectIcon-CreateProject-Registered\",\r\n      \"role\": \"postmantest_ProjectIcon-CreateProject-Registered\"\r\n    }\r\n  ],\r\n  \"fileId\": {{newRegisteredFileId}},\r\n  \"created\": \"2020-04-20T08:24:26.693Z\",\r\n  \"updated\": \"2020-04-20T08:24:26.693Z\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/Project/{{ProjectIconProjectId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Project",
												"{{ProjectIconProjectId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "ProjectIcon-GetUpdatedProject-Registered",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var projectName = pm.environment.get(\"projectName\");",
													"var newRegisteredFileId = pm.environment.get(\"newRegisteredFileId\");",
													"",
													"var jsonData = pm.response.json();",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Project Name is set correctly and matches: \" + projectName, function () {",
													"    pm.expect(jsonData.name).to.eql(projectName);",
													"});",
													"",
													"pm.test(\"ProjectIconId is set correctly and matches: \" + newRegisteredFileId, function () {",
													"    pm.expect(jsonData.projectIcon.id).to.eql(newRegisteredFileId)",
													"});"
												],
												"type": "text/javascript",
												"id": "e963dbd1-7b48-4fd6-81b9-d80fd6d820a3"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{registeredUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Project/{{ProjectIconProjectId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Project",
												"{{ProjectIconProjectId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "ProjectIcon-GetDeletedIcon-Registered",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"eval(pm.environment.get(\"commonTests\"))();\r",
													"\r",
													"pm.test(\"Status code is 404\", function () {\r",
													"    pm.response.to.have.status(404);\r",
													"});\r",
													"\r",
													"pm.test(\"Response must be valid and have a json body\", function () {\r",
													"    pm.response.to.be.notFound;\r",
													"    pm.response.to.be.withBody;\r",
													"    pm.response.to.be.json;\r",
													"});"
												],
												"type": "text/javascript",
												"id": "3b02fa4b-c761-4374-b69e-2acc2f365bba"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{registeredUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/file/{{ProjectIconRegisteredFileId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"file",
												"{{ProjectIconRegisteredFileId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "ProjectIcon-GetNewIcon-Registered",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"eval(pm.environment.get(\"commonTests\"))();\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Response must be valid and have a json body\", function () {\r",
													"    pm.response.to.be.ok;\r",
													"    pm.response.to.be.withBody;\r",
													"    pm.response.to.be.json;\r",
													"});"
												],
												"type": "text/javascript",
												"id": "731fe489-8a1b-4c19-8dd7-bddaf3c4b4d5"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{registeredUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/file/{{newRegisteredFileId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"file",
												"{{newRegisteredFileId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "ProjectIcon-DeleteProject-Registered",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													""
												],
												"type": "text/javascript",
												"id": "c9c22749-2827-4da9-aa1b-229a9417ee31"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{registeredUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Project/{{ProjectIconProjectId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Project",
												"{{ProjectIconProjectId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "ProjectIcon-GetNewIcon-Registered Copy",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"eval(pm.environment.get(\"commonTests\"))();\r",
													"\r",
													"pm.test(\"Status code is 404\", function () {\r",
													"    pm.response.to.have.status(404);\r",
													"});\r",
													"\r",
													"pm.test(\"Response must be valid and have a json body\", function () {\r",
													"    pm.response.to.be.notFound;\r",
													"    pm.response.to.be.withBody;\r",
													"    pm.response.to.be.json;\r",
													"});"
												],
												"type": "text/javascript",
												"id": "ba833c56-1216-4036-b3ca-504a462036de"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{registeredUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/file/{{ProjectIconRegisteredFileId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"file",
												"{{ProjectIconRegisteredFileId}}"
											]
										}
									},
									"response": []
								}
							],
							"description": "Testing if the icons are accessible, and get deleted when they are supposed to ",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										],
										"id": "542a0950-81bc-48ae-8799-47392839b8df"
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										],
										"id": "e9363d7a-60b0-4c31-a06a-02f47b79e7e8"
									}
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "CallToActionOption",
							"item": [
								{
									"name": "CallToActionOption-CreateCallToActionOption-Registered",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 403\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.forbidden;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});",
													""
												],
												"type": "text/javascript",
												"id": "4d647e3c-8f74-4e6f-8b3d-54ae3278b1b0"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "IdentityId",
												"value": "{{registeredUserIdentityId}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"type\": \"Title\",\n    \"value\": \"Provide feedback\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/CallToActionOption",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"CallToActionOption"
											]
										}
									},
									"response": []
								},
								{
									"name": "CallToActionOption-GetAllCallToActionOptions-Registered",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var optionId = parseInt(pm.environment.get(\"callToActionOptionId\"));",
													"",
													"var jsonData = pm.response.json();",
													"",
													"var foundAt;",
													"",
													"function findOption(jsonData, id) {",
													"    for (var i = 0; i < jsonData.length; i++) {",
													"        if (jsonData[i].id == id) {",
													"            return i;",
													"        }",
													"    }",
													"    return -1;",
													"}",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.ok;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Call to action option with id: \" + optionId + \" is in list\", function () {",
													"    foundAt = findOption(jsonData, optionId);",
													"    pm.expect(foundAt).to.not.eql(-1);",
													"});",
													""
												],
												"type": "text/javascript",
												"id": "5cb8d94a-ae9c-469a-b83f-7e226339cedf"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{registeredUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/CallToActionOption",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"CallToActionOption"
											]
										}
									},
									"response": []
								},
								{
									"name": "CallToActionOption-GetCallToActionOptionById-Registered",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"pm.environment.set(\"callToActionOptionType\", jsonData.type);",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.ok;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Call to action option type is lowercase\", function () {",
													"    pm.expect(jsonData.type).to.eql(jsonData.type.toLowerCase());",
													"});",
													"",
													"pm.test(\"Call to action option value is lowercase\", function () {",
													"    pm.expect(jsonData.value).to.eql(jsonData.value.toLowerCase());",
													"});",
													""
												],
												"type": "text/javascript",
												"id": "398e0f53-0546-4ef1-a15a-b1e9a9361e30"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"value": "{{registeredUserIdentityId}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/CallToActionOption/{{callToActionOptionId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"CallToActionOption",
												"{{callToActionOptionId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "CallToActionOption-GetCallToActionOptionByType-Registered",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var callToActionOptionId = parseInt(pm.environment.get(\"callToActionOptionId\"));",
													"",
													"var jsonData = pm.response.json();",
													"",
													"function findOptionType(jsonData, id) {",
													"    for (var i = 0; i < jsonData.length; i++) {",
													"        if (jsonData[i].id == id) {",
													"            return i;",
													"        }",
													"    }",
													"    return -1;",
													"}",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.ok;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Call to action option id is \" + callToActionOptionId, function() {",
													"    foundAt = findOptionType(jsonData, callToActionOptionId);",
													"    pm.expect(foundAt).to.not.eql(-1);",
													"});",
													""
												],
												"type": "text/javascript",
												"id": "00f6c2e5-5dcb-43d7-bda7-9664e5ec600f"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{registeredUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/CallToActionOption/type/{{callToActionOptionType}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"CallToActionOption",
												"type",
												"{{callToActionOptionType}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "CallToActionOption-UpdateCallToActionOption-Registered",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 403\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.forbidden;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});"
												],
												"type": "text/javascript",
												"id": "3fe5e039-87f1-4e07-b240-e4dc64c9a8a2"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "IdentityId",
												"value": "{{registeredUserIdentityId}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"type\": \"Updated type\",\r\n    \"value\": \"Updated value\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/CallToActionOption/{{callToActionOptionId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"CallToActionOption",
												"{{callToActionOptionId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "CallToActionOption-DeleteCallToActionOption-Registered",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 403\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.forbidden;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});"
												],
												"type": "text/javascript",
												"id": "99bc8d06-91ec-4ef6-841a-abf99cd8b62c"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "IdentityId",
												"value": "{{registeredUserIdentityId}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/CallToActionOption/{{callToActionOptionId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"CallToActionOption",
												"{{callToActionOptionId}}"
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										],
										"id": "11bc93a4-0f15-47ae-8304-769feff2e111"
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										],
										"id": "fc84ddda-7fce-44b7-9be7-5a6ba5306f3d"
									}
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "File",
							"item": [
								{
									"name": "Get-Files-Registered",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"eval(pm.environment.get(\"commonTests\"))();\r",
													"\r",
													"pm.test(\"Response must be valid and have a json body\", function () {\r",
													"    pm.response.to.be.withBody;\r",
													"    pm.response.to.be.json;\r",
													"});"
												],
												"type": "text/javascript",
												"id": "e8b56b89-99dc-4afd-9e78-015662778bab"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"value": "{{registeredUserIdentityId}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/File",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"File"
											]
										}
									},
									"response": []
								},
								{
									"name": "Post-File-Registered",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.environment.set(\"registeredFileId\", jsonData.id)\r",
													"\r",
													"eval(pm.environment.get(\"commonTests\"))();\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Response must be valid and have a json body\", function () {\r",
													"     pm.response.to.be.success;\r",
													"     pm.response.to.be.withBody;\r",
													"     pm.response.to.be.json;\r",
													"});"
												],
												"type": "text/javascript",
												"id": "53ef2e5d-7723-406e-be2a-303bfdaf0c56"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "IdentityId",
												"value": "{{registeredUserIdentityId}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "File",
													"type": "file",
													"src": "Postman/testimage.png"
												}
											]
										},
										"url": {
											"raw": "{{apiUrl}}/api/File",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"File"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete-File-Registered",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"eval(pm.environment.get(\"commonTests\"))();\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Response must be valid\", function () {\r",
													"     pm.response.to.be.ok;\r",
													"});"
												],
												"type": "text/javascript",
												"id": "1bf134b6-f62f-491d-afd9-a7b8b55d0f0e"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "IdentityId",
												"value": "{{registeredUserIdentityId}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/File/{{registeredFileId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"File",
												"{{registeredFileId}}"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Portfolio",
							"item": [
								{
									"name": "Portoflio-CreatePortfolio-Registered",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3001d7f9-6727-4478-898d-10c7d156989f",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));\r",
													"var portfolioTitle = pm.environment.get(\"portfolioTitle\");\r",
													"var registeredUserId = pm.environment.get(\"registeredUserId\");\r",
													" \r",
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.environment.set(\"portfolioId\", jsonData.id);\r",
													"\r",
													"pm.test(\"Status code is 201\", function () {\r",
													"    pm.response.to.have.status(201);\r",
													"});\r",
													"\r",
													"pm.test(\"Response must be valid and have a json body\", function () {\r",
													"     pm.response.to.be.success;\r",
													"     pm.response.to.be.withBody;\r",
													"     pm.response.to.be.json;\r",
													"});\r",
													"\r",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);\r",
													"});\r",
													"\r",
													"pm.test(\"portfolioTitle title is set correctly and matching: \" + portfolioTitle, function () {\r",
													"    pm.expect(jsonData.title).to.eql(portfolioTitle);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "IdentityId",
												"value": "{{registeredUserIdentityId}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"template\": 1,\r\n  \"title\": \"{{portfolioTitle}}\",\r\n  \"publicUri\": \"This is a test uri\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/portfolio",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"portfolio"
											]
										}
									},
									"response": []
								},
								{
									"name": "Portfolio-GetPortfolio-Registered",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));\r",
													"var portfolioTitle = pm.environment.get(\"portfolioTitle\");\r",
													"\r",
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);\r",
													"});\r",
													"\r",
													"pm.test(\"Response must be valid and have a json body\", function () {\r",
													"    pm.response.to.be.ok;\r",
													"    pm.response.to.be.withBody;\r",
													"    pm.response.to.be.json;\r",
													"});\r",
													"\r",
													"pm.test(\"portfolio title is set correctly and matches: \" + portfolioTitle, function () {\r",
													"    pm.expect(jsonData.title).to.eql(portfolioTitle);\r",
													"});"
												],
												"type": "text/javascript",
												"id": "24c9ca16-20b8-475b-b22d-460a4e690d15"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"value": "{{registeredUserIdentityId}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/portfolio/{{portfolioId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"portfolio",
												"{{portfolioId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Portfolio-GetPortfolio-Other-Registered",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);\r",
													"});\r",
													"\r",
													"pm.test(\"Response must be valid and have a json body\", function () {\r",
													"    pm.response.to.be.ok;\r",
													"    pm.response.to.be.withBody;\r",
													"    pm.response.to.be.json;\r",
													"});"
												],
												"type": "text/javascript",
												"id": "34240d4d-7efa-4968-a41f-34583d6a3104"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"value": "{{registeredUserIdentityId}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/portfolio/1",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"portfolio",
												"1"
											]
										}
									},
									"response": []
								},
								{
									"name": "Porfolio-UpdatePortfolio-Other-Registered",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);\r",
													"});\r",
													"\r",
													"pm.test(\"Response must be valid and have a json body\", function () {\r",
													"    pm.response.to.be.ok;\r",
													"    pm.response.to.be.withBody;\r",
													"    pm.response.to.be.json;\r",
													"});"
												],
												"type": "text/javascript",
												"id": "f3c96cf5-5734-41ac-89ad-660b266c39f9"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "IdentityId",
												"value": "{{registeredUserIdentityId}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"template\": 1,\r\n  \"title\": \"{{portfolioTitle}}\",\r\n  \"publicUri\": \"This is a test uri\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/portfolio/{{portfolioId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"portfolio",
												"{{portfolioId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "PortfolioItem-CreatePortfolioItem-Registered",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "56629863-749c-4ebe-a77e-2056590f5307",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));\r",
													"var administratorUserId = parseInt(pm.environment.get(\"administratorUserId\"));\r",
													"var portfolioId = parseInt(pm.environment.get(\"portfolioId\"));\r",
													"var projectId = parseInt(pm.environment.get(\"adminProjectId\"));\r",
													" \r",
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.environment.set(\"portfolioItemId\", jsonData.id);\r",
													"\r",
													"pm.test(\"Status code is 201\", function () {\r",
													"    pm.response.to.have.status(201);\r",
													"});\r",
													"\r",
													"pm.test(\"Response must be valid and have a json body\", function () {\r",
													"     pm.response.to.be.success;\r",
													"     pm.response.to.be.withBody;\r",
													"     pm.response.to.be.json;\r",
													"});\r",
													"\r",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);\r",
													"});\r",
													"\r",
													"pm.test(\"portfolioId title is set correctly and matching: \" + portfolioId, function () {\r",
													"    pm.expect(jsonData.portfolioId).to.eql(portfolioId);\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "IdentityId",
												"value": "{{registeredUserIdentityId}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"position\": 0,\r\n  \"type\": 0,\r\n  \"content\": \"string\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/portfolio/item?portfolioId={{portfolioId}}&projectId={{projectId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"portfolio",
												"item"
											],
											"query": [
												{
													"key": "portfolioId",
													"value": "{{portfolioId}}"
												},
												{
													"key": "projectId",
													"value": "{{projectId}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "PortfolioItem-UpdatePortfolioItem-Registered",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));\r",
													"var administratorUserId = parseInt(pm.environment.get(\"administratorUserId\"));\r",
													"var content = \"this is a put request\";\r",
													" \r",
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.environment.set(\"portfolioId\", jsonData.id);\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Response must be valid and have a json body\", function () {\r",
													"     pm.response.to.be.success;\r",
													"     pm.response.to.be.withBody;\r",
													"     pm.response.to.be.json;\r",
													"});\r",
													"\r",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);\r",
													"});\r",
													"\r",
													"pm.test(\"portfolio item content is set correctly and matching: \" + content, function () {\r",
													"    pm.expect(jsonData.content).to.eql(content);\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript",
												"id": "30954217-176c-48d5-9e27-05c5edd43761"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "IdentityId",
												"value": "{{registeredUserIdentityId}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"position\": 0,\r\n  \"type\": 0,\r\n  \"content\": \"this is a put request\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/portfolio/item/{{portfolioItemId}}?portfolioId={{portfolioId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"portfolio",
												"item",
												"{{portfolioItemId}}"
											],
											"query": [
												{
													"key": "portfolioId",
													"value": "{{portfolioId}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "PortfolioItem-GetPortfolioItem-Registered",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));\r",
													"var portfolioId = parseInt(pm.environment.get(\"portfolioId\"));\r",
													"var portfolioItemProjectId = parseInt(pm.environment.get(\"portfolioId\"));\r",
													"\r",
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);\r",
													"});\r",
													"\r",
													"pm.test(\"Response must be valid and have a json body\", function () {\r",
													"    pm.response.to.be.ok;\r",
													"    pm.response.to.be.withBody;\r",
													"    pm.response.to.be.json;\r",
													"});\r",
													"\r",
													"pm.test(\"portfolio item exists on portfolio\", function() {\r",
													"    jsonData.portfolioItem.forEach(function(portfolioItem) {\r",
													"        pm.expect(portfolioItem).to.have.property(\"portfolioId\", 2);\r",
													"    });\r",
													"});"
												],
												"type": "text/javascript",
												"id": "544c9ace-83d3-4302-b1e6-eac5c397e816"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"value": "{{registeredUserIdentityId}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/portfolio/{{portfolioItemId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"portfolio",
												"{{portfolioItemId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "PortfolioItem-DeletePortofolioItem-Registered",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);\r",
													"});\r",
													"\r",
													"pm.test(\"Response must be valid\", function () {\r",
													"     pm.response.to.be.ok;\r",
													"});"
												],
												"type": "text/javascript",
												"id": "295542a6-edec-42f2-9043-3817b5d8039c"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "IdentityId",
												"value": "{{registeredUserIdentityId}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/portfolio/item/{{portfolioItemId}}?portfolioId={{portfolioId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"portfolio",
												"item",
												"{{portfolioItemId}}"
											],
											"query": [
												{
													"key": "portfolioId",
													"value": "{{portfolioId}}"
												}
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Cleanup Registered",
							"item": [
								{
									"name": "Project-DeleteProject-Self-Registered",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});"
												],
												"type": "text/javascript",
												"id": "23277e37-e9ae-467f-a04f-f5adf10a5571"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{registeredUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Project/{{projectId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Project",
												"{{projectId}}"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Cleanup Administrator",
							"item": [
								{
									"name": "CallToActionOption-DeleteCallToActionOption-Administrator",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});"
												],
												"type": "text/javascript",
												"id": "8ba1820f-85ef-4297-ae02-0ad43582ecea"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{administratorUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/CallToActionOption/{{callToActionOptionId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"CallToActionOption",
												"{{callToActionOptionId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Project-DeleteProject-Administrator",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript",
												"id": "78212d1f-caac-457f-8ae2-e5ed3eb7b278"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "IdentityId",
												"value": "{{administratorUserIdentityId}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Project/{{adminProjectId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Project",
												"{{adminProjectId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "User-DeleteUser-Administrator",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});"
												],
												"type": "text/javascript",
												"id": "79486b1d-201b-48d7-8963-1606b70dde11"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{administratorUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/User/{{createdUserId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"User",
												"{{createdUserId}}"
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										],
										"id": "3fbf68a6-5fd4-4faa-9cfe-8968969546fe"
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										],
										"id": "20610de0-bc2d-4f3c-92d3-f12091df9cef"
									}
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Data Officer",
					"item": [
						{
							"name": "Preparation",
							"item": [
								{
									"name": "Institution-CreateInstitution",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"var institutionName = pm.environment.get(\"institutionName\");",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.environment.set(\"createdInstitutionId\", jsonData.id);",
													"",
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.success;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});",
													"",
													"pm.test(\"Check if created Name matches: \" + institutionName, function () {",
													"    pm.expect(jsonData.name).to.eql(institutionName);",
													"});"
												],
												"type": "text/javascript",
												"id": "03a951cb-c382-42cd-9fc3-c9f930355f89"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{administratorUserIdentityId}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"{{institutionName}}\",\n    \"description\": \"postmantest_DataOfficer-Institution-CreateInstitution\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/Institution",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Institution"
											]
										}
									},
									"response": []
								},
								{
									"name": "User-CreateUserWithoutInstitution",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"var userName = pm.environment.get(\"userName\");",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.environment.set(\"createdUserId\", jsonData.id);",
													"pm.environment.set(\"identityId\", jsonData.id);",
													"",
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.success;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});",
													"",
													"pm.test(\"Check if created Username matches: \" + userName, function () {",
													"    pm.expect(jsonData.name).to.eql(userName);",
													"});"
												],
												"type": "text/javascript",
												"id": "a03542d4-fc3e-44c5-83d5-0fc4c3b44806"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{administratorUserIdentityId}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"identityId\": \"9996\",\n    \"name\": \"{{userName}}\",\n    \"email\": \"postmantest_DataOfficer-User-CreateUserWithoutInstitution@example.com\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/User",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"User"
											]
										}
									},
									"response": []
								},
								{
									"name": "User-CreateUserWithInstitution",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"var userName = pm.environment.get(\"userName\");",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.environment.set(\"createdUserWithInstitutionId\", jsonData.id);",
													"",
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.success;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});",
													"",
													"pm.test(\"Check if created Username matches: \" + userName, function () {",
													"    pm.expect(jsonData.name).to.eql(userName);",
													"});"
												],
												"type": "text/javascript",
												"id": "46f356c7-e052-4436-a275-184c618cd39e"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{administratorUserIdentityId}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"identityId\": \"9996\",\n    \"name\": \"{{userName}}\",\n    \"email\": \"postmantest_DataOfficer-User-CreateUserWithInstitution@example.com\",\n    \"institutionId\": {{institutionIdFromUser}}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/User",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"User"
											]
										}
									},
									"response": []
								},
								{
									"name": "Project-CreateProject-DifferentInstitution",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"var administratorUserId = parseInt(pm.environment.get(\"administratorUserId\"));",
													"var projectName = pm.environment.get(\"projectName\");",
													"var adminUserName = pm.environment.get(\"adminUserName\");",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.environment.set(\"projectId\", jsonData.id);",
													"pm.environment.set(\"adminProjectId\", jsonData.id);",
													"",
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.success;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});",
													"",
													"pm.test(\"Project Name is set correctly and matching: \" + projectName, function () {",
													"    pm.expect(jsonData.name).to.eql(projectName);",
													"});",
													"",
													"pm.test(\"User Name is correct and matching: \" + adminUserName, function () {",
													"    pm.expect(jsonData.user.name).to.eql(adminUserName);",
													"});",
													"",
													"pm.test(\"Identity ID is correct and matching: \" + administratorUserId, function () {",
													"    pm.expect(parseInt(jsonData.user.id)).to.eql(administratorUserId);",
													"});"
												],
												"type": "text/javascript",
												"id": "c1e83083-8d91-403b-a8b7-ab7048eed19d"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{administratorUserIdentityId}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"name\": \"{{projectName}}\",\r\n  \"description\": \"postmantest_DataOfficer-Project-CreateProject-DifferentInstitution\",\r\n  \"shortDescription\": \"postmantest_DataOfficer-Project-CreateProject-DifferentInstitution\",\r\n  \"uri\": \"postmantest_DataOfficer-Project-CreateProject-DifferentInstitution\",\r\n  \"collaborators\": [\r\n    {\r\n      \"fullName\": \"postmantest_DataOfficer-Project-CreateProject-DifferentInstitution\",\r\n      \"role\": \"postmantest_DataOfficer-Project-CreateProject-DifferentInstitution\"\r\n    }\r\n  ],\r\n  \"created\": \"2020-04-20T08:24:26.693Z\",\r\n  \"updated\": \"2020-04-20T08:24:26.693Z\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/Project",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Project"
											]
										}
									},
									"response": []
								},
								{
									"name": "Project-CreateProject-SameInstitution",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.environment.set(\"projectIdWithInstitution\", jsonData.id);",
													"",
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.success;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});",
													""
												],
												"type": "text/javascript",
												"id": "f4794b2e-d7cb-4b84-8c05-3d42843ff134"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "\"9996\""
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"name\": \"{{projectName}}\",\r\n  \"description\": \"postmantest_DataOfficer-Project-CreateProject-SameInstitution\",\r\n  \"shortDescription\": \"postmantest_DataOfficer-Project-CreateProject-SameInstitution\",\r\n  \"uri\": \"postmantest_DataOfficer-Project-CreateProject-SameInstitution\",\r\n  \"collaborators\": [\r\n    {\r\n      \"fullName\": \"postmantest_DataOfficer-Project-CreateProject-SameInstitution\",\r\n      \"role\": \"postmantest_DataOfficer-Project-CreateProject-SameInstitution\"\r\n    }\r\n  ],\r\n  \"created\": \"2020-04-20T08:24:26.693Z\",\r\n  \"updated\": \"2020-04-20T08:24:26.693Z\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/Project",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Project"
											]
										}
									},
									"response": []
								},
								{
									"name": "Highlight-CreateHighlight",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"var identityId = parseInt(pm.environment.get(\"identityId\"));",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.environment.set(\"highlightId\", jsonData.id);",
													"",
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.success;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});"
												],
												"type": "text/javascript",
												"id": "830f3a18-b5d9-4f51-8ddd-42037f860b70"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"var current_timestamp = new Date();\r",
													"postman.setEnvironmentVariable(\"current_timestamp\", current_timestamp.toISOString());\r",
													"\r",
													"var future_timestamp = new Date(Date.now() +(2 * 86400000));\r",
													"postman.setEnvironmentVariable(\"future_timestamp\", future_timestamp.toISOString());\r",
													""
												],
												"type": "text/javascript",
												"id": "09626712-b9d4-4a45-988d-65c20207dd23"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{administratorUserIdentityId}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"projectId\": {{projectId}},\r\n  \"startDate\": \"{{current_timestamp}}\",\r\n  \"endDate\": \"{{future_timestamp}}\",\r\n  \"description\" : \"postmantest_DataOfficer-Highlight-CreateHighlight\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/Highlight",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Highlight"
											]
										}
									},
									"response": []
								},
								{
									"name": "Embed-CreateEmbed-DifferentInstitution",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.environment.set(\"embedGuid\", jsonData.guid);",
													"pm.environment.set(\"adminEmbedGuid\", jsonData.guid);",
													"pm.environment.set(\"embeddedProjectId\", jsonData.project.id);",
													"",
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.success;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});"
												],
												"type": "text/javascript",
												"id": "bab30a63-ea89-435a-be9b-ea166718a050"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{administratorUserIdentityId}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"projectId\": {{projectId}}\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/Embed",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Embed"
											]
										}
									},
									"response": []
								},
								{
									"name": "Embed-CreateEmbed-SameInstitution",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.environment.set(\"embedGuidWithInstitution\", jsonData.guid);",
													"",
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.success;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});"
												],
												"type": "text/javascript",
												"id": "4688b878-b814-4593-897b-2b33c386352b"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "\"9996\""
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"projectId\": {{projectIdWithInstitution}}\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/Embed",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Embed"
											]
										}
									},
									"response": []
								},
								{
									"name": "CallToActionOption-CreateCallToActionOption",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.environment.set(\"callToActionOptionId\", jsonData.id);",
													"",
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.success;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});",
													"",
													"pm.test(\"Call to action option type is lowercase\", function () {",
													"    pm.expect(jsonData.type).to.eql(jsonData.type.toLowerCase());",
													"});",
													"",
													"pm.test(\"Call to action option value is lowercase\", function () {",
													"    pm.expect(jsonData.value).to.eql(jsonData.value.toLowerCase());",
													"});",
													""
												],
												"type": "text/javascript",
												"id": "e5b41c7b-9780-4575-ac7b-d8668dc62a5e"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{administratorUserIdentityId}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"type\": \"Title\",\r\n  \"value\": \"Feedback\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/CallToActionOption",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"CallToActionOption"
											]
										}
									},
									"response": []
								}
							],
							"description": "For some requests, we need to have data available. The variables need to be filled so the request can succeed. We put these preparation requests in this folder. We will clean them up in the cleanup folder.",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										],
										"id": "0749b821-9c55-44fb-8b3e-55cd69ade1a8"
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										],
										"id": "682455f3-8715-406f-a116-6f87beda4075"
									}
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "User",
							"item": [
								{
									"name": "User-CreateUser-DataOfficer",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 403\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.forbidden;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});",
													""
												],
												"type": "text/javascript",
												"id": "5022c70c-646f-43f9-afec-6e9be520c8c6"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{dataOfficerUserIdentityId}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"identityId\": \"{{createdUserId}}\",\n    \"name\": \"{{userName}}\",\n    \"email\": \"postmantest_email@example.com\",\n    \"institutionId\": {{createdInstitutionId}}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/User",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"User"
											]
										}
									},
									"response": []
								},
								{
									"name": "User-UpdateUser-SelfWithSameInstitution-DataOfficer",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var updatedAliceEmail = pm.environment.get(\"updatedAliceEmail\");",
													"",
													"var jsonData = pm.response.json();",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.ok;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Check if email update matches: \" + updatedAliceEmail, function () {",
													"    pm.expect(jsonData.email).to.eql(updatedAliceEmail);",
													"});",
													"",
													"pm.test(\"Check if institution id is 1\", function () {",
													"    pm.expect(jsonData.institution.id).to.equal(1);",
													"});"
												],
												"type": "text/javascript",
												"id": "62146253-0ecb-4fb8-b4a7-8594834c613e"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{dataOfficerUserIdentityId}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"name\": \"postman_DataOfficer-alicez\",\r\n  \"email\": \"{{updatedAliceEmail}}\",\r\n  \"identityId\": \"{{dataOfficerUserIdentityId}}\",\r\n  \"institutionId\": 1\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/User/{{dataOfficerUserId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"User",
												"{{dataOfficerUserId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "User-UpdateUser-SelfWithWrongInstitution-DataOfficer",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 401\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.unauthorized;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Instance guid should be: DD72C521-1D06-4E11-A0E0-AAE515E7F900\", function () {",
													"    pm.expect(jsonData.instance).to.equal(\"DD72C521-1D06-4E11-A0E0-AAE515E7F900\");",
													"});",
													""
												],
												"type": "text/javascript",
												"id": "f82f7855-2844-40c3-b5a9-9970bfed1da8"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{dataOfficerUserIdentityId}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"name\": \"postman_DataOfficer-alicez\",\r\n  \"email\": \"{{updatedAliceEmail}}\",\r\n  \"identityId\": \"{{dataOfficerUserIdentityId}}\",\r\n  \"institutionId\": {{createdInstitutionId}}\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/User/{{dataOfficerUserId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"User",
												"{{dataOfficerUserId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "User-UpdateUser-OtherWithSameInstitution-SameInstitutionId-DataOfficer",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"var institutionId = pm.environment.get(\"institutionIdFromUser\");",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.ok;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Institution Id is \" + institutionId, function() {",
													"    pm.expect(jsonData.institution.id).to.equal(parseInt(institutionId));",
													"})"
												],
												"type": "text/javascript",
												"id": "d22bbd9b-afd4-4225-a108-9c8060187e49"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{dataOfficerUserIdentityId}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"name\": \"bobz\",\r\n  \"email\": \"BobSmith@email.com\",\r\n  \"institutionId\": {{institutionIdFromUser}},\r\n  \"identityId\": \"9996\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/User/{{createdUserWithInstitutionId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"User",
												"{{createdUserWithInstitutionId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "User-GetUser-Other-SameInstitution-DataOfficer",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.ok;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});",
													""
												],
												"type": "text/javascript",
												"id": "12b0fdae-cde5-4d1e-8982-f556bf230eb8"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{dataOfficerUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/User/{{createdUserWithInstitutionId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"User",
												"{{createdUserWithInstitutionId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "User-UpdateUser-OtherWithSameInstitution-NoInstitutionId-DataOfficer",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.ok;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Check if institution is null\", function () {",
													"    pm.expect(jsonData.institution).to.equal(null);",
													"});"
												],
												"type": "text/javascript",
												"id": "d06e05e0-58f4-4128-b14c-0736c77de9e0"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{dataOfficerUserIdentityId}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"name\": \"bobz\",\r\n  \"email\": \"BobSmith@email.com\",\r\n  \"identityId\": \"9996\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/User/{{createdUserWithInstitutionId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"User",
												"{{createdUserWithInstitutionId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "User-UpdateUser-Other-DataOfficer",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 401\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.unauthorized;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});"
												],
												"type": "text/javascript",
												"id": "8e3f402a-37ed-45f8-8b25-169d7cabaae6"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{dataOfficerUserIdentityId}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"name\": \"bobz\",\r\n  \"email\": \"BobSmith@email.com\",\r\n  \"identityId\": \"9996\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/User/{{createdUserWithInstitutionId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"User",
												"{{createdUserWithInstitutionId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "User-GetUser-Other-DifferentInstitution-DataOfficer",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 403\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.forbidden;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});",
													""
												],
												"type": "text/javascript",
												"id": "a946912c-352c-4039-8814-8b5e2180e862"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{dataOfficerUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/User/{{createdUserId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"User",
												"{{createdUserId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "User-GetUser-Self-DataOfficer",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var aliceIdentityId = parseInt(pm.environment.get(\"dataOfficerUserIdentityId\"));",
													"",
													"var jsonData = pm.response.json();",
													"pm.environment.set(\"dataOfficerUserId\", jsonData.id);",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.ok;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Identity ID is correct and matching: \" + aliceIdentityId, function () {",
													"    pm.expect(parseInt(jsonData.identityId)).to.eql(aliceIdentityId);",
													"});"
												],
												"type": "text/javascript",
												"id": "5c3497fb-46b0-43c5-8c63-950a9d252cce"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{dataOfficerUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/User",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"User"
											]
										}
									},
									"response": []
								}
							],
							"description": "Requests executed as the Alice user with the registered role.",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										],
										"id": "efc793f0-ef49-482c-a7e2-b87453907f8f"
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										],
										"id": "721b5849-3caa-48dd-82f3-2d127db08087"
									}
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Project",
							"item": [
								{
									"name": "Project-CreateProject-DataOfficer",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var registeredUserId = pm.environment.get(\"dataOfficerUserId\");",
													"var projectName = pm.environment.get(\"projectName\");",
													"",
													"var jsonData = pm.response.json();",
													"pm.environment.set(\"projectId\", jsonData.id);",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Project Name is set correctly and matches: \" + projectName, function () {",
													"    pm.expect(jsonData.name).to.eql(projectName);",
													"});",
													"",
													"pm.test(\"Identity Id is set correctly and matches: \" + registeredUserId, function () {",
													"    pm.expect(jsonData.user.id).to.eql(registeredUserId);",
													"});"
												],
												"type": "text/javascript",
												"id": "6c49d650-b504-4b60-aaff-92f55bbc3289"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{dataOfficerUserIdentityId}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"name\": \"{{projectName}}\",\r\n  \"description\": \"postmantest_Project-CreateProject-DataOfficer\",\r\n  \"shortDescription\": \"postmantest_Project-CreateProject-DataOfficer\",\r\n  \"uri\": \"postmantest_Project-CreateProject-DataOfficer\",\r\n  \"collaborators\": [\r\n    {\r\n      \"fullName\": \"postmantest_Project-CreateProject-DataOfficer\",\r\n      \"role\": \"postmantest_Project-CreateProject-DataOfficer\"\r\n    }\r\n  ],\r\n  \"created\": \"2020-04-20T08:24:26.693Z\",\r\n  \"updated\": \"2020-04-20T08:24:26.693Z\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/Project",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Project"
											]
										}
									},
									"response": []
								},
								{
									"name": "Project-GetAllProjects-DataOfficer",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var projectName = pm.environment.get(\"projectName\");",
													"",
													"var jsonData = pm.response.json();",
													"",
													"var foundAt;",
													"",
													"function findProject(jsonData, name) {",
													"    for (var i = 0; i < jsonData.results.length; i++) {",
													"        if (jsonData.results[i].name == name) {",
													"            return i;",
													"        }",
													"    }",
													"    return -1;",
													"}",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Project: \" + projectName + \" is in list\", function () {",
													"    foundAt = findProject(jsonData, projectName);",
													"    pm.expect(foundAt).to.not.eql(-1);",
													"});",
													"",
													"pm.test(\"Project Name is set correctly and matching: \" + projectName, function () {",
													"    pm.expect(jsonData.results[foundAt].name).to.eql(projectName);",
													"});"
												],
												"type": "text/javascript",
												"id": "8507abb8-a1dd-4e8f-9577-6d50a3582c21"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{dataOfficerUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Project",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Project"
											]
										}
									},
									"response": []
								},
								{
									"name": "Project-GetProject-Self-DataOfficer",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var projectName = pm.environment.get(\"projectName\");",
													"",
													"var jsonData = pm.response.json();",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Project Name is set correctly and matches: \" + projectName, function () {",
													"    pm.expect(jsonData.name).to.eql(projectName);",
													"});"
												],
												"type": "text/javascript",
												"id": "784a68e1-cfb5-4fdc-8670-4a815e461c30"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{dataOfficerUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Project/{{projectId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Project",
												"{{projectId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Project-GetProject-Other-DataOfficer",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json;",
													"});"
												],
												"type": "text/javascript",
												"id": "8b81f3aa-f0c6-4b71-be8d-3b5c056dc3b3"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{dataOfficerUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Project/{{adminProjectId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Project",
												"{{adminProjectId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Project-UpdateProject-Self-DataOfficer",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var projectName = pm.environment.get(\"projectNameUpdated\");",
													"",
													"var jsonData = pm.response.json();",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.ok;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Project Name is set correctly and matches: \" + projectName, function () {",
													"    pm.expect(jsonData.name).to.eql(projectName);",
													"});"
												],
												"type": "text/javascript",
												"id": "c2ab7c8f-1f29-432f-9fff-bd33c0fbee21"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{dataOfficerUserIdentityId}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"name\": \"{{projectNameUpdated}}\",\r\n  \"description\": \"postmantest_Project-UpdateProject-Self-DataOfficer\",\r\n  \"shortDescription\": \"postmantest_Project-UpdateProject-Self-DataOfficer\",\r\n  \"uri\": \"postmantest_Project-UpdateProject-Self-DataOfficer\",\r\n  \"collaborators\": [\r\n    {\r\n      \"fullName\": \"postmantest_Project-UpdateProject-Self-DataOfficer\",\r\n      \"role\": \"postmantest_Project-UpdateProject-Self-DataOfficer\"\r\n    }\r\n  ],\r\n  \"created\": \"2020-04-20T08:24:26.693Z\",\r\n  \"updated\": \"2020-04-20T08:24:26.693Z\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/Project/{{projectId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Project",
												"{{projectId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Project-UpdateProject-Other-DataOfficer",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 401\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"    pm.response.to.be.unauthorized;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json;",
													"});"
												],
												"type": "text/javascript",
												"id": "d791a94e-460e-4ea6-af38-7329627c414c"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{dataOfficerUserIdentityId}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"name\": \"{{projectNameUpdated}}\",\r\n  \"description\": \"postmantest_description\",\r\n  \"shortDescription\": \"postmantest_shortdesc\",\r\n  \"uri\": \"postmantest_uri\",\r\n  \"collaborators\": [\r\n    {\r\n      \"fullName\": \"postmantest_collfullname\",\r\n      \"role\": \"postmantest_collrole\"\r\n    }\r\n  ],\r\n  \"created\": \"2020-04-20T08:24:26.693Z\",\r\n  \"updated\": \"2020-04-20T08:24:26.693Z\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/Project/{{adminProjectId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Project",
												"{{adminProjectId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Project-LikeProject-DataOfficer",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"eval(pm.environment.get(\"commonTests\"))();\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Response must be valid and have a json body\", function () {\r",
													"     pm.response.to.be.ok;\r",
													"     pm.response.to.be.withBody;\r",
													"     pm.response.to.be.json;\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"id": "cb569769-59c5-4683-8896-5660fb0ed340"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{dataOfficerUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Project/like/{{projectId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Project",
												"like",
												"{{projectId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Project-DeleteLikeProject-DataOfficer",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"eval(pm.environment.get(\"commonTests\"))();\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Response must be valid and have a json body\", function () {\r",
													"     pm.response.to.be.ok;\r",
													"     pm.response.to.be.withBody;\r",
													"     pm.response.to.be.json;\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"id": "62b85f84-8833-4f8b-83ee-09cbac8e154b"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{dataOfficerUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Project/like/{{projectId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Project",
												"like",
												"{{projectId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Project-DeleteProject-Other-OtherInstitution-DataOfficer",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"",
													"pm.test(\"Status code is 401\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.unauthorized;",
													"});"
												],
												"type": "text/javascript",
												"id": "8be0c3e9-4328-4fea-a9bd-34c5898d3c6a"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{dataOfficerUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Project/{{projectToBeDeletedByUnauthorizedRoles}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Project",
												"{{projectToBeDeletedByUnauthorizedRoles}}"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Embed",
							"item": [
								{
									"name": "Embed-CreateEmbed-Self-DataOfficer",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"pm.environment.set(\"embedGuid\", jsonData.guid);",
													"pm.environment.set(\"embeddedProjectId\", jsonData.project.id);",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.success;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});",
													""
												],
												"type": "text/javascript",
												"id": "316e96e1-867c-41ba-ae9a-256ca58613c5"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{dataOfficerUserIdentityId}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"projectId\": {{projectId}}\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/Embed",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Embed"
											]
										}
									},
									"response": []
								},
								{
									"name": "Embed-CreateEmbed-Other-DataOfficer",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 401\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.unauthorized;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});"
												],
												"type": "text/javascript",
												"id": "dd40ff2d-0510-4e5c-a803-c2b6c98f7ecc"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{dataOfficerUserIdentityId}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"projectId\": {{adminProjectId}}\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/Embed",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Embed"
											]
										}
									},
									"response": []
								},
								{
									"name": "Embed-GetAllEmbeds-DataOfficer",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 403\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.forbidden;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});"
												],
												"type": "text/javascript",
												"id": "d437c4e3-5bb0-42a5-8471-c49a2e9e07f8"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{dataOfficerUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Embed",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Embed"
											]
										}
									},
									"response": []
								},
								{
									"name": "Embed-GetEmbed-DataOfficer",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var embeddedProjectId = parseInt(pm.environment.get(\"embeddedProjectId\"))",
													"",
													"var jsonData = pm.response.json();",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Embed matches: \" + embeddedProjectId, function () {",
													"    pm.expect(jsonData.id).to.eql(embeddedProjectId);",
													"});"
												],
												"type": "text/javascript",
												"id": "12519b64-fe0a-4fcc-97c8-4ac3607c12b3"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{dataOfficerUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Embed/{{embedGuid}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Embed",
												"{{embedGuid}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Embed-DeleteEmbed-Self-DataOfficer",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.ok;",
													"});"
												],
												"type": "text/javascript",
												"id": "d3774bef-d907-452d-8e1e-7617bb42ae78"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{dataOfficerUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Embed/{{embedGuid}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Embed",
												"{{embedGuid}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Embed-DeleteEmbed-Other-DifferentInstitution-DataOfficer",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"",
													"pm.test(\"Status code is 401\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.unauthorized;",
													"});"
												],
												"type": "text/javascript",
												"id": "4694495d-b753-46c5-9411-51c94a6a0901"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{dataOfficerUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Embed/{{adminEmbedGuid}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Embed",
												"{{adminEmbedGuid}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Embed-DeleteEmbed-Other-SameInstitution-DataOfficer",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.ok;",
													"});"
												],
												"type": "text/javascript",
												"id": "d10cdb4c-1917-494c-9ca8-9a051d59bffc"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{dataOfficerUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Embed/{{embedGuidWithInstitution}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Embed",
												"{{embedGuidWithInstitution}}"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Highlight",
							"item": [
								{
									"name": "Highlight-CreateHighlight-DataOfficer",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 403\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.forbidden;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});"
												],
												"type": "text/javascript",
												"id": "123b840a-b302-4c5e-8292-6d1a542b4b22"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"var current_timestamp = new Date();\r",
													"postman.setEnvironmentVariable(\"current_timestamp\", current_timestamp.toISOString());\r",
													"\r",
													"var future_timestamp = new Date(Date.now() +(2 * 86400000));\r",
													"postman.setEnvironmentVariable(\"future_timestamp\", future_timestamp.toISOString());\r",
													""
												],
												"type": "text/javascript",
												"id": "9700dbb9-97ba-42ae-b0da-fdb7fa46122c"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{dataOfficerUserIdentityId}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"projectId\": {{projectId}},\r\n  \"startDate\": \"{{current_timestamp}}\",\r\n  \"endDate\": \"{{future_timestamp}}\",\r\n  \"description\" : \"Lorem Ipsum\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/Highlight",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Highlight"
											]
										}
									},
									"response": []
								},
								{
									"name": "Highlight-GetAllActiveHighlights-DataOfficer",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var projectId = pm.environment.get(\"adminProjectId\");",
													"",
													"var jsonData = pm.response.json();",
													"",
													"var foundAt;",
													"",
													"function findItem(jsonData, item) {",
													"    for (var i = 0; i < jsonData.length; i++) {",
													"        if (jsonData[i].projectId == item) {",
													"            return i;",
													"        }",
													"    }",
													"    return -1;",
													"}",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Highlight is in list and matching: \" + projectId, function () {",
													"    foundAt = findItem(jsonData, projectId);",
													"    pm.expect(foundAt).to.not.eql(-1);",
													"});"
												],
												"type": "text/javascript",
												"id": "1fbe64a0-724e-4194-94b3-8214826d10e9"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{dataOfficerUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Highlight",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Highlight"
											]
										}
									},
									"response": []
								},
								{
									"name": "Highlight-GetHighlight-DataOfficer",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var identityId = parseInt(pm.environment.get(\"identityId\"));",
													"var highlightId = parseInt(pm.environment.get(\"highlightId\"));",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.environment.set(\"highlightStartDate\", jsonData.startDate);",
													"pm.environment.set(\"highlightEndDate\", jsonData.endDate);",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Highlight Id matches: \" + highlightId, function () {",
													"    pm.expect(jsonData.id).to.eql(highlightId);",
													"});"
												],
												"type": "text/javascript",
												"id": "7a33730d-7599-4c91-a196-ee4e88d93a72"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{dataOfficerUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Highlight/{{highlightId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Highlight",
												"{{highlightId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Highlight-GetHighlight-ByProject-DataOfficer",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 403\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"    pm.response.to.be.forbidden;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json;",
													"});",
													""
												],
												"type": "text/javascript",
												"id": "ab499d55-7c28-4290-8397-340853b42388"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{dataOfficerUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Highlight/Project/{{projectId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Highlight",
												"Project",
												"{{projectId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Highlight-UpdateHighlight-DataOfficer",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 403\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.forbidden;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});"
												],
												"type": "text/javascript",
												"id": "5de85cb5-e163-4769-a739-9cf1def055fc"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "IdentityId",
												"value": "{{dataOfficerUserIdentityId}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"projectId\": \"{{projectId}}\",\r\n  \"startDate\": \"{{current_timestamp}}\",\r\n  \"endDate\": \"{{highlightEndDate}}\",\r\n  \"description\" : \"Lorem Ipsum\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/Highlight/{{highlightId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Highlight",
												"{{highlightId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Highlight-DeleteHighlight-Other-DataOfficer",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"",
													"pm.test(\"Status code is 403\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.forbidden;",
													"});"
												],
												"type": "text/javascript",
												"id": "a0716594-46a1-4d18-98ab-8e0a0ed97b3d"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{dataOfficerUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Highlight/{{highlightId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Highlight",
												"{{highlightId}}"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Role",
							"item": [
								{
									"name": "Role-CreateRole-DataOfficer",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 403\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.forbidden;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});"
												],
												"type": "text/javascript",
												"id": "42ddee28-25c9-4646-b54a-e37f9e1f4b27"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{dataOfficerUserIdentityId}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"name\": \"{{roleName}}\",\r\n  \"scopes\": [\r\n    {\r\n      \"scope\": \"EmbedWrite\"\r\n    }\r\n  ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/Role",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Role"
											]
										}
									},
									"response": []
								},
								{
									"name": "Role-GetAllRoles-DataOfficer",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 403\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.forbidden;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});"
												],
												"type": "text/javascript",
												"id": "b634e074-92de-42f0-b989-d336f7d145ce"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{dataOfficerUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Role",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Role"
											]
										}
									},
									"response": []
								},
								{
									"name": "Scope-GetAllScopes-DataOfficer",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 403\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.forbidden;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});"
												],
												"type": "text/javascript",
												"id": "f39a789f-9f09-4699-ad23-51c204b70e0b"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{dataOfficerUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Role/Scopes",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Role",
												"Scopes"
											]
										}
									},
									"response": []
								},
								{
									"name": "Role-GetRole-DataOfficer",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 403\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.forbidden;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});"
												],
												"type": "text/javascript",
												"id": "bc61b9c2-c8c2-428f-b87b-dbf4e269aaf9"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{dataOfficerUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Role/{{roleId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Role",
												"{{roleId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Role-UpdateRole-DataOfficer",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 403\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.forbidden;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});"
												],
												"type": "text/javascript",
												"id": "fae0b491-f39f-49c4-a674-59d81a05c622"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{dataOfficerUserIdentityId}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"name\": \"{{updatedRoleName}}\",\r\n  \"scopes\": [\r\n    {\r\n      \"scope\": \"EmbedWrite\"\r\n    }\r\n  ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/Role/{{roleId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Role",
												"{{roleId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Role-SetRole-DataOfficer",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 403\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.forbidden;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});"
												],
												"type": "text/javascript",
												"id": "f1a31828-6a5d-4740-9b7c-cafc648f337b"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{dataOfficerUserIdentityId}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"createdUserId\": {{createdUserId}},\r\n  \"name\": \"{{projectNameUpdated}}\",\r\n  \"description\": \"postmantest_description\",\r\n  \"shortDescription\": \"postmantest_shortdesc\",\r\n  \"uri\": \"postmantest_uri\",\r\n  \"collaborators\": [\r\n    {\r\n      \"fullName\": \"postmantest_collfullname\",\r\n      \"role\": \"postmantest_collrole\"\r\n    }\r\n  ],\r\n  \"created\": \"2020-04-20T08:24:26.693Z\",\r\n  \"updated\": \"2020-04-20T08:24:26.693Z\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/Role/setRole?createdUserId={{createdUserId}}&roleId={{roleId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Role",
												"setRole"
											],
											"query": [
												{
													"key": "createdUserId",
													"value": "{{createdUserId}}",
													"description": "Id of the user that we want to update"
												},
												{
													"key": "roleId",
													"value": "{{roleId}}",
													"description": "Id of the role that you want to update the user with"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Role-DeleteRole-DataOfficer",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"",
													"pm.test(\"Status code is 403\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.forbidden;",
													"});"
												],
												"type": "text/javascript",
												"id": "e269d432-5831-4bff-b3d9-4528bd99a0c0"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{dataOfficerUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Role/{{roleId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Role",
												"{{roleId}}"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Search",
							"item": [
								{
									"name": "Search-SearchInternal-DataOfficer",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.ok;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});"
												],
												"type": "text/javascript",
												"id": "c3e8d293-6e8c-4cb0-b659-a04b2ccc0054"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{dataOfficerUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Search/internal/{{projectName}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Search",
												"internal",
												"{{projectName}}"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Wizard",
							"item": [],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Institution",
							"item": [
								{
									"name": "Institution-CreateInstitution-DataOfficer",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 401\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.unauthorized;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});",
													""
												],
												"type": "text/javascript",
												"id": "794101dd-673d-480c-9daa-6645082ff62c"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"identityId\": \"98764342123\",\n    \"name\": \"mycooltestusername\",\n    \"email\": \"postmantest_email@example.com\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/User",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"User"
											]
										}
									},
									"response": []
								},
								{
									"name": "Institution-GetInstitution-DataOfficer",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 401\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.unauthorized;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});"
												],
												"type": "text/javascript",
												"id": "8a9cfbb1-dafc-4a06-865e-e3954e41b854"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{apiUrl}}/api/User/1",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"User",
												"1"
											]
										}
									},
									"response": []
								},
								{
									"name": "Institution-UpdateInstitution-DataOfficer",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 401\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.unauthorized;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});"
												],
												"type": "text/javascript",
												"id": "fc33a8fb-38bc-4262-8943-c180cc19ef52"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"name\": \"bobz\",\r\n  \"email\": \"BobSmith@email.com\",\r\n  \"identityId\": {{administratorUserIdentityId}}\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/User/1",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"User",
												"1"
											]
										}
									},
									"response": []
								},
								{
									"name": "Instituiton-DeleteInstitution-DataOfficer",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 401\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.unauthorized;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});"
												],
												"type": "text/javascript",
												"id": "8bc28d31-8900-46a7-93e9-1db3b18ae8cc"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{apiUrl}}/api/User/1",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"User",
												"1"
											]
										}
									},
									"response": []
								}
							],
							"auth": {
								"type": "noauth"
							},
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										],
										"id": "fae30acc-d025-4344-a73e-876ee858e9db"
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										],
										"id": "9c4a4399-eae2-4bc7-b662-2463df2a29e2"
									}
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "CallToActionOption",
							"item": [
								{
									"name": "CallToActionOption-CreateCallToActionOption-DataOfficer",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 403\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.forbidden;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});",
													""
												],
												"type": "text/javascript",
												"id": "3ec92668-8ec9-4c30-a19a-c2dd1c58bbae"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "IdentityId",
												"value": "{{dataOfficerUserIdentityId}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"type\": \"Title\",\n    \"value\": \"Provide feedback\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/CallToActionOption",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"CallToActionOption"
											]
										}
									},
									"response": []
								},
								{
									"name": "CallToActionOption-GetAllCallToActionOptions-DataOfficer",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var optionId = parseInt(pm.environment.get(\"callToActionOptionId\"));",
													"",
													"var jsonData = pm.response.json();",
													"",
													"var foundAt;",
													"",
													"function findOption(jsonData, id) {",
													"    for (var i = 0; i < jsonData.length; i++) {",
													"        if (jsonData[i].id == id) {",
													"            return i;",
													"        }",
													"    }",
													"    return -1;",
													"}",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.ok;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Call to action option with id: \" + optionId + \" is in list\", function () {",
													"    foundAt = findOption(jsonData, optionId);",
													"    pm.expect(foundAt).to.not.eql(-1);",
													"});",
													""
												],
												"type": "text/javascript",
												"id": "4a6c17ba-8b40-42f8-992e-53285c02b68d"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{dataOfficerUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/CallToActionOption",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"CallToActionOption"
											]
										}
									},
									"response": []
								},
								{
									"name": "CallToActionOption-GetCallToActionOptionById-DataOfficer",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"pm.environment.set(\"callToActionOptionType\", jsonData.type);",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.ok;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Call to action option type is lowercase\", function () {",
													"    pm.expect(jsonData.type).to.eql(jsonData.type.toLowerCase());",
													"});",
													"",
													"pm.test(\"Call to action option value is lowercase\", function () {",
													"    pm.expect(jsonData.value).to.eql(jsonData.value.toLowerCase());",
													"});",
													""
												],
												"type": "text/javascript",
												"id": "d736f1d7-dd73-4edd-9374-a06e6dcbc60e"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"value": "{{dataOfficerUserIdentityId}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/CallToActionOption/{{callToActionOptionId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"CallToActionOption",
												"{{callToActionOptionId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "CallToActionOption-GetCallToActionOptionByType-DataOfficer",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var callToActionOptionId = parseInt(pm.environment.get(\"callToActionOptionId\"));",
													"",
													"var jsonData = pm.response.json();",
													"",
													"function findOptionType(jsonData, id) {",
													"    for (var i = 0; i < jsonData.length; i++) {",
													"        if (jsonData[i].id == id) {",
													"            return i;",
													"        }",
													"    }",
													"    return -1;",
													"}",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.ok;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Call to action option id is \" + callToActionOptionId, function() {",
													"    foundAt = findOptionType(jsonData, callToActionOptionId);",
													"    pm.expect(foundAt).to.not.eql(-1);",
													"});",
													""
												],
												"type": "text/javascript",
												"id": "3ce218fd-7551-45fd-861c-cc29ce3359a8"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{dataOfficerUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/CallToActionOption/type/{{callToActionOptionType}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"CallToActionOption",
												"type",
												"{{callToActionOptionType}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "CallToActionOption-UpdateCallToActionOption-DataOfficer",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 403\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.forbidden;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});"
												],
												"type": "text/javascript",
												"id": "dd593c71-553a-4bbd-8df5-a28d55827c87"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "IdentityId",
												"value": "{{dataOfficerUserIdentityId}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"type\": \"Updated type\",\r\n    \"value\": \"Updated value\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/CallToActionOption/{{callToActionOptionId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"CallToActionOption",
												"{{callToActionOptionId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "CallToActionOption-DeleteCallToActionOption-DataOffficer",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 403\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.forbidden;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});"
												],
												"type": "text/javascript",
												"id": "47ee5278-71c3-4fd0-ab5e-84b272c27357"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "IdentityId",
												"value": "{{dataOfficerUserIdentityId}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/CallToActionOption/{{callToActionOptionId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"CallToActionOption",
												"{{callToActionOptionId}}"
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										],
										"id": "2d9c70f0-d1bd-4602-bcbd-4b774478d964"
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										],
										"id": "3d597af3-0c3c-433d-925d-a193f1d470ab"
									}
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "File",
							"item": [
								{
									"name": "Post-File-DataOfficer",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.environment.set(\"dataOfficerFileId\", jsonData.id)\r",
													"\r",
													"eval(pm.environment.get(\"commonTests\"))();\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Response must be valid and have a json body\", function () {\r",
													"     pm.response.to.be.withBody;\r",
													"     pm.response.to.be.json;\r",
													"});"
												],
												"type": "text/javascript",
												"id": "822abdf8-ae1d-4b0f-89c2-7b421a788cee"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "IdentityId",
												"value": "{{dataOfficerUserIdentityId}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "File",
													"type": "file",
													"src": "Postman/testimage.png"
												}
											]
										},
										"url": {
											"raw": "{{apiUrl}}/api/File",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"File"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get-Files-DataOfficer",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"eval(pm.environment.get(\"commonTests\"))();\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Response must be valid and have a json body\", function () {\r",
													"    pm.response.to.be.withBody;\r",
													"    pm.response.to.be.json;\r",
													"});"
												],
												"type": "text/javascript",
												"id": "8c9cfffb-42ba-4c81-b6a0-781db7d4e97c"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"value": "{{dataOfficerUserIdentityId}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/File",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"File"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete-File-DataOfficer",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"eval(pm.environment.get(\"commonTests\"))();\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Response must be valid\", function () {\r",
													"     pm.response.to.be.ok;\r",
													"});"
												],
												"type": "text/javascript",
												"id": "121a4eaa-0ff4-46d4-87fc-66534fdcd8f5"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{dataOfficerUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/File/{{dataOfficerFileId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"File",
												"{{dataOfficerFileId}}"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Portfolio",
							"item": [
								{
									"name": "Portoflio-CreatePortfolio-DataOfficer",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b2e52036-df19-4255-b695-ff4b158f01ab",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));\r",
													"pm.globals.get(\"variable_key\");\r",
													"var administratorUserId = parseInt(pm.environment.get(\"administratorUserId\"));\r",
													"var portfolioTitle = pm.environment.get(\"portfolioTitle\");\r",
													"var dataOfficerUserId = pm.environment.get(\"dataOfficerUserId\");\r",
													" \r",
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.environment.set(\"portfolioId\", jsonData.id);\r",
													"\r",
													"pm.test(\"Status code is 201\", function () {\r",
													"    pm.response.to.have.status(201);\r",
													"});\r",
													"\r",
													"pm.test(\"Response must be valid and have a json body\", function () {\r",
													"     pm.response.to.be.success;\r",
													"     pm.response.to.be.withBody;\r",
													"     pm.response.to.be.json;\r",
													"});\r",
													"\r",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);\r",
													"});\r",
													"\r",
													"pm.test(\"portfolioTitle title is set correctly and matching: \" + portfolioTitle, function () {\r",
													"    pm.expect(jsonData.title).to.eql(portfolioTitle);\r",
													"});\r",
													"\r",
													"pm.test(\"Identity Id is set correctly and matches: \" + dataOfficerUserId, function () {\r",
													"    pm.expect(jsonData.userId).to.eql(dataOfficerUserId);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "IdentityId",
												"value": "{{dataOfficerUserIdentityId}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"template\": 1,\r\n  \"title\": \"{{portfolioTitle}}\",\r\n  \"publicUri\": \"This is a test uri\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/portfolio",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"portfolio"
											]
										}
									},
									"response": []
								},
								{
									"name": "Portfolio-GetPortfolio-DataOfficer",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));\r",
													"var portfolioTitle = pm.environment.get(\"portfolioTitle\");\r",
													"\r",
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);\r",
													"});\r",
													"\r",
													"pm.test(\"Response must be valid and have a json body\", function () {\r",
													"    pm.response.to.be.ok;\r",
													"    pm.response.to.be.withBody;\r",
													"    pm.response.to.be.json;\r",
													"});\r",
													"\r",
													"pm.test(\"portfolio title is set correctly and matches: \" + portfolioTitle, function () {\r",
													"    pm.expect(jsonData.title).to.eql(portfolioTitle);\r",
													"});"
												],
												"type": "text/javascript",
												"id": "e6d58d2b-95df-4ed6-ae9c-dc107b7742e2"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"value": "{{dataOfficerUserIdentityId}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/portfolio/{{portfolioId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"portfolio",
												"{{portfolioId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Portfolio-GetPortfolio-Other-DataOfficer",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);\r",
													"});\r",
													"\r",
													"pm.test(\"Response must be valid and have a json body\", function () {\r",
													"    pm.response.to.be.ok;\r",
													"    pm.response.to.be.withBody;\r",
													"    pm.response.to.be.json;\r",
													"});"
												],
												"type": "text/javascript",
												"id": "38934967-24ea-4ea8-844d-85d8efb8c784"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"value": "{{dataOfficerUserIdentityId}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/portfolio/1",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"portfolio",
												"1"
											]
										}
									},
									"response": []
								},
								{
									"name": "Porfolio-UpdatePortfolio-Other-DataOfficer",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);\r",
													"});\r",
													"\r",
													"pm.test(\"Response must be valid and have a json body\", function () {\r",
													"    pm.response.to.be.ok;\r",
													"    pm.response.to.be.withBody;\r",
													"    pm.response.to.be.json;\r",
													"});"
												],
												"type": "text/javascript",
												"id": "00306c16-429a-49fb-a492-6844f3ac95bd"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "IdentityId",
												"value": "{{dataOfficerUserIdentityId}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"template\": 1,\r\n  \"title\": \"{{portfolioTitle}}\",\r\n  \"publicUri\": \"This is a test uri\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/portfolio/{{portfolioId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"portfolio",
												"{{portfolioId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "PortfolioItem-CreatePortfolioItem-DataOfficer",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a3351429-98e0-4947-af0f-2503dc7dd95a",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));\r",
													"var administratorUserId = parseInt(pm.environment.get(\"administratorUserId\"));\r",
													"var portfolioId = parseInt(pm.environment.get(\"portfolioId\"));\r",
													"var projectId = parseInt(pm.environment.get(\"adminProjectId\"));\r",
													" \r",
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.environment.set(\"portfolioItemId\", jsonData.id);\r",
													"\r",
													"pm.test(\"Status code is 201\", function () {\r",
													"    pm.response.to.have.status(201);\r",
													"});\r",
													"\r",
													"pm.test(\"Response must be valid and have a json body\", function () {\r",
													"     pm.response.to.be.success;\r",
													"     pm.response.to.be.withBody;\r",
													"     pm.response.to.be.json;\r",
													"});\r",
													"\r",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);\r",
													"});\r",
													"\r",
													"pm.test(\"portfolioId title is set correctly and matching: \" + portfolioId, function () {\r",
													"    pm.expect(jsonData.portfolioId).to.eql(portfolioId);\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "IdentityId",
												"value": "{{dataOfficerUserIdentityId}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"position\": 0,\r\n  \"type\": 0,\r\n  \"content\": \"string\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/portfolio/item?portfolioId={{portfolioId}}&projectId={{projectId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"portfolio",
												"item"
											],
											"query": [
												{
													"key": "portfolioId",
													"value": "{{portfolioId}}"
												},
												{
													"key": "projectId",
													"value": "{{projectId}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "PortfolioItem-UpdatePortfolioItem-DataOfficer",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));\r",
													"var administratorUserId = parseInt(pm.environment.get(\"administratorUserId\"));\r",
													"var content = \"this is a put request\";\r",
													" \r",
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.environment.set(\"portfolioId\", jsonData.id);\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Response must be valid and have a json body\", function () {\r",
													"     pm.response.to.be.success;\r",
													"     pm.response.to.be.withBody;\r",
													"     pm.response.to.be.json;\r",
													"});\r",
													"\r",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);\r",
													"});\r",
													"\r",
													"pm.test(\"portfolio item content is set correctly and matching: \" + content, function () {\r",
													"    pm.expect(jsonData.content).to.eql(content);\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript",
												"id": "8307734f-4fa1-4cb5-ae98-3b2bd5a9b1ca"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "IdentityId",
												"value": "{{dataOfficerUserIdentityId}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"position\": 0,\r\n  \"type\": 0,\r\n  \"content\": \"this is a put request\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/portfolio/item/{{portfolioItemId}}?portfolioId={{portfolioId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"portfolio",
												"item",
												"{{portfolioItemId}}"
											],
											"query": [
												{
													"key": "portfolioId",
													"value": "{{portfolioId}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "PortfolioItem-GetPortfolioItem-DataOfficer",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));\r",
													"var portfolioId = parseInt(pm.environment.get(\"portfolioId\"));\r",
													"var portfolioItemProjectId = parseInt(pm.environment.get(\"portfolioId\"));\r",
													"\r",
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);\r",
													"});\r",
													"\r",
													"pm.test(\"Response must be valid and have a json body\", function () {\r",
													"    pm.response.to.be.ok;\r",
													"    pm.response.to.be.withBody;\r",
													"    pm.response.to.be.json;\r",
													"});\r",
													"\r",
													"pm.test(\"portfolio item exists on portfolio\", function() {\r",
													"    jsonData.portfolioItem.forEach(function(portfolioItem) {\r",
													"        pm.expect(portfolioItem).to.have.property(\"portfolioId\", 2);\r",
													"    });\r",
													"});"
												],
												"type": "text/javascript",
												"id": "3089c20a-640c-4c34-89f2-9b7956b67387"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"value": "{{dataOfficerUserIdentityId}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/portfolio/{{portfolioItemId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"portfolio",
												"{{portfolioItemId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "PortfolioItem-DeletePortofolioItem-DataOfficer",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);\r",
													"});\r",
													"\r",
													"pm.test(\"Response must be valid\", function () {\r",
													"     pm.response.to.be.ok;\r",
													"});"
												],
												"type": "text/javascript",
												"id": "ef799a07-38e4-4c1a-ab16-163abb477020"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "IdentityId",
												"value": "{{dataOfficerUserIdentityId}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/portfolio/item/{{portfolioItemId}}?portfolioId={{portfolioId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"portfolio",
												"item",
												"{{portfolioItemId}}"
											],
											"query": [
												{
													"key": "portfolioId",
													"value": "{{portfolioId}}"
												}
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Cleanup Data Officer",
							"item": [
								{
									"name": "Project-DeleteProject-Self-DataOfficer",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.ok;",
													"});"
												],
												"type": "text/javascript",
												"id": "6c5a93b0-c14c-4775-bfd3-020cacaf02fa"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{dataOfficerUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Project/{{projectId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Project",
												"{{projectId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Project-DeleteProject-Other-SameInstitution-DataOfficer",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.ok;",
													"});"
												],
												"type": "text/javascript",
												"id": "4345af7a-4087-4f9b-8541-2807603fcc55"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{dataOfficerUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Project/{{projectIdWithInstitution}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Project",
												"{{projectIdWithInstitution}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "User-UpdateUser-SelfWithNoInstitution-DataOfficer",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var updatedAliceEmail = pm.environment.get(\"updatedAliceEmail\");",
													"",
													"var jsonData = pm.response.json();",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.ok;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Check if email update matches: \" + updatedAliceEmail, function () {",
													"    pm.expect(jsonData.email).to.eql(updatedAliceEmail);",
													"});",
													"",
													"pm.test(\"Check if institution is null\", function () {",
													"    pm.expect(jsonData.institution).to.equal(null);",
													"});"
												],
												"type": "text/javascript",
												"id": "466ef68f-ae6f-4886-9b7c-40ff7af6826c"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{dataOfficerUserIdentityId}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"name\": \"postman_DataOfficer-alicez\",\r\n  \"email\": \"{{updatedAliceEmail}}\",\r\n  \"identityId\": \"{{dataOfficerUserIdentityId}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/User/{{dataOfficerUserId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"User",
												"{{dataOfficerUserId}}"
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										],
										"id": "d5b8eac0-d0e4-4e2d-ba4b-a1133fa78743"
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										],
										"id": "0d4c2912-c460-4729-9f7b-40d5b65dce92"
									}
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Cleanup Administrator",
							"item": [
								{
									"name": "CallToActionOption-DeleteCallToActionOption-Administrator",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});"
												],
												"type": "text/javascript",
												"id": "ba4a6525-8dcb-452d-9a44-454c3dd1ef9c"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{administratorUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/CallToActionOption/{{callToActionOptionId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"CallToActionOption",
												"{{callToActionOptionId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Project-DeleteProject-Administrator",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript",
												"id": "3f8a2ccc-554a-4cfa-857f-063866d0a36d"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "IdentityId",
												"value": "{{administratorUserIdentityId}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Project/{{adminProjectId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Project",
												"{{adminProjectId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Institution-DeleteInstitution-Administrator",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});"
												],
												"type": "text/javascript",
												"id": "7ce2f6ea-461f-47d1-a248-e81d425233c6"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{administratorUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Institution/{{createdInstitutionId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Institution",
												"{{createdInstitutionId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "User-DeleteUser-Other-SameInstitution-Administrator",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.ok;",
													"});"
												],
												"type": "text/javascript",
												"id": "6f746344-9997-4a6c-b254-5d01f8288db4"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{administratorUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/User/{{createdUserWithInstitutionId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"User",
												"{{createdUserWithInstitutionId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "User-DeleteUser-Other-DifferentInstitution-Administrator",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.ok;",
													"});"
												],
												"type": "text/javascript",
												"id": "3bdba0eb-bd9c-4b55-9d7c-19cb4b864d94"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{administratorUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/User/{{createdUserId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"User",
												"{{createdUserId}}"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "PR",
					"item": [
						{
							"name": "Preparation",
							"item": [
								{
									"name": "User-CreateUser",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"var userName = pm.environment.get(\"userName\");",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.environment.set(\"createdUserId\", jsonData.id);",
													"pm.environment.set(\"identityId\", jsonData.id);",
													"",
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.success;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});",
													"",
													"pm.test(\"Check if created Username matches: \" + userName, function () {",
													"    pm.expect(jsonData.name).to.eql(userName);",
													"});",
													""
												],
												"type": "text/javascript",
												"id": "029bd807-74e2-41ea-91f7-a46a91e7c966"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{administratorUserIdentityId}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"identityId\": \"99966\",\n    \"name\": \"{{userName}}\",\n    \"email\": \"postmantest_PR-User-CreateUser@example.com\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/User",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"User"
											]
										}
									},
									"response": []
								},
								{
									"name": "Project-CreateProject",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"var administratorUserId = parseInt(pm.environment.get(\"administratorUserId\"));",
													"var projectName = pm.environment.get(\"projectName\");",
													"var adminUserName = pm.environment.get(\"adminUserName\");",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.environment.set(\"projectId\", jsonData.id);",
													"pm.environment.set(\"adminProjectId\", jsonData.id);",
													"",
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.success;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});",
													"",
													"pm.test(\"Project Name is set correctly and matching: \" + projectName, function () {",
													"    pm.expect(jsonData.name).to.eql(projectName);",
													"});",
													"",
													"pm.test(\"User Name is correct and matching: \" + adminUserName, function () {",
													"    pm.expect(jsonData.user.name).to.eql(adminUserName);",
													"});",
													"",
													"pm.test(\"Identity ID is correct and matching: \" + administratorUserId, function () {",
													"    pm.expect(parseInt(jsonData.user.id)).to.eql(administratorUserId);",
													"});"
												],
												"type": "text/javascript",
												"id": "a3cb3eea-3513-4304-8937-cc2533df20fb"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{administratorUserIdentityId}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"name\": \"{{projectName}}\",\r\n  \"description\": \"postmantest_PR-Project-CreateProject\",\r\n  \"shortDescription\": \"postmantest_PR-Project-CreateProject\",\r\n  \"uri\": \"postmantest_PR-Project-CreateProject\",\r\n  \"collaborators\": [\r\n    {\r\n      \"fullName\": \"postmantest_PR-Project-CreateProject\",\r\n      \"role\": \"postmantest_PR-Project-CreateProject\"\r\n    }\r\n  ],\r\n  \"created\": \"2020-04-20T08:24:26.693Z\",\r\n  \"updated\": \"2020-04-20T08:24:26.693Z\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/Project",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Project"
											]
										}
									},
									"response": []
								},
								{
									"name": "Highlight-CreateHighlight",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"var identityId = parseInt(pm.environment.get(\"identityId\"));",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.environment.set(\"highlightId\", jsonData.id);",
													"",
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.success;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});"
												],
												"type": "text/javascript",
												"id": "f3d5b025-79df-4ea0-863c-614b1bc138cc"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"var current_timestamp = new Date();\r",
													"postman.setEnvironmentVariable(\"current_timestamp\", current_timestamp.toISOString());\r",
													"\r",
													"var future_timestamp = new Date(Date.now() +(2 * 86400000));\r",
													"postman.setEnvironmentVariable(\"future_timestamp\", future_timestamp.toISOString());\r",
													""
												],
												"type": "text/javascript",
												"id": "631730df-4bdc-4c8b-9ffc-7fe88c30d79f"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{administratorUserIdentityId}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"projectId\": {{projectId}},\r\n  \"startDate\": \"{{current_timestamp}}\",\r\n  \"endDate\": \"{{future_timestamp}}\",\r\n  \"description\" : \"postmantest_PR-Highlight-CreateHighlight\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/Highlight",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Highlight"
											]
										}
									},
									"response": []
								},
								{
									"name": "Embed-CreateEmbed",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.environment.set(\"embedGuid\", jsonData.guid);",
													"pm.environment.set(\"embeddedProjectId\", jsonData.project.id);",
													"",
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.success;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});"
												],
												"type": "text/javascript",
												"id": "65b2ff69-c05d-4007-b003-e655656c0139"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{administratorUserIdentityId}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"projectId\": {{projectId}}\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/Embed",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Embed"
											]
										}
									},
									"response": []
								},
								{
									"name": "CallToActionOption-CreateCallToActionOption",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.environment.set(\"callToActionOptionId\", jsonData.id);",
													"",
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.success;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});",
													"",
													"pm.test(\"Call to action option type is lowercase\", function () {",
													"    pm.expect(jsonData.type).to.eql(jsonData.type.toLowerCase());",
													"});",
													"",
													"pm.test(\"Call to action option value is lowercase\", function () {",
													"    pm.expect(jsonData.value).to.eql(jsonData.value.toLowerCase());",
													"});",
													""
												],
												"type": "text/javascript",
												"id": "1cec8e12-204d-41e1-b734-cf9b5d205301"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{administratorUserIdentityId}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"type\": \"Title\",\r\n  \"value\": \"Feedback\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/CallToActionOption",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"CallToActionOption"
											]
										}
									},
									"response": []
								}
							],
							"description": "For some requests, we need to have data available. The variables need to be filled so the request can succeed. We put these preparation requests in this folder. We will clean them up in the cleanup folder.",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										],
										"id": "41df2ee9-caf5-4dad-8676-0dba9f433206"
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										],
										"id": "29c19f56-26e7-4d46-a3b4-6372d71a618f"
									}
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "User",
							"item": [
								{
									"name": "User-CreateUser-PR",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 403\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.forbidden;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});",
													""
												],
												"type": "text/javascript",
												"id": "4203b66c-7780-48aa-b011-bc0bc9b42e3e"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{prUserIdentityId}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"identityId\": \"{{createdUserId}}\",\n    \"name\": \"{{userName}}\",\n    \"email\": \"postmantest_email@example.com\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/User",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"User"
											]
										}
									},
									"response": []
								},
								{
									"name": "User-GetUser-Other-PR",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 403\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.forbidden;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});",
													""
												],
												"type": "text/javascript",
												"id": "e72dfb34-ed76-453d-9e46-11598676e369"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{prUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/User/{{createdUserId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"User",
												"{{createdUserId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "User-GetUser-Self-PR",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var prUserIdentityId = parseInt(pm.environment.get(\"prUserIdentityId\"));",
													"",
													"var jsonData = pm.response.json();",
													"pm.environment.set(\"PrUserId\", jsonData.id);",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.ok;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Identity ID is correct and matching: \" + prUserIdentityId, function () {",
													"    pm.expect(parseInt(jsonData.identityId)).to.eql(prUserIdentityId);",
													"});"
												],
												"type": "text/javascript",
												"id": "ab72c5e2-b75a-4dd0-8f5b-b1b6eaa8c39b"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{prUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/User",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"User"
											]
										}
									},
									"response": []
								},
								{
									"name": "User-UpdateUser-Self-PR",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var updatedPrUserEmail = pm.environment.get(\"updatedPrUserEmail\");",
													"",
													"var jsonData = pm.response.json();",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.ok;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Check if email update matches: \" + updatedPrUserEmail, function () {",
													"    pm.expect(jsonData.email).to.eql(updatedPrUserEmail);",
													"});"
												],
												"type": "text/javascript",
												"id": "3e87c14e-fe42-4bb1-ab8f-939078ed8948"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "IdentityId",
												"value": "{{prUserIdentityId}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"name\": \"postman_Pr_jerry\",\r\n  \"email\": \"{{updatedPrUserEmail}}\",\r\n  \"identityId\": \"{{prUserIdentityId}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/User/{{PrUserId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"User",
												"{{PrUserId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "User-UpdateUser-Other-PR",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 401\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.unauthorized;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});"
												],
												"type": "text/javascript",
												"id": "b07e4d64-2f8c-492f-a8d8-2d0cdd293f8c"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{prUserIdentityId}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"name\": \"bobz\",\r\n  \"email\": \"BobSmith@email.com\",\r\n  \"identityId\": {{administratorUserIdentityId}}\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/User/{{createdUserId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"User",
												"{{createdUserId}}"
											]
										}
									},
									"response": []
								}
							],
							"description": "Requests executed as the Alice user with the registered role.",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										],
										"id": "8ce64b4e-9e93-405d-b1ae-6279e562a998"
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										],
										"id": "a8c5efc4-8807-478f-869b-fb5fd6d937ef"
									}
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "FollowUser",
							"item": [
								{
									"name": "User-FollowUser-PR",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"var userId = pm.environment.get(\"userIdToFollow\");",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.success;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Check if created Username matches: \" + userId, function () {",
													"    pm.expect(jsonData.id).to.eql(userId);",
													"});"
												],
												"type": "text/javascript",
												"id": "e80d6e02-0c24-4fef-97c8-22279899a471"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{prUserIdentityId}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/User/follow/{{userIdToFollow}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"User",
												"follow",
												"{{userIdToFollow}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "User-UnFollowUser-PR",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													""
												],
												"type": "text/javascript",
												"id": "2669bbc8-0b53-446c-8018-adad8ff12652"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{prUserIdentityId}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/User/follow/{{userIdToFollow}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"User",
												"follow",
												"{{userIdToFollow}}"
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										],
										"id": "65a65d6b-170e-4e25-90e0-e5981e40eca6"
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										],
										"id": "69331fce-466a-414b-9133-f678d2dab47c"
									}
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Project",
							"item": [
								{
									"name": "Project-CreateProject-PR",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var PrUserId = pm.environment.get(\"PrUserId\");",
													"var projectName = pm.environment.get(\"projectName\");",
													"",
													"var jsonData = pm.response.json();",
													"pm.environment.set(\"projectId\", jsonData.id);",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Project Name is set correctly and matches: \" + projectName, function () {",
													"    pm.expect(jsonData.name).to.eql(projectName);",
													"});",
													"",
													"pm.test(\"User Id is set correctly and matches: \" + PrUserId, function () {",
													"    pm.expect(jsonData.user.id).to.eql(PrUserId);",
													"});"
												],
												"type": "text/javascript",
												"id": "b9f91dd5-ba8d-4f7d-8901-97af60193d0b"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "IdentityId",
												"value": "{{prUserIdentityId}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"name\": \"{{projectName}}\",\r\n  \"description\": \"postmantest_Project-CreateProject-PR\",\r\n  \"shortDescription\": \"postmantest_Project-CreateProject-PR\",\r\n  \"uri\": \"postmantest_Project-CreateProject-PR\",\r\n  \"collaborators\": [\r\n    {\r\n      \"fullName\": \"postmantest_Project-CreateProject-PR\",\r\n      \"role\": \"postmantest_Project-CreateProject-PR\"\r\n    }\r\n  ],\r\n  \"created\": \"2020-04-20T08:24:26.693Z\",\r\n  \"updated\": \"2020-04-20T08:24:26.693Z\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/Project",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Project"
											]
										}
									},
									"response": []
								},
								{
									"name": "Project-GetAllProjects-PR",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var projectName = pm.environment.get(\"projectName\");",
													"",
													"var jsonData = pm.response.json();",
													"",
													"var foundAt;",
													"",
													"function findProject(jsonData, name) {",
													"    for (var i = 0; i < jsonData.results.length; i++) {",
													"        if (jsonData.results[i].name == name) {",
													"            return i;",
													"        }",
													"    }",
													"    return -1;",
													"}",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Project: \" + projectName + \" is in list\", function () {",
													"    foundAt = findProject(jsonData, projectName);",
													"    pm.expect(foundAt).to.not.eql(-1);",
													"});",
													"",
													"pm.test(\"Project Name is set correctly and matching: \" + projectName, function () {",
													"    pm.expect(jsonData.results[foundAt].name).to.eql(projectName);",
													"});"
												],
												"type": "text/javascript",
												"id": "b21121f4-a90c-48b3-a7f6-d534e93df75b"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{prUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Project",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Project"
											]
										}
									},
									"response": []
								},
								{
									"name": "Project-GetProject-Self-PR",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var projectName = pm.environment.get(\"projectName\");",
													"",
													"var jsonData = pm.response.json();",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Project Name is set correctly and matches: \" + projectName, function () {",
													"    pm.expect(jsonData.name).to.eql(projectName);",
													"});"
												],
												"type": "text/javascript",
												"id": "abce04b6-61bf-4bf3-aaf3-bb48bcb17ae2"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{prUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Project/{{projectId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Project",
												"{{projectId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Project-GetProject-Other-PR",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json;",
													"});"
												],
												"type": "text/javascript",
												"id": "c3a13f56-e996-4de0-afc4-d52bd1121461"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{prUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Project/{{adminProjectId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Project",
												"{{adminProjectId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Project-UpdateProject-Self-PR",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var projectName = pm.environment.get(\"projectNameUpdated\");",
													"",
													"var jsonData = pm.response.json();",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.ok;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Project Name is set correctly and matches: \" + projectName, function () {",
													"    pm.expect(jsonData.name).to.eql(projectName);",
													"});"
												],
												"type": "text/javascript",
												"id": "03081937-b34d-440c-a0f7-9b2dab413b29"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{prUserIdentityId}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"name\": \"{{projectNameUpdated}}\",\r\n  \"description\": \"postmantest_Project-CreateProject-PR\",\r\n  \"shortDescription\": \"postmantest_Project-CreateProject-PR\",\r\n  \"uri\": \"postmantest_Project-CreateProject-PR\",\r\n  \"collaborators\": [\r\n    {\r\n      \"fullName\": \"postmantest_Project-CreateProject-PR\",\r\n      \"role\": \"postmantest_Project-CreateProject-PR\"\r\n    }\r\n  ],\r\n  \"created\": \"2020-04-20T08:24:26.693Z\",\r\n  \"updated\": \"2020-04-20T08:24:26.693Z\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/Project/{{projectId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Project",
												"{{projectId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Project-UpdateProject-Other-PR",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 401\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"    pm.response.to.be.unauthorized;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json;",
													"});"
												],
												"type": "text/javascript",
												"id": "d7bf7deb-e122-401e-b751-cf91a04a716a"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{prUserIdentityId}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"name\": \"{{projectNameUpdated}}\",\r\n  \"description\": \"postmantest_description\",\r\n  \"shortDescription\": \"postmantest_shortdesc\",\r\n  \"uri\": \"postmantest_uri\",\r\n  \"collaborators\": [\r\n    {\r\n      \"fullName\": \"postmantest_collfullname\",\r\n      \"role\": \"postmantest_collrole\"\r\n    }\r\n  ],\r\n  \"created\": \"2020-04-20T08:24:26.693Z\",\r\n  \"updated\": \"2020-04-20T08:24:26.693Z\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/Project/{{adminProjectId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Project",
												"{{adminProjectId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Project-LikeProject-PR",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"eval(pm.environment.get(\"commonTests\"))();\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Response must be valid and have a json body\", function () {\r",
													"     pm.response.to.be.ok;\r",
													"     pm.response.to.be.withBody;\r",
													"     pm.response.to.be.json;\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"id": "d5fd219a-bc95-4c0f-adb0-f31436aaeac0"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{prUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Project/like/{{projectId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Project",
												"like",
												"{{projectId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Project-DeleteLikeProject-PR",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"eval(pm.environment.get(\"commonTests\"))();\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Response must be valid and have a json body\", function () {\r",
													"     pm.response.to.be.ok;\r",
													"     pm.response.to.be.withBody;\r",
													"     pm.response.to.be.json;\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"id": "563eaebb-a364-49eb-9d96-0d26d93f4434"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{prUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Project/like/{{projectId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Project",
												"like",
												"{{projectId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Project-DeleteProject-Other-PR",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"",
													"pm.test(\"Status code is 401\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.unauthorized;",
													"});"
												],
												"type": "text/javascript",
												"id": "4b41965c-9012-4bc6-8cc1-420eeec7766f"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{prUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Project/{{adminProjectId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Project",
												"{{adminProjectId}}"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "FollowProject",
							"item": [
								{
									"name": "Project-FollowProject-PR",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"var projectId = pm.environment.get(\"projectIdToFollow\");",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.success;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Check if created project id matches: \" + projectId, function () {",
													"    pm.expect(jsonData.id).to.eql(projectId);",
													"});"
												],
												"type": "text/javascript",
												"id": "853e966e-6c32-443e-a17b-f4be3e90df08"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{prUserIdentityId}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/project/follow/{{projectIdToFollow}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"project",
												"follow",
												"{{projectIdToFollow}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Project-UnFollowProject-PR",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													""
												],
												"type": "text/javascript",
												"id": "9832e95a-52a3-4352-a8f6-8eb5cb1fff26"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{prUserIdentityId}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/project/follow/{{projectIdToFollow}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"project",
												"follow",
												"{{projectIdToFollow}}"
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										],
										"id": "b6d3f91a-16c3-4e9e-b7e7-32d4ef13a1a4"
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										],
										"id": "c8469241-9926-4a63-8b73-4cdd340eccb6"
									}
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Embed",
							"item": [
								{
									"name": "Embed-CreateEmbed-Self-PR",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"pm.environment.set(\"embedGuid\", jsonData.guid);",
													"pm.environment.set(\"embeddedProjectId\", jsonData.project.id);",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.success;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});",
													""
												],
												"type": "text/javascript",
												"id": "4430e3a3-c3d7-4571-995d-075141d40f91"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "IdentityId",
												"value": "{{prUserIdentityId}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"projectId\": {{projectId}}\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/Embed",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Embed"
											]
										}
									},
									"response": []
								},
								{
									"name": "Embed-CreateEmbed-Other-PR",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"pm.environment.set(\"otherEmbedGuid\", jsonData.guid);",
													"pm.environment.set(\"otherEmbeddedProjectId\", jsonData.project.id);",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.success;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});",
													""
												],
												"type": "text/javascript",
												"id": "c556d039-2322-4abd-bdf2-8ec945f6c601"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "IdentityId",
												"value": "{{prUserIdentityId}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"projectId\": {{adminProjectId}}\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/Embed",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Embed"
											]
										}
									},
									"response": []
								},
								{
									"name": "Embed-GetAllEmbeds-PR",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.ok;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});"
												],
												"type": "text/javascript",
												"id": "d1af87d9-2fde-4d2d-bcd4-db464d8e9cde"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"value": "{{prUserIdentityId}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Embed",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Embed"
											]
										}
									},
									"response": []
								},
								{
									"name": "Embed-GetEmbed-Self-PR",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var embeddedProjectId = parseInt(pm.environment.get(\"embeddedProjectId\"))",
													"",
													"var jsonData = pm.response.json();",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Embed matches: \" + embeddedProjectId, function () {",
													"    pm.expect(jsonData.id).to.eql(embeddedProjectId);",
													"});"
												],
												"type": "text/javascript",
												"id": "10301d78-caca-4439-a75f-f658979395ea"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{prUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Embed/{{embedGuid}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Embed",
												"{{embedGuid}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Embed-GetEmbed-Other-PR",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var otherEmbeddedProjectId = parseInt(pm.environment.get(\"otherEmbeddedProjectId\"))",
													"",
													"var jsonData = pm.response.json();",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Embed matches: \" + otherEmbeddedProjectId, function () {",
													"    pm.expect(jsonData.id).to.eql(otherEmbeddedProjectId);",
													"});"
												],
												"type": "text/javascript",
												"id": "43d810bc-b04c-4417-93d7-faadaa39988c"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{prUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Embed/{{otherEmbedGuid}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Embed",
												"{{otherEmbedGuid}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Embed-DeleteEmbed-Self-PR",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.ok;",
													"});"
												],
												"type": "text/javascript",
												"id": "7b7c65a0-b388-4b81-92bd-7aa1006064b3"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{prUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Embed/{{embedGuid}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Embed",
												"{{embedGuid}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Embed-DeleteEmbed-Other-PR",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.ok;",
													"});"
												],
												"type": "text/javascript",
												"id": "3ee69fb2-85bc-4b7c-a7f3-c4917f9a20ba"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{prUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Embed/{{otherEmbedGuid}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Embed",
												"{{otherEmbedGuid}}"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Highlight",
							"item": [
								{
									"name": "Highlight-CreateHighlight-Self-PR",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"pm.environment.set(\"highlightId\", jsonData.id);",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.success;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});"
												],
												"type": "text/javascript",
												"id": "f9d61c32-9af4-4a0b-8636-ea5144e8457f"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"var current_timestamp = new Date();\r",
													"postman.setEnvironmentVariable(\"current_timestamp\", current_timestamp.toISOString());\r",
													"\r",
													"var future_timestamp = new Date(Date.now() +(2 * 86400000));\r",
													"postman.setEnvironmentVariable(\"future_timestamp\", future_timestamp.toISOString());\r",
													""
												],
												"type": "text/javascript",
												"id": "c415d803-cd4f-42a6-afad-e8ae1e989c0d"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{prUserIdentityId}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"projectId\": {{projectId}},\r\n  \"startDate\": \"{{current_timestamp}}\",\r\n  \"endDate\": \"{{future_timestamp}}\",\r\n  \"description\" : \"postman_Highlight-CreateHighlight-Self-PR\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/Highlight",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Highlight"
											]
										}
									},
									"response": []
								},
								{
									"name": "Highlight-GetHighlight-Self-PR",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var identityId = parseInt(pm.environment.get(\"identityId\"));",
													"var highlightId = parseInt(pm.environment.get(\"highlightId\"));",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.environment.set(\"highlightStartDate\", jsonData.startDate);",
													"pm.environment.set(\"highlightEndDate\", jsonData.endDate);",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Highlight Id matches: \" + highlightId, function () {",
													"    pm.expect(jsonData.id).to.eql(highlightId);",
													"});"
												],
												"type": "text/javascript",
												"id": "f66d9bf9-cd1c-4eb4-8b19-6ee30a23e86f"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"value": "{{prUserIdentityId}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Highlight/{{highlightId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Highlight",
												"{{highlightId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Highlight-GetHighlight-ByProject-Self-PR",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var identityId = parseInt(pm.environment.get(\"identityId\"));",
													"var projectId = parseInt(pm.environment.get(\"projectId\"));",
													"var highlightId = parseInt(pm.environment.get(\"highlightId\"));",
													"",
													"var jsonData = pm.response.json();",
													"",
													"var foundAt;",
													"",
													"function findHighlightId(jsonData, item) {",
													"    for (var i = 0; i < jsonData.length; i++) {",
													"        if (jsonData[i].id == item) {",
													"            return i;",
													"        }",
													"    }",
													"    return -1;",
													"}",
													"",
													"function findProjectId(jsonData, item) {",
													"    for (var i = 0; i < jsonData.length; i++) {",
													"        if (jsonData[i].projectId == item) {",
													"            return i;",
													"        }",
													"    }",
													"    return -1;",
													"}",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Project is in list and matching: \" + projectId, function () {",
													"    foundAt = findProjectId(jsonData, projectId);",
													"    pm.expect(foundAt).to.not.eql(-1);",
													"});",
													"",
													"pm.test(\"Highlight is in list and matching:\" + highlightId, function () {",
													"    foundAt = findHighlightId(jsonData, highlightId);",
													"    pm.expect(foundAt).to.not.eql(-1);",
													"});"
												],
												"type": "text/javascript",
												"id": "bce0f595-f0ee-485b-b654-5d7e893fcf14"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{prUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Highlight/Project/{{projectId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Highlight",
												"Project",
												"{{projectId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Highlight-UpdateHighlight-Self-PR",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.ok;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});"
												],
												"type": "text/javascript",
												"id": "636c9bce-9f55-448f-a97d-9dd7a5ef09e1"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"var current_timestamp = new Date();\r",
													"postman.setEnvironmentVariable(\"current_timestamp\", current_timestamp.toISOString());"
												],
												"type": "text/javascript",
												"id": "0b5364d3-1e00-4678-9bd2-71330d865788"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "IdentityId",
												"value": "{{prUserIdentityId}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"projectId\": \"{{projectId}}\",\r\n  \"startDate\": \"{{current_timestamp}}\",\r\n  \"endDate\": \"{{future_timestamp}}\",\r\n  \"description\" : \"postman_Highlight-CreateHighlight-Self-PR\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/Highlight/{{highlightId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Highlight",
												"{{highlightId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Highlight-CreateHighlight-Other-PR",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"pm.environment.set(\"adminHighlightId\", jsonData.id);",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.success;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});"
												],
												"type": "text/javascript",
												"id": "51538917-4521-44f2-80e4-f23d5ddd6371"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"var current_timestamp = new Date();\r",
													"postman.setEnvironmentVariable(\"current_timestamp\", current_timestamp.toISOString());\r",
													"\r",
													"var future_timestamp = new Date(Date.now() +(2 * 86400000));\r",
													"postman.setEnvironmentVariable(\"future_timestamp\", future_timestamp.toISOString());\r",
													""
												],
												"type": "text/javascript",
												"id": "088d472e-8328-4d95-9831-6b0c5846f7f6"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{prUserIdentityId}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"projectId\": {{adminProjectId}},\r\n  \"startDate\": \"{{current_timestamp}}\",\r\n  \"endDate\": \"{{future_timestamp}}\",\r\n  \"description\" : \"postman_Highlight-CreateHighlight-Other-PR\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/Highlight",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Highlight"
											]
										}
									},
									"response": []
								},
								{
									"name": "Highlight-GetHighlight-Other-PR",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var identityId = parseInt(pm.environment.get(\"identityId\"));",
													"var adminHighlightId = parseInt(pm.environment.get(\"adminHighlightId\"));",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.environment.set(\"highlightStartDate\", jsonData.startDate);",
													"pm.environment.set(\"highlightEndDate\", jsonData.endDate);",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Highlight Id matches: \" + adminHighlightId, function () {",
													"    pm.expect(jsonData.id).to.eql(adminHighlightId);",
													"});"
												],
												"type": "text/javascript",
												"id": "41e82c7f-5dd3-4d50-8007-fdfbd70fd8f7"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{prUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Highlight/{{adminHighlightId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Highlight",
												"{{adminHighlightId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Highlight-GetHighlight-ByProject-Other-PR",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var identityId = parseInt(pm.environment.get(\"identityId\"));",
													"var adminProjectId = parseInt(pm.environment.get(\"adminProjectId\"));",
													"var adminHighlightId = parseInt(pm.environment.get(\"adminHighlightId\"));",
													"",
													"var jsonData = pm.response.json();",
													"",
													"var foundAt;",
													"",
													"function findHighlightId(jsonData, item) {",
													"    for (var i = 0; i < jsonData.length; i++) {",
													"        if (jsonData[i].id == item) {",
													"            return i;",
													"        }",
													"    }",
													"    return -1;",
													"}",
													"",
													"function findProjectId(jsonData, item) {",
													"    for (var i = 0; i < jsonData.length; i++) {",
													"        if (jsonData[i].projectId == item) {",
													"            return i;",
													"        }",
													"    }",
													"    return -1;",
													"}",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Project is in list and matching: \" + adminProjectId, function () {",
													"    foundAt = findProjectId(jsonData, adminProjectId);",
													"    pm.expect(foundAt).to.not.eql(-1);",
													"});",
													"",
													"pm.test(\"Highlight is in list and matching:\" + adminHighlightId, function () {",
													"    foundAt = findHighlightId(jsonData, adminHighlightId);",
													"    pm.expect(foundAt).to.not.eql(-1);",
													"});"
												],
												"type": "text/javascript",
												"id": "7e00b23f-7a66-4e59-a2ba-969db490eccf"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{prUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Highlight/Project/{{adminProjectId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Highlight",
												"Project",
												"{{adminProjectId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Highlight-UpdateHighlight-Other-PR",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.ok;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});"
												],
												"type": "text/javascript",
												"id": "9705dcf8-f802-4b82-871c-651ed48b6de1"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"var current_timestamp = new Date();\r",
													"postman.setEnvironmentVariable(\"current_timestamp\", current_timestamp.toISOString());"
												],
												"type": "text/javascript",
												"id": "7e5ee422-4545-47a5-b17a-69b4be688a66"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{prUserIdentityId}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"projectId\": \"{{projectId}}\",\r\n  \"startDate\": \"{{current_timestamp}}\",\r\n  \"endDate\": \"{{future_timestamp}}\",\r\n  \"description\" : \"postman_Highlight-CreateHighlight-Other-PR\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/Highlight/{{adminHighlightId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Highlight",
												"{{adminHighlightId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Highlight-GetAllActiveHighlights-PR",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var projectId = pm.environment.get(\"adminProjectId\");",
													"",
													"var jsonData = pm.response.json();",
													"",
													"var foundAt;",
													"",
													"function findItem(jsonData, item) {",
													"    for (var i = 0; i < jsonData.length; i++) {",
													"        if (jsonData[i].projectId == item) {",
													"            return i;",
													"        }",
													"    }",
													"    return -1;",
													"}",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Highlight is in list and matching: \" + projectId, function () {",
													"    foundAt = findItem(jsonData, projectId);",
													"    pm.expect(foundAt).to.not.eql(-1);",
													"});"
												],
												"type": "text/javascript",
												"id": "63998b98-bde4-4fb2-894b-5608c96ee733"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{prUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Highlight",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Highlight"
											]
										}
									},
									"response": []
								},
								{
									"name": "Highlight-DeleteHighlight-Self-PR",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});"
												],
												"type": "text/javascript",
												"id": "0fee3c51-7cae-4e00-a0cc-7040ae0c42c5"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{prUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Highlight/{{highlightId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Highlight",
												"{{highlightId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Highlight-DeleteHighlight-Other-PR",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});"
												],
												"type": "text/javascript",
												"id": "d6f26f9e-d29a-49b6-af19-56c341a0f0b1"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{prUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Highlight/{{adminHighlightId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Highlight",
												"{{adminHighlightId}}"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Role",
							"item": [
								{
									"name": "Role-CreateRole-PR",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 403\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.forbidden;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});"
												],
												"type": "text/javascript",
												"id": "4281e565-19d1-4922-82d7-df7f254a53f6"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{prUserIdentityId}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"name\": \"{{roleName}}\",\r\n  \"scopes\": [\r\n    {\r\n      \"scope\": \"EmbedWrite\"\r\n    }\r\n  ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/Role",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Role"
											]
										}
									},
									"response": []
								},
								{
									"name": "Role-GetAllRoles-PR",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 403\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.forbidden;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});"
												],
												"type": "text/javascript",
												"id": "4b4b4f4c-1432-43ce-8c27-367be1b6ebc2"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{prUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Role",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Role"
											]
										}
									},
									"response": []
								},
								{
									"name": "Scope-GetAllScopes-PR",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 403\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.forbidden;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});"
												],
												"type": "text/javascript",
												"id": "c47f99f8-d310-480e-9478-adba61f84a59"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{prUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Role/Scopes",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Role",
												"Scopes"
											]
										}
									},
									"response": []
								},
								{
									"name": "Role-GetRole-PR",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 403\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.forbidden;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});"
												],
												"type": "text/javascript",
												"id": "a9aaa779-385c-493f-b8f4-97de610f3f69"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{prUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Role/{{roleId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Role",
												"{{roleId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Role-UpdateRole-PR",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 403\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.forbidden;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});"
												],
												"type": "text/javascript",
												"id": "80642dee-5482-4539-9a38-a30a03774e8b"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{prUserIdentityId}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"name\": \"{{updatedRoleName}}\",\r\n  \"scopes\": [\r\n    {\r\n      \"scope\": \"EmbedWrite\"\r\n    }\r\n  ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/Role/{{roleId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Role",
												"{{roleId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Role-SetRole-PR",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 403\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.forbidden;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});"
												],
												"type": "text/javascript",
												"id": "41e9f891-442d-4ea0-989e-6038a991bcbb"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{prUserIdentityId}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"createdUserId\": {{createdUserId}},\r\n  \"name\": \"{{projectNameUpdated}}\",\r\n  \"description\": \"postmantest_description\",\r\n  \"shortDescription\": \"postmantest_shortdesc\",\r\n  \"uri\": \"postmantest_uri\",\r\n  \"collaborators\": [\r\n    {\r\n      \"fullName\": \"postmantest_collfullname\",\r\n      \"role\": \"postmantest_collrole\"\r\n    }\r\n  ],\r\n  \"created\": \"2020-04-20T08:24:26.693Z\",\r\n  \"updated\": \"2020-04-20T08:24:26.693Z\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/Role/setRole?createdUserId={{createdUserId}}&roleId={{roleId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Role",
												"setRole"
											],
											"query": [
												{
													"key": "createdUserId",
													"value": "{{createdUserId}}",
													"description": "Id of the user that we want to update"
												},
												{
													"key": "roleId",
													"value": "{{roleId}}",
													"description": "Id of the role that you want to update the user with"
												}
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Search",
							"item": [
								{
									"name": "Search-SearchInternal-PR",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.ok;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});"
												],
												"type": "text/javascript",
												"id": "0a1556cf-d350-4846-8590-6e6431a81bdf"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{prUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Search/internal/{{projectName}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Search",
												"internal",
												"{{projectName}}"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Wizard",
							"item": [],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Institution",
							"item": [
								{
									"name": "Institution-CreateInstitution-PR",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 401\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.unauthorized;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});",
													""
												],
												"type": "text/javascript",
												"id": "0c145646-76a9-4b99-8ab7-b0b8c2d42f00"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"identityId\": \"98764342123\",\n    \"name\": \"mycooltestusername\",\n    \"email\": \"postmantest_email@example.com\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/User",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"User"
											]
										}
									},
									"response": []
								},
								{
									"name": "Institution-GetInstitution-PR",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 401\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.unauthorized;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});"
												],
												"type": "text/javascript",
												"id": "315e4390-faa2-475b-b22f-573a197c0aeb"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{apiUrl}}/api/User/1",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"User",
												"1"
											]
										}
									},
									"response": []
								},
								{
									"name": "Institution-UpdateInstitution-PR",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 401\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.unauthorized;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});"
												],
												"type": "text/javascript",
												"id": "a08d697b-a947-4d18-bbcf-f4fb39ff021e"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"name\": \"bobz\",\r\n  \"email\": \"BobSmith@email.com\",\r\n  \"identityId\": {{administratorUserIdentityId}}\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/User/1",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"User",
												"1"
											]
										}
									},
									"response": []
								},
								{
									"name": "Instituiton-DeleteInstitution-PR",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 401\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.unauthorized;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});"
												],
												"type": "text/javascript",
												"id": "d9108c16-5c20-47e2-a321-8449995d53b6"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{apiUrl}}/api/User/1",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"User",
												"1"
											]
										}
									},
									"response": []
								}
							],
							"auth": {
								"type": "noauth"
							},
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										],
										"id": "040b3590-1113-4b44-a397-15e36d6999fe"
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										],
										"id": "f25acb94-7990-4557-b694-a655715ff84e"
									}
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "CallToActionOption",
							"item": [
								{
									"name": "CallToActionOption-CreateCallToActionOption-PR",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 403\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.forbidden;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});",
													""
												],
												"type": "text/javascript",
												"id": "f9569358-92ac-4e78-b005-f7b9cd1cf891"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "IdentityId",
												"value": "{{prUserIdentityId}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"type\": \"Title\",\n    \"value\": \"Provide feedback\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/CallToActionOption",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"CallToActionOption"
											]
										}
									},
									"response": []
								},
								{
									"name": "CallToActionOption-GetAllCallToActionOptions-PR",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var optionId = parseInt(pm.environment.get(\"callToActionOptionId\"));",
													"",
													"var jsonData = pm.response.json();",
													"",
													"var foundAt;",
													"",
													"function findOption(jsonData, id) {",
													"    for (var i = 0; i < jsonData.length; i++) {",
													"        if (jsonData[i].id == id) {",
													"            return i;",
													"        }",
													"    }",
													"    return -1;",
													"}",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.ok;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Call to action option with id: \" + optionId + \" is in list\", function () {",
													"    foundAt = findOption(jsonData, optionId);",
													"    pm.expect(foundAt).to.not.eql(-1);",
													"});",
													""
												],
												"type": "text/javascript",
												"id": "aa259844-8c0c-4c20-83c4-952440af6952"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{prUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/CallToActionOption",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"CallToActionOption"
											]
										}
									},
									"response": []
								},
								{
									"name": "CallToActionOption-GetCallToActionOptionById-PR",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"pm.environment.set(\"callToActionOptionType\", jsonData.type);",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.ok;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Call to action option type is lowercase\", function () {",
													"    pm.expect(jsonData.type).to.eql(jsonData.type.toLowerCase());",
													"});",
													"",
													"pm.test(\"Call to action option value is lowercase\", function () {",
													"    pm.expect(jsonData.value).to.eql(jsonData.value.toLowerCase());",
													"});",
													""
												],
												"type": "text/javascript",
												"id": "91a536e1-be75-4078-b5a0-7919bd976372"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"value": "{{prUserIdentityId}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/CallToActionOption/{{callToActionOptionId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"CallToActionOption",
												"{{callToActionOptionId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "CallToActionOption-GetCallToActionOptionByType-PR",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var callToActionOptionId = parseInt(pm.environment.get(\"callToActionOptionId\"));",
													"",
													"var jsonData = pm.response.json();",
													"",
													"function findOptionType(jsonData, id) {",
													"    for (var i = 0; i < jsonData.length; i++) {",
													"        if (jsonData[i].id == id) {",
													"            return i;",
													"        }",
													"    }",
													"    return -1;",
													"}",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.ok;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Call to action option id is \" + callToActionOptionId, function() {",
													"    foundAt = findOptionType(jsonData, callToActionOptionId);",
													"    pm.expect(foundAt).to.not.eql(-1);",
													"});",
													""
												],
												"type": "text/javascript",
												"id": "9508676e-8469-4e6b-808d-81b5ccb4920a"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{prUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/CallToActionOption/type/{{callToActionOptionType}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"CallToActionOption",
												"type",
												"{{callToActionOptionType}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "CallToActionOption-UpdateCallToActionOption-PR",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 403\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.forbidden;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});"
												],
												"type": "text/javascript",
												"id": "78d8e156-5a77-41fa-babb-95d8602888ee"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "IdentityId",
												"value": "{{prUserIdentityId}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"type\": \"Updated type\",\r\n    \"value\": \"Updated value\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/CallToActionOption/{{callToActionOptionId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"CallToActionOption",
												"{{callToActionOptionId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "CallToActionOption-DeleteCallToActionOption-PR",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"eval(pm.environment.get(\"commonTests\"))();",
													"",
													"pm.test(\"Status code is 403\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a json body\", function () {",
													"     pm.response.to.be.forbidden;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});"
												],
												"type": "text/javascript",
												"id": "ef3609fe-4810-4dc9-a34f-b96eef884149"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "IdentityId",
												"value": "{{prUserIdentityId}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/CallToActionOption/{{callToActionOptionId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"CallToActionOption",
												"{{callToActionOptionId}}"
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										],
										"id": "bcaa8a56-38ad-4d35-b575-4fb0e7980402"
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										],
										"id": "3e67974e-889b-4620-93ff-22dc1845575e"
									}
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "File",
							"item": [
								{
									"name": "Post-File-PR",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.environment.set(\"prFileId\", jsonData.id)\r",
													"\r",
													"eval(pm.environment.get(\"commonTests\"))();\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Response must be valid and have a json body\", function () {\r",
													"     pm.response.to.be.success;\r",
													"     pm.response.to.be.withBody;\r",
													"     pm.response.to.be.json;\r",
													"});"
												],
												"type": "text/javascript",
												"id": "e8d80d59-9000-45e3-b138-a64167b2c0ab"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "IdentityId",
												"value": "{{prUserIdentityId}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "File",
													"type": "file",
													"src": "Postman/testimage.png"
												}
											]
										},
										"url": {
											"raw": "{{apiUrl}}/api/File",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"File"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get-Files-PR",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"eval(pm.environment.get(\"commonTests\"))();\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Response must be valid and have a json body\", function () {\r",
													"    pm.response.to.be.withBody;\r",
													"    pm.response.to.be.json;\r",
													"});"
												],
												"type": "text/javascript",
												"id": "1fc2b4cc-217a-48db-aa06-79ad45fbe0ac"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"value": "{{prUserIdentityId}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/File",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"File"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete-File-PR",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"eval(pm.environment.get(\"commonTests\"))();\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Response must be valid\", function () {\r",
													"     pm.response.to.be.ok;\r",
													"});"
												],
												"type": "text/javascript",
												"id": "2be07257-ab3c-4be1-bf85-20e3a5c36d81"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "IdentityId",
												"value": "{{prUserIdentityId}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/File/{{prFileId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"File",
												"{{prFileId}}"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Portfolio",
							"item": [
								{
									"name": "Portoflio-CreatePortfolio-Registered",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "498a3ef8-f9b0-44a8-b52a-4e90654e74a7",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));\r",
													"var administratorUserId = parseInt(pm.environment.get(\"administratorUserId\"));\r",
													"var portfolioTitle = pm.environment.get(\"portfolioTitle\");\r",
													"var PrUserId = pm.environment.get(\"PrUserId\");\r",
													" \r",
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.environment.set(\"portfolioId\", jsonData.id);\r",
													"\r",
													"pm.test(\"Status code is 201\", function () {\r",
													"    pm.response.to.have.status(201);\r",
													"});\r",
													"\r",
													"pm.test(\"Response must be valid and have a json body\", function () {\r",
													"     pm.response.to.be.success;\r",
													"     pm.response.to.be.withBody;\r",
													"     pm.response.to.be.json;\r",
													"});\r",
													"\r",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);\r",
													"});\r",
													"\r",
													"pm.test(\"portfolioTitle title is set correctly and matching: \" + portfolioTitle, function () {\r",
													"    pm.expect(jsonData.title).to.eql(portfolioTitle);\r",
													"});\r",
													"\r",
													"pm.test(\"Identity Id is set correctly and matches: \" + PrUserId, function () {\r",
													"    pm.expect(jsonData.userId).to.eql(PrUserId);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "IdentityId",
												"value": "{{prUserIdentityId}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"template\": 1,\r\n  \"title\": \"{{portfolioTitle}}\",\r\n  \"publicUri\": \"This is a test uri\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/portfolio",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"portfolio"
											]
										}
									},
									"response": []
								},
								{
									"name": "Portfolio-GetPortfolio-Registered",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));\r",
													"var portfolioTitle = pm.environment.get(\"portfolioTitle\");\r",
													"\r",
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);\r",
													"});\r",
													"\r",
													"pm.test(\"Response must be valid and have a json body\", function () {\r",
													"    pm.response.to.be.ok;\r",
													"    pm.response.to.be.withBody;\r",
													"    pm.response.to.be.json;\r",
													"});\r",
													"\r",
													"pm.test(\"portfolio title is set correctly and matches: \" + portfolioTitle, function () {\r",
													"    pm.expect(jsonData.title).to.eql(portfolioTitle);\r",
													"});"
												],
												"type": "text/javascript",
												"id": "076688e4-e6ea-4334-a1ce-4f69e33e8166"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"value": "{{prUserIdentityId}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/portfolio/{{portfolioId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"portfolio",
												"{{portfolioId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Portfolio-GetPortfolio-Other-Registered",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);\r",
													"});\r",
													"\r",
													"pm.test(\"Response must be valid and have a json body\", function () {\r",
													"    pm.response.to.be.ok;\r",
													"    pm.response.to.be.withBody;\r",
													"    pm.response.to.be.json;\r",
													"});"
												],
												"type": "text/javascript",
												"id": "973345cc-3300-45a2-942a-b43c5bb817f0"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"value": "{{prUserIdentityId}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/portfolio/1",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"portfolio",
												"1"
											]
										}
									},
									"response": []
								},
								{
									"name": "Porfolio-UpdatePortfolio-Other-Registered",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);\r",
													"});\r",
													"\r",
													"pm.test(\"Response must be valid and have a json body\", function () {\r",
													"    pm.response.to.be.ok;\r",
													"    pm.response.to.be.withBody;\r",
													"    pm.response.to.be.json;\r",
													"});"
												],
												"type": "text/javascript",
												"id": "a08d9f6b-d3b2-4d9a-997e-fd3b14710531"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "IdentityId",
												"value": "{{prUserIdentityId}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"template\": 1,\r\n  \"title\": \"{{portfolioTitle}}\",\r\n  \"publicUri\": \"This is a test uri\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/portfolio/{{portfolioId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"portfolio",
												"{{portfolioId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "PortfolioItem-CreatePortfolioItem-Registered",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4325a33c-6e4d-433e-87f7-307e6f1ab086",
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));\r",
													"var administratorUserId = parseInt(pm.environment.get(\"administratorUserId\"));\r",
													"var portfolioId = parseInt(pm.environment.get(\"portfolioId\"));\r",
													"var projectId = parseInt(pm.environment.get(\"adminProjectId\"));\r",
													" \r",
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.environment.set(\"portfolioItemId\", jsonData.id);\r",
													"\r",
													"pm.test(\"Status code is 201\", function () {\r",
													"    pm.response.to.have.status(201);\r",
													"});\r",
													"\r",
													"pm.test(\"Response must be valid and have a json body\", function () {\r",
													"     pm.response.to.be.success;\r",
													"     pm.response.to.be.withBody;\r",
													"     pm.response.to.be.json;\r",
													"});\r",
													"\r",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);\r",
													"});\r",
													"\r",
													"pm.test(\"portfolioId title is set correctly and matching: \" + portfolioId, function () {\r",
													"    pm.expect(jsonData.portfolioId).to.eql(portfolioId);\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "IdentityId",
												"value": "{{prUserIdentityId}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"position\": 0,\r\n  \"type\": 0,\r\n  \"content\": \"string\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/portfolio/item?portfolioId={{portfolioId}}&projectId={{projectId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"portfolio",
												"item"
											],
											"query": [
												{
													"key": "portfolioId",
													"value": "{{portfolioId}}"
												},
												{
													"key": "projectId",
													"value": "{{projectId}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "PortfolioItem-UpdatePortfolioItem-Registered",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));\r",
													"var administratorUserId = parseInt(pm.environment.get(\"administratorUserId\"));\r",
													"var content = \"this is a put request\";\r",
													" \r",
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.environment.set(\"portfolioId\", jsonData.id);\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Response must be valid and have a json body\", function () {\r",
													"     pm.response.to.be.success;\r",
													"     pm.response.to.be.withBody;\r",
													"     pm.response.to.be.json;\r",
													"});\r",
													"\r",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);\r",
													"});\r",
													"\r",
													"pm.test(\"portfolio item content is set correctly and matching: \" + content, function () {\r",
													"    pm.expect(jsonData.content).to.eql(content);\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript",
												"id": "9a1a50ce-2de0-4d2d-bf5a-91b3b3ecf66e"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "IdentityId",
												"value": "{{prUserIdentityId}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"position\": 0,\r\n  \"type\": 0,\r\n  \"content\": \"this is a put request\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/portfolio/item/{{portfolioItemId}}?portfolioId={{portfolioId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"portfolio",
												"item",
												"{{portfolioItemId}}"
											],
											"query": [
												{
													"key": "portfolioId",
													"value": "{{portfolioId}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "PortfolioItem-GetPortfolioItem-Registered",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));\r",
													"var portfolioId = parseInt(pm.environment.get(\"portfolioId\"));\r",
													"var portfolioItemProjectId = parseInt(pm.environment.get(\"portfolioId\"));\r",
													"\r",
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);\r",
													"});\r",
													"\r",
													"pm.test(\"Response must be valid and have a json body\", function () {\r",
													"    pm.response.to.be.ok;\r",
													"    pm.response.to.be.withBody;\r",
													"    pm.response.to.be.json;\r",
													"});\r",
													"\r",
													"pm.test(\"portfolio item exists on portfolio\", function() {\r",
													"    jsonData.portfolioItem.forEach(function(portfolioItem) {\r",
													"        pm.expect(portfolioItem).to.have.property(\"portfolioId\", 2);\r",
													"    });\r",
													"});"
												],
												"type": "text/javascript",
												"id": "3b3c3fd2-64ea-4e0a-8a7d-4637704a8b07"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "IdentityId",
												"value": "{{prUserIdentityId}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/portfolio/{{portfolioItemId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"portfolio",
												"{{portfolioItemId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "PortfolioItem-DeletePortofolioItem-Registered",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);\r",
													"});\r",
													"\r",
													"pm.test(\"Response must be valid\", function () {\r",
													"     pm.response.to.be.ok;\r",
													"});"
												],
												"type": "text/javascript",
												"id": "fb42a31e-55e6-4083-a059-c70565b062dc"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "IdentityId",
												"value": "{{prUserIdentityId}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/portfolio/item/{{portfolioItemId}}?portfolioId={{portfolioId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"portfolio",
												"item",
												"{{portfolioItemId}}"
											],
											"query": [
												{
													"key": "portfolioId",
													"value": "{{portfolioId}}"
												}
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Cleanup PR",
							"item": [
								{
									"name": "Project-DeleteProject-PR",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});"
												],
												"type": "text/javascript",
												"id": "9db7ea41-4290-4cbd-8e44-ceb11999bedc"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{prUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Project/{{projectId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Project",
												"{{projectId}}"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Cleanup Administrator",
							"item": [
								{
									"name": "CallToActionOption-DeleteCallToActionOption-Administrator",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});"
												],
												"type": "text/javascript",
												"id": "cb54515c-934f-458d-9ba0-154249edd806"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{administratorUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/CallToActionOption/{{callToActionOptionId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"CallToActionOption",
												"{{callToActionOptionId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Project-DeleteProject-Administrator",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});"
												],
												"type": "text/javascript",
												"id": "7c2023aa-fc08-4973-8100-2f6dc0d7c788"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{administratorUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Project/{{adminProjectId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Project",
												"{{adminProjectId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "User-DeleteUser-Administrator",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
													"});"
												],
												"type": "text/javascript",
												"id": "2dd66e12-4a1a-4f3b-b874-5c231495d792"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{administratorUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/User/{{createdUserId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"User",
												"{{createdUserId}}"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Global",
			"item": [
				{
					"name": "Global-AverageTime",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var avgResponseTime = postman.getGlobalVariable(\"response_average\");\r",
									"var responseTimeThreshold = pm.environment.get(\"responseTimeThreshold\");\r",
									"\r",
									"pm.test(\"Average response time: \" + avgResponseTime + \" is lower than \" + responseTimeThreshold + \"ms\", function () {\r",
									"    pm.expect(avgResponseTime <= responseTimeThreshold);\r",
									"});"
								],
								"type": "text/javascript",
								"id": "18796d5e-4b70-40ff-ace5-477a2ecac167"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{apiUrl}}",
							"host": [
								"{{apiUrl}}"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						],
						"id": "898a6f04-a725-49d0-81c6-8f59ebab40ab"
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						],
						"id": "b858c3ac-e3b7-4768-a258-3bddea06f1df"
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Cleanup",
			"item": [
				{
					"name": "DeleteUsers",
					"item": [
						{
							"name": "Registered",
							"item": [
								{
									"name": "Delete-RegisteredUser",
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "IdentityId",
												"value": "{{administratorUserIdentityId}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/User/{{registeredUserId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"User",
												"{{registeredUserId}}"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "PR",
							"item": [
								{
									"name": "Delete-PRUser",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"id": "e507946d-bcdb-4064-bf89-51885ce2f205"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "IdentityId",
												"value": "{{administratorUserIdentityId}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/User/{{prUserId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"User",
												"{{prUserId}}"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "DataOfficer",
							"item": [
								{
									"name": "Delete-DataOfficerUser",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"id": "3ca505be-0253-4083-8457-5da14c9eba7b"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{administratorUserIdentityId}}"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/User/{{dataOfficerUserId}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"User",
												"{{dataOfficerUserId}}"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Delete-ProjectForFollowing",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);\r",
									"});"
								],
								"type": "text/javascript",
								"id": "ac740ff5-5c45-4e57-84db-e72b924162d8"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "IdentityId",
								"value": "{{administratorUserIdentityId}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{apiUrl}}/api/Project/{{projectIdToFollow}}",
							"host": [
								"{{apiUrl}}"
							],
							"path": [
								"api",
								"Project",
								"{{projectIdToFollow}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete-ProjectToBeDeletedByUnauthorizedRole",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);\r",
									"});"
								],
								"type": "text/javascript",
								"id": "88bc5c8a-5e46-4329-bbdd-8747b7a88e56"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "IdentityId",
								"type": "text",
								"value": "{{administratorUserIdentityId}}"
							}
						],
						"url": {
							"raw": "{{apiUrl}}/api/Project/{{projectToBeDeletedByUnauthorizedRoles}}",
							"host": [
								"{{apiUrl}}"
							],
							"path": [
								"api",
								"Project",
								"{{projectToBeDeletedByUnauthorizedRoles}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete-UserForFollowing",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);\r",
									"});"
								],
								"type": "text/javascript",
								"id": "867ae98f-25ed-48eb-a574-be030929d066"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "IdentityId",
								"value": "{{administratorUserIdentityId}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{apiUrl}}/api/User/{{userIdToFollow}}",
							"host": [
								"{{apiUrl}}"
							],
							"path": [
								"api",
								"User",
								"{{userIdToFollow}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Role-DeleteRole-Administrator",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\"));",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
									"});"
								],
								"type": "text/javascript",
								"id": "5fbd065b-b819-47cb-acad-8c78e1c03c8f"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "IdentityId",
								"type": "text",
								"value": "{{administratorUserIdentityId}}"
							}
						],
						"url": {
							"raw": "{{apiUrl}}/api/Role/{{roleId}}",
							"host": [
								"{{apiUrl}}"
							],
							"path": [
								"api",
								"Role",
								"{{roleId}}"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		}
	],
	"auth": {
		"type": "oauth2",
		"oauth2": [
			{
				"key": "accessToken",
				"value": "{{accessToken}}",
				"type": "string"
			},
			{
				"key": "tokenType",
				"value": "Bearer",
				"type": "string"
			},
			{
				"key": "addTokenTo",
				"value": "header",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"// Adapted from: https://gist.github.com/harryi3t/dd5c61451206047db70710ff6174c3c1",
					"",
					"let tokenUrl = pm.variables.get(\"tokenUrl\");",
					"let clientId = pm.variables.get(\"clientId\");",
					"let clientSecret = pm.variables.get(\"clientSecret\");",
					"let scope = pm.variables.get(\"scope\");",
					"",
					"let getTokenRequest = {",
					"    method: 'POST',",
					"    url: tokenUrl,",
					"    auth: {",
					"        type: \"basic\",",
					"        basic: [",
					"            { key: \"username\", value: clientId },",
					"            { key: \"password\", value: clientSecret }",
					"        ]",
					"    },",
					"    body: {",
					"        mode: 'formdata',",
					"        formdata: [",
					"            { key: 'grant_type', value: 'client_credentials' },",
					"            { key: 'scope', value: scope }",
					"        ]",
					"    }",
					"};",
					"",
					"pm.sendRequest(getTokenRequest, (err, response) => {",
					"    let jsonResponse = response.json(),",
					"        newAccessToken = jsonResponse.access_token;",
					"",
					"    console.log({ err, jsonResponse, newAccessToken })",
					"",
					"    pm.environment.set('accessToken', newAccessToken);",
					"    pm.variables.set('accessToken', newAccessToken);",
					"});"
				],
				"id": "caf8154d-7633-4f36-8832-62c037b055f1"
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				],
				"id": "be131d4a-724e-4f11-bda8-4ad17404abca"
			}
		}
	],
	"protocolProfileBehavior": {}
}