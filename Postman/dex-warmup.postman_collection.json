{
	"info": {
		"_postman_id": "bde1b5a0-b040-4d63-bb82-1bae08860d0c",
		"name": "DEV-warmup",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Warmup",
			"item": [
				{
					"name": "CreateUsers",
					"item": [
						{
							"name": "Registered",
							"item": [
								{
									"name": "Create-RegisteredUser",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();\r",
													"pm.environment.set(\"registeredUserId\", jsonData.id)"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "IdentityId",
												"value": "{{administratorUserIdentityId}}",
												"type": "text"
											},
											{
												"key": "Authorization",
												"value": "Bearer eyJhbGciOiJSUzI1NiIsImtpZCI6ImU4VW1OX2NmZlBoamVPQ3hCSkZpb2ciLCJ0eXAiOiJhdCtqd3QifQ.eyJuYmYiOjE2MDgyMDE4MTMsImV4cCI6MTYwODIwNTQxMywiaXNzIjoiaHR0cHM6Ly9sb2NhbGhvc3Q6NTAwNSIsImF1ZCI6ImRleC1hcGkiLCJjbGllbnRfaWQiOiJkZXgtYXBpLWNsaWVudCIsImNsaWVudF9yb2xlIjoiQmFja2VuZEFwcGxpY2F0aW9uIiwic2NvcGUiOlsiRW1iZWRSZWFkIiwiRW1iZWRXcml0ZSIsIkhpZ2hsaWdodFJlYWQiLCJIaWdobGlnaHRXcml0ZSIsIlByb2plY3RSZWFkIiwiUHJvamVjdFdyaXRlIiwiVXNlclJlYWQiLCJVc2VyV3JpdGUiXX0.jT1Edm1dzKAu47xBFWg4IEWXoIYKTS5lScCmE798FfNdzRutVXlPmMZtac_PcmEcHrbgMvKUqd97UhpnT1ywhToXTQOVcy2EeWfprOkSWKxvTYiP1O55a01iWnOvLcs20ucbjPBHxYeq1WL3FoEfs0ahVSB4nDrqX_MYYmkvX2XriUb97fm9Sdk5fCh44q2tVH7ywZYOWmd3ZwqDB_X4GwyGGpOL_WTIQe-NaBeeONXuKcfEbF5_GpUz751nBvtnuB2lBuAeijLakb4SmtUiaxE479yjMoMz5LA6rpiGxz44gq0k-2r9EZNZs92ziop0cKuvExrDXcScJNAI4QuToQ",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"identityId\": \"{{registeredUserIdentityId}}\",\r\n    \"name\": \"Registered Postman User\",\r\n    \"email\": \"registeredUser@postman.com\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/User",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"User"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "PR",
							"item": [
								{
									"name": "Create-PRUser",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();\r",
													"pm.environment.set(\"prUserId\", jsonData.id)"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "IdentityId",
												"type": "text",
												"value": "{{administratorUserIdentityId}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"identityId\": \"{{prUserIdentityId}}\",\r\n    \"name\": \"Public Relationship Postman User\",\r\n    \"email\": \"PRUser@postman.com\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/User",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"User"
											]
										}
									},
									"response": []
								},
								{
									"name": "Set-PRUser-Role",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "IdentityId",
												"value": "{{administratorUserIdentityId}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Role/setRole?userId={{prUserId}}&roleId={{prRole}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Role",
												"setRole"
											],
											"query": [
												{
													"key": "userId",
													"value": "{{prUserId}}"
												},
												{
													"key": "roleId",
													"value": "{{prRole}}"
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "DataOfficer",
							"item": [
								{
									"name": "Create-DataOfficerUser",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();\r",
													"pm.environment.set(\"dataOfficerUserId\", jsonData.id)\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "IdentityId",
												"value": "{{administratorUserIdentityId}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"identityId\": \"{{dataOfficerUserIdentityId}}\",\r\n    \"name\": \"Data Officer Postman User\",\r\n    \"email\": \"dataOfficerUser@postman.com\",\r\n    \"institutionId\": 1\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{apiUrl}}/api/User",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"User"
											]
										}
									},
									"response": []
								},
								{
									"name": "Set-DataOfficerUser-Role",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "IdentityId",
												"value": "{{administratorUserIdentityId}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{apiUrl}}/api/Role/setRole?userId={{dataOfficerUserId}}&roleId={{dataOfficerRole}}",
											"host": [
												"{{apiUrl}}"
											],
											"path": [
												"api",
												"Role",
												"setRole"
											],
											"query": [
												{
													"key": "userId",
													"value": "{{dataOfficerUserId}}"
												},
												{
													"key": "roleId",
													"value": "{{dataOfficerRole}}"
												}
											]
										}
									},
									"response": []
								}
							]
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Project-GetAllProjects-Guest",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseTimeThreshold = parseInt(pm.environment.get(\"responseTimeThreshold\") + 5000);",
									"",
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than \" + responseTimeThreshold + \"ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(responseTimeThreshold);",
									"});",
									"",
									"pm.test(\"Response must be valid and have a json body\", function () {",
									"    pm.response.to.be.ok;",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"});",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{apiUrl}}/api/Project",
							"host": [
								"{{apiUrl}}"
							],
							"path": [
								"api",
								"Project"
							]
						}
					},
					"response": []
				},
				{
					"name": "Project-CreateProjectToFollow-Administrator",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var administratorUserId = parseInt(pm.environment.get(\"administratorUserId\"));",
									"var projectName = pm.environment.get(\"projectName\");",
									"var adminUserName = pm.environment.get(\"adminUserName\");",
									"",
									"var jsonData = pm.response.json();",
									"",
									"pm.environment.set(\"projectIdToFollow\", jsonData.id);",
									"",
									"eval(pm.environment.get(\"commonTests\"))();",
									"",
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Response must be valid and have a json body\", function () {",
									"     pm.response.to.be.success;",
									"     pm.response.to.be.withBody;",
									"     pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"Project Name is set correctly and matching: \" + projectName, function () {",
									"    pm.expect(jsonData.name).to.eql(projectName);",
									"});",
									"",
									"pm.test(\"User Name is correct and matching: \" + adminUserName, function () {",
									"    pm.expect(jsonData.user.name).to.eql(adminUserName);",
									"});",
									"",
									"pm.test(\"Identity ID is correct and matching: \" + administratorUserId, function () {",
									"    pm.expect(parseInt(jsonData.user.id)).to.eql(administratorUserId);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "IdentityId",
								"type": "text",
								"value": "{{administratorUserIdentityId}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"{{projectName}}\",\r\n  \"description\": \"postmantest_ProjectToFollow\",\r\n  \"shortDescription\": \"postmantest_ProjectToFollow\",\r\n  \"uri\": \"postmantest_ProjectToFollow\",\r\n  \"collaborators\": [\r\n    {\r\n      \"fullName\": \"postmantest_ProjectToFollow\",\r\n      \"role\": \"postmantest_ProjectToFollow\"\r\n    }\r\n  ],\r\n  \"created\": \"2020-04-20T08:24:26.693Z\",\r\n  \"updated\": \"2020-04-20T08:24:26.693Z\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{apiUrl}}/api/Project",
							"host": [
								"{{apiUrl}}"
							],
							"path": [
								"api",
								"Project"
							]
						}
					},
					"response": []
				},
				{
					"name": "User-CreateUserToFollow-Administrator",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var userName = pm.environment.get(\"userName\");",
									"",
									"var jsonData = pm.response.json();",
									"pm.environment.set(\"userIdToFollow\", jsonData.id)",
									"",
									"eval(pm.environment.get(\"commonTests\"))();",
									"",
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Response must be valid and have a json body\", function () {",
									"     pm.response.to.be.success;",
									"     pm.response.to.be.withBody;",
									"     pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"Check if created Username matches: \" + userName, function () {",
									"    pm.expect(jsonData.name).to.eql(userName);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "IdentityId",
								"type": "text",
								"value": "{{administratorUserIdentityId}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"identityId\": \"999\",\n    \"name\": \"{{userName}}\",\n    \"email\": \"postmantest_UserToFollow@example.com\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{apiUrl}}/api/User",
							"host": [
								"{{apiUrl}}"
							],
							"path": [
								"api",
								"User"
							]
						}
					},
					"response": []
				},
				{
					"name": "CreateProjectToBeDeletedByUnauthorizedRoles",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"pm.environment.set(\"projectToBeDeletedByUnauthorizedRoles\", jsonData.id);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "IdentityId",
								"value": "{{administratorUserIdentityId}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"{{projectName}}\",\r\n  \"description\": \"postmantest_ProjectToBeDeletedByUnauthorizedRoles\",\r\n  \"shortDescription\": \"postmantest_ProjectToBeDeletedByUnauthorizedRoles\",\r\n  \"uri\": \"postmantest_ProjectToBeDeletedByUnauthorizedRoles\",\r\n  \"collaborators\": [\r\n    {\r\n      \"fullName\": \"postmantest_ProjectToBeDeletedByUnauthorizedRoles\",\r\n      \"role\": \"postmantest_ProjectToBeDeletedByUnauthorizedRoles\"\r\n    }\r\n  ],\r\n  \"created\": \"2020-04-20T08:24:26.693Z\",\r\n  \"updated\": \"2020-04-20T08:24:26.693Z\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{apiUrl}}/api/Project",
							"host": [
								"{{apiUrl}}"
							],
							"path": [
								"api",
								"Project"
							]
						}
					},
					"response": []
				}
			],
			"description": "Warmup the API to ensure fast response times"
		}
	]
}